
LCD2004_i2c_F401CC_RTS_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800ad78  0800ad78  0001ad78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2dc  0800b2dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2e4  0800b2e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001e4  0800b4d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800b4d0  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afb7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe6  00000000  00000000  0002b1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cbd  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6a3  00000000  00000000  00046345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0bc  00000000  00000000  000539e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c4  00000000  00000000  000e1af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad60 	.word	0x0800ad60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800ad60 	.word	0x0800ad60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <Error>:
int32_t temper_int;

//------------------------------------------------

void Error(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  LED_OFF;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <Error+0x14>)
 80010b2:	f003 f829 	bl	8004108 <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020000 	.word	0x40020000

080010c0 <I2Cx_WriteData>:

//------------------------------------------------
//------------------------------------------------
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
 80010ca:	460b      	mov	r3, r1
 80010cc:	717b      	strb	r3, [r7, #5]
 80010ce:	4613      	mov	r3, r2
 80010d0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80010d6:	797b      	ldrb	r3, [r7, #5]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	88f9      	ldrh	r1, [r7, #6]
 80010dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <I2Cx_WriteData+0x48>)
 80010ee:	f003 fa67 	bl	80045c0 <HAL_I2C_Mem_Write>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <I2Cx_WriteData+0x40>
 80010fc:	f7ff ffd4 	bl	80010a8 <Error>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000258 	.word	0x20000258

0800110c <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	80fb      	strh	r3, [r7, #6]
 8001118:	4613      	mov	r3, r2
 800111a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	b29a      	uxth	r2, r3
 8001128:	88f9      	ldrh	r1, [r7, #6]
 800112a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	f107 030e 	add.w	r3, r7, #14
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <I2Cx_ReadData+0x50>)
 800113e:	f003 fb39 	bl	80047b4 <HAL_I2C_Mem_Read>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <I2Cx_ReadData+0x44>
 800114c:	f7ff ffac 	bl	80010a8 <Error>
  return value;
 8001150:	7bbb      	ldrb	r3, [r7, #14]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000258 	.word	0x20000258

08001160 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	603a      	str	r2, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	460b      	mov	r3, r1
 800116e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	b29a      	uxth	r2, r3
 8001178:	88f9      	ldrh	r1, [r7, #6]
 800117a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2302      	movs	r3, #2
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <I2Cx_ReadData16+0x48>)
 800118c:	f003 fb12 	bl	80047b4 <HAL_I2C_Mem_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <I2Cx_ReadData16+0x3e>
 800119a:	f7ff ff85 	bl	80010a8 <Error>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000258 	.word	0x20000258

080011ac <I2Cx_ReadData24>:

//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af04      	add	r7, sp, #16
 80011b2:	4603      	mov	r3, r0
 80011b4:	603a      	str	r2, [r7, #0]
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	460b      	mov	r3, r1
 80011ba:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	88f9      	ldrh	r1, [r7, #6]
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2303      	movs	r3, #3
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <I2Cx_ReadData24+0x48>)
 80011d8:	f003 faec 	bl	80047b4 <HAL_I2C_Mem_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <I2Cx_ReadData24+0x3e>
 80011e6:	f7ff ff5f 	bl	80010a8 <Error>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000258 	.word	0x20000258

080011f8 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001208:	79ba      	ldrb	r2, [r7, #6]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4619      	mov	r1, r3
 800120e:	20ec      	movs	r0, #236	; 0xec
 8001210:	f7ff ff56 	bl	80010c0 <I2Cx_WriteData>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4619      	mov	r1, r3
 800122a:	20ec      	movs	r0, #236	; 0xec
 800122c:	f7ff ff6e 	bl	800110c <I2Cx_ReadData>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]
  return res;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	6039      	str	r1, [r7, #0]
 8001248:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	20ec      	movs	r0, #236	; 0xec
 8001252:	f7ff ff85 	bl	8001160 <I2Cx_ReadData16>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	20ec      	movs	r0, #236	; 0xec
 8001272:	f7ff ff75 	bl	8001160 <I2Cx_ReadData16>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	6039      	str	r1, [r7, #0]
 8001288:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	20ec      	movs	r0, #236	; 0xec
 8001292:	f7ff ff65 	bl	8001160 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	801a      	strh	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	20ec      	movs	r0, #236	; 0xec
 80012ce:	f7ff ff6d 	bl	80011ac <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80012e2:	431a      	orrs	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80012ee:	4313      	orrs	r3, r2
 80012f0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001306:	20f3      	movs	r0, #243	; 0xf3
 8001308:	f7ff ff88 	bl	800121c <BME280_ReadReg>
 800130c:	4603      	mov	r3, r0
 800130e:	f003 0309 	and.w	r3, r3, #9
 8001312:	71fb      	strb	r3, [r7, #7]
  return res;
 8001314:	79fb      	ldrb	r3, [r7, #7]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <BME280_ReadCoefficients>:

//------------------------------------------------
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001320:	b598      	push	{r3, r4, r7, lr}
 8001322:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001324:	4937      	ldr	r1, [pc, #220]	; (8001404 <BME280_ReadCoefficients+0xe4>)
 8001326:	2088      	movs	r0, #136	; 0x88
 8001328:	f7ff ff89 	bl	800123e <BME280_ReadReg_U16>
//  sprintf(str, "DIG_T1: %u", CalibData.dig_T1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str,strlen(str),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 800132c:	4936      	ldr	r1, [pc, #216]	; (8001408 <BME280_ReadCoefficients+0xe8>)
 800132e:	208a      	movs	r0, #138	; 0x8a
 8001330:	f7ff ff95 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str, "DIG_T2: %d", CalibData.dig_T2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str,strlen(str),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <BME280_ReadCoefficients+0xec>)
 8001336:	208c      	movs	r0, #140	; 0x8c
 8001338:	f7ff ff91 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str, "DIG_T3: %drn", CalibData.dig_T3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str,strlen(str),0x1000);
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 800133c:	4934      	ldr	r1, [pc, #208]	; (8001410 <BME280_ReadCoefficients+0xf0>)
 800133e:	208e      	movs	r0, #142	; 0x8e
 8001340:	f7ff ff7d 	bl	800123e <BME280_ReadReg_U16>
//  sprintf(str1, "DIG_P1: %urn", CalibData.dig_P1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8001344:	4933      	ldr	r1, [pc, #204]	; (8001414 <BME280_ReadCoefficients+0xf4>)
 8001346:	2090      	movs	r0, #144	; 0x90
 8001348:	f7ff ff89 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P2: %drn", CalibData.dig_P2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 800134c:	4932      	ldr	r1, [pc, #200]	; (8001418 <BME280_ReadCoefficients+0xf8>)
 800134e:	2092      	movs	r0, #146	; 0x92
 8001350:	f7ff ff85 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P3: %drn", CalibData.dig_P3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001354:	4931      	ldr	r1, [pc, #196]	; (800141c <BME280_ReadCoefficients+0xfc>)
 8001356:	2094      	movs	r0, #148	; 0x94
 8001358:	f7ff ff81 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P4: %drn", CalibData.dig_P4);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 800135c:	4930      	ldr	r1, [pc, #192]	; (8001420 <BME280_ReadCoefficients+0x100>)
 800135e:	2096      	movs	r0, #150	; 0x96
 8001360:	f7ff ff7d 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P5: %drn", CalibData.dig_P5);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8001364:	492f      	ldr	r1, [pc, #188]	; (8001424 <BME280_ReadCoefficients+0x104>)
 8001366:	2098      	movs	r0, #152	; 0x98
 8001368:	f7ff ff79 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P6: %drn", CalibData.dig_P6);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 800136c:	492e      	ldr	r1, [pc, #184]	; (8001428 <BME280_ReadCoefficients+0x108>)
 800136e:	209a      	movs	r0, #154	; 0x9a
 8001370:	f7ff ff75 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P7: %drn", CalibData.dig_P7);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8001374:	492d      	ldr	r1, [pc, #180]	; (800142c <BME280_ReadCoefficients+0x10c>)
 8001376:	209c      	movs	r0, #156	; 0x9c
 8001378:	f7ff ff71 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P8: %drn", CalibData.dig_P8);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 800137c:	492c      	ldr	r1, [pc, #176]	; (8001430 <BME280_ReadCoefficients+0x110>)
 800137e:	209e      	movs	r0, #158	; 0x9e
 8001380:	f7ff ff6d 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P9: %drn", CalibData.dig_P9);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001384:	20a1      	movs	r0, #161	; 0xa1
 8001386:	f7ff ff49 	bl	800121c <BME280_ReadReg>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <BME280_ReadCoefficients+0xe4>)
 8001390:	761a      	strb	r2, [r3, #24]
//  sprintf(str1, "DIG_H1: %drn", CalibData.dig_H1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001392:	4928      	ldr	r1, [pc, #160]	; (8001434 <BME280_ReadCoefficients+0x114>)
 8001394:	20e1      	movs	r0, #225	; 0xe1
 8001396:	f7ff ff62 	bl	800125e <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_H2: %drn", CalibData.dig_H2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 800139a:	20e3      	movs	r0, #227	; 0xe3
 800139c:	f7ff ff3e 	bl	800121c <BME280_ReadReg>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <BME280_ReadCoefficients+0xe4>)
 80013a6:	771a      	strb	r2, [r3, #28]
//  sprintf(str1, "DIG_H3: %drn", CalibData.dig_H3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80013a8:	20e4      	movs	r0, #228	; 0xe4
 80013aa:	f7ff ff37 	bl	800121c <BME280_ReadReg>
 80013ae:	4603      	mov	r3, r0
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	b21c      	sxth	r4, r3
 80013b4:	20e5      	movs	r0, #229	; 0xe5
 80013b6:	f7ff ff31 	bl	800121c <BME280_ReadReg>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b21b      	sxth	r3, r3
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4323      	orrs	r3, r4
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <BME280_ReadCoefficients+0xe4>)
 80013ca:	83da      	strh	r2, [r3, #30]
//  sprintf(str1, "DIG_H4: %drn", CalibData.dig_H4);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80013cc:	20e6      	movs	r0, #230	; 0xe6
 80013ce:	f7ff ff25 	bl	800121c <BME280_ReadReg>
 80013d2:	4603      	mov	r3, r0
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b21c      	sxth	r4, r3
 80013d8:	20e5      	movs	r0, #229	; 0xe5
 80013da:	f7ff ff1f 	bl	800121c <BME280_ReadReg>
 80013de:	4603      	mov	r3, r0
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4323      	orrs	r3, r4
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <BME280_ReadCoefficients+0xe4>)
 80013ec:	841a      	strh	r2, [r3, #32]
//  sprintf(str1, "DIG_H5: %drn", CalibData.dig_H5);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 80013ee:	20e7      	movs	r0, #231	; 0xe7
 80013f0:	f7ff ff14 	bl	800121c <BME280_ReadReg>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <BME280_ReadCoefficients+0xe4>)
 80013fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
//  sprintf(str1, "DIG_H6: %drn", CalibData.dig_H3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
}
 80013fe:	bf00      	nop
 8001400:	bd98      	pop	{r3, r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	20000200 	.word	0x20000200
 8001408:	20000202 	.word	0x20000202
 800140c:	20000204 	.word	0x20000204
 8001410:	20000206 	.word	0x20000206
 8001414:	20000208 	.word	0x20000208
 8001418:	2000020a 	.word	0x2000020a
 800141c:	2000020c 	.word	0x2000020c
 8001420:	2000020e 	.word	0x2000020e
 8001424:	20000210 	.word	0x20000210
 8001428:	20000212 	.word	0x20000212
 800142c:	20000214 	.word	0x20000214
 8001430:	20000216 	.word	0x20000216
 8001434:	2000021a 	.word	0x2000021a

08001438 <BME280_SetStandby>:

//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001442:	20f5      	movs	r0, #245	; 0xf5
 8001444:	f7ff feea 	bl	800121c <BME280_ReadReg>
 8001448:	4603      	mov	r3, r0
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	f023 031f 	bic.w	r3, r3, #31
 8001458:	b25a      	sxtb	r2, r3
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4313      	orrs	r3, r2
 8001460:	b25b      	sxtb	r3, r3
 8001462:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	4619      	mov	r1, r3
 8001468:	20f5      	movs	r0, #245	; 0xf5
 800146a:	f7ff fec5 	bl	80011f8 <BME280_WriteReg>
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <BME280_SetFilter>:

//------------------------------------------------
void BME280_SetFilter(uint8_t filter) {
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
 uint8_t reg;
 reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001480:	20f5      	movs	r0, #245	; 0xf5
 8001482:	f7ff fecb 	bl	800121c <BME280_ReadReg>
 8001486:	4603      	mov	r3, r0
 8001488:	f023 031c 	bic.w	r3, r3, #28
 800148c:	73fb      	strb	r3, [r7, #15]
 reg |= filter & BME280_FILTER_MSK;
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	b25a      	sxtb	r2, r3
 8001498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	73fb      	strb	r3, [r7, #15]
 BME280_WriteReg(BME280_REG_CONFIG,reg);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4619      	mov	r1, r3
 80014a6:	20f5      	movs	r0, #245	; 0xf5
 80014a8:	f7ff fea6 	bl	80011f8 <BME280_WriteReg>
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <BME280_SetOversamplingTemper>:

//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 80014be:	20f4      	movs	r0, #244	; 0xf4
 80014c0:	f7ff feac 	bl	800121c <BME280_ReadReg>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	f023 031f 	bic.w	r3, r3, #31
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4313      	orrs	r3, r2
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	4619      	mov	r1, r3
 80014e4:	20f4      	movs	r0, #244	; 0xf4
 80014e6:	f7ff fe87 	bl	80011f8 <BME280_WriteReg>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80014fc:	20f4      	movs	r0, #244	; 0xf4
 80014fe:	f7ff fe8d 	bl	800121c <BME280_ReadReg>
 8001502:	4603      	mov	r3, r0
 8001504:	f023 031c 	bic.w	r3, r3, #28
 8001508:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	f003 031c 	and.w	r3, r3, #28
 8001512:	b25a      	sxtb	r2, r3
 8001514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001518:	4313      	orrs	r3, r2
 800151a:	b25b      	sxtb	r3, r3
 800151c:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	4619      	mov	r1, r3
 8001522:	20f4      	movs	r0, #244	; 0xf4
 8001524:	f7ff fe68 	bl	80011f8 <BME280_WriteReg>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 800153a:	20f2      	movs	r0, #242	; 0xf2
 800153c:	f7ff fe6e 	bl	800121c <BME280_ReadReg>
 8001540:	4603      	mov	r3, r0
 8001542:	f023 0307 	bic.w	r3, r3, #7
 8001546:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	b25a      	sxtb	r2, r3
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4313      	orrs	r3, r2
 8001558:	b25b      	sxtb	r3, r3
 800155a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	20f2      	movs	r0, #242	; 0xf2
 8001562:	f7ff fe49 	bl	80011f8 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001566:	20f4      	movs	r0, #244	; 0xf4
 8001568:	f7ff fe58 	bl	800121c <BME280_ReadReg>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	4619      	mov	r1, r3
 8001574:	20f4      	movs	r0, #244	; 0xf4
 8001576:	f7ff fe3f 	bl	80011f8 <BME280_WriteReg>
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 800158c:	20f4      	movs	r0, #244	; 0xf4
 800158e:	f7ff fe45 	bl	800121c <BME280_ReadReg>
 8001592:	4603      	mov	r3, r0
 8001594:	f023 0303 	bic.w	r3, r3, #3
 8001598:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4619      	mov	r1, r3
 80015b2:	20f4      	movs	r0, #244	; 0xf4
 80015b4:	f7ff fe20 	bl	80011f8 <BME280_WriteReg>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  uint32_t temper_raw;
  int32_t val1, val2;
  BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	20fa      	movs	r0, #250	; 0xfa
 80015d2:	f7ff fe72 	bl	80012ba <BME280_ReadReg_BE_U24>
  temper_raw >>= 4;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	603b      	str	r3, [r7, #0]
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <BME280_ReadTemperature+0xa4>)
 80015e2:	8812      	ldrh	r2, [r2, #0]
 80015e4:	0052      	lsls	r2, r2, #1
 80015e6:	1a9b      	subs	r3, r3, r2
		  ((int32_t)CalibData.dig_T2)) >> 11;
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <BME280_ReadTemperature+0xa4>)
 80015ea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
		  ((int32_t)CalibData.dig_T2)) >> 11;
 80015f2:	0adb      	lsrs	r3, r3, #11
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80015f4:	60bb      	str	r3, [r7, #8]
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <BME280_ReadTemperature+0xa4>)
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	1a9b      	subs	r3, r3, r2
		  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	0912      	lsrs	r2, r2, #4
 8001604:	4917      	ldr	r1, [pc, #92]	; (8001664 <BME280_ReadTemperature+0xa4>)
 8001606:	8809      	ldrh	r1, [r1, #0]
 8001608:	1a52      	subs	r2, r2, r1
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800160a:	fb02 f303 	mul.w	r3, r2, r3
		  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800160e:	0b1b      	lsrs	r3, r3, #12
		  ((int32_t)CalibData.dig_T3)) >> 14;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <BME280_ReadTemperature+0xa4>)
 8001612:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001616:	fb02 f303 	mul.w	r3, r2, r3
		  ((int32_t)CalibData.dig_T3)) >> 14;
 800161a:	0b9b      	lsrs	r3, r3, #14
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800161c:	607b      	str	r3, [r7, #4]
  temper_int = val1 + val2;
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <BME280_ReadTemperature+0xa8>)
 8001626:	6013      	str	r3, [r2, #0]
  temper_float = ((temper_int * 5 + 128) >> 8);
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <BME280_ReadTemperature+0xa8>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3380      	adds	r3, #128	; 0x80
 8001634:	121b      	asrs	r3, r3, #8
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163e:	edc7 7a03 	vstr	s15, [r7, #12]
  temper_float /= 100.0f;
 8001642:	ed97 7a03 	vldr	s14, [r7, #12]
 8001646:	eddf 6a09 	vldr	s13, [pc, #36]	; 800166c <BME280_ReadTemperature+0xac>
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
  return temper_float;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	ee07 3a90 	vmov	s15, r3
}
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000200 	.word	0x20000200
 8001668:	20000224 	.word	0x20000224
 800166c:	42c80000 	.word	0x42c80000

08001670 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001674:	b0d0      	sub	sp, #320	; 0x140
 8001676:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  uint32_t press_raw, pres_int;
  int64_t val1, val2, p;
  BME280_ReadTemperature(); // must be done first to get t_fine
 8001680:	f7ff ff9e 	bl	80015c0 <BME280_ReadTemperature>
  BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8001684:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001688:	4619      	mov	r1, r3
 800168a:	20f7      	movs	r0, #247	; 0xf7
 800168c:	f7ff fe15 	bl	80012ba <BME280_ReadReg_BE_U24>
  press_raw >>= 4;
 8001690:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  val1 = ((int64_t) temper_int) - 128000;
 800169a:	4bac      	ldr	r3, [pc, #688]	; (800194c <BME280_ReadPressure+0x2dc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	17da      	asrs	r2, r3, #31
 80016a0:	4698      	mov	r8, r3
 80016a2:	4691      	mov	r9, r2
 80016a4:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 80016a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80016aa:	f149 33ff 	adc.w	r3, r9, #4294967295	; 0xffffffff
 80016ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016b4:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 80016b8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80016bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016c0:	fb03 f102 	mul.w	r1, r3, r2
 80016c4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80016c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	18ca      	adds	r2, r1, r3
 80016d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016d6:	fba3 4503 	umull	r4, r5, r3, r3
 80016da:	1953      	adds	r3, r2, r5
 80016dc:	461d      	mov	r5, r3
 80016de:	4b9c      	ldr	r3, [pc, #624]	; (8001950 <BME280_ReadPressure+0x2e0>)
 80016e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	17da      	asrs	r2, r3, #31
 80016e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016ec:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80016f0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80016f4:	4603      	mov	r3, r0
 80016f6:	fb03 f205 	mul.w	r2, r3, r5
 80016fa:	460b      	mov	r3, r1
 80016fc:	fb04 f303 	mul.w	r3, r4, r3
 8001700:	4413      	add	r3, r2
 8001702:	4602      	mov	r2, r0
 8001704:	fba4 ab02 	umull	sl, fp, r4, r2
 8001708:	445b      	add	r3, fp
 800170a:	469b      	mov	fp, r3
 800170c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
 8001710:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
  val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001714:	4b8e      	ldr	r3, [pc, #568]	; (8001950 <BME280_ReadPressure+0x2e0>)
 8001716:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001722:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001726:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800172a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800172e:	462a      	mov	r2, r5
 8001730:	fb02 f203 	mul.w	r2, r2, r3
 8001734:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	441a      	add	r2, r3
 8001740:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001744:	4621      	mov	r1, r4
 8001746:	fba3 1301 	umull	r1, r3, r3, r1
 800174a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800174e:	460b      	mov	r3, r1
 8001750:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800175e:	f04f 0000 	mov.w	r0, #0
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 800176a:	462b      	mov	r3, r5
 800176c:	0459      	lsls	r1, r3, #17
 800176e:	4623      	mov	r3, r4
 8001770:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001774:	4623      	mov	r3, r4
 8001776:	0458      	lsls	r0, r3, #17
 8001778:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800177c:	1814      	adds	r4, r2, r0
 800177e:	643c      	str	r4, [r7, #64]	; 0x40
 8001780:	414b      	adcs	r3, r1
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
 8001784:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001788:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 800178c:	4b70      	ldr	r3, [pc, #448]	; (8001950 <BME280_ReadPressure+0x2e0>)
 800178e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001792:	b21b      	sxth	r3, r3
 8001794:	17da      	asrs	r2, r3, #31
 8001796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800179a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017aa:	00d9      	lsls	r1, r3, #3
 80017ac:	2000      	movs	r0, #0
 80017ae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017b2:	1814      	adds	r4, r2, r0
 80017b4:	63bc      	str	r4, [r7, #56]	; 0x38
 80017b6:	414b      	adcs	r3, r1
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ba:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80017be:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80017c2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80017c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017ca:	fb03 f102 	mul.w	r1, r3, r2
 80017ce:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80017d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	18ca      	adds	r2, r1, r3
 80017dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017e0:	fba3 1303 	umull	r1, r3, r3, r3
 80017e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017e8:	460b      	mov	r3, r1
 80017ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017f8:	4b55      	ldr	r3, [pc, #340]	; (8001950 <BME280_ReadPressure+0x2e0>)
 80017fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	17da      	asrs	r2, r3, #31
 8001802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001806:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800180a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800180e:	462b      	mov	r3, r5
 8001810:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8001814:	4642      	mov	r2, r8
 8001816:	fb02 f203 	mul.w	r2, r2, r3
 800181a:	464b      	mov	r3, r9
 800181c:	4621      	mov	r1, r4
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	4622      	mov	r2, r4
 8001826:	4641      	mov	r1, r8
 8001828:	fba2 1201 	umull	r1, r2, r2, r1
 800182c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001830:	460a      	mov	r2, r1
 8001832:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8001836:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800183a:	4413      	add	r3, r2
 800183c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001840:	f04f 0000 	mov.w	r0, #0
 8001844:	f04f 0100 	mov.w	r1, #0
 8001848:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800184c:	4623      	mov	r3, r4
 800184e:	0a18      	lsrs	r0, r3, #8
 8001850:	462b      	mov	r3, r5
 8001852:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001856:	462b      	mov	r3, r5
 8001858:	1219      	asrs	r1, r3, #8
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <BME280_ReadPressure+0x2e0>)
 800185c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001860:	b21b      	sxth	r3, r3
 8001862:	17da      	asrs	r2, r3, #31
 8001864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001868:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800186c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001870:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001874:	464a      	mov	r2, r9
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800187e:	4644      	mov	r4, r8
 8001880:	fb04 f303 	mul.w	r3, r4, r3
 8001884:	441a      	add	r2, r3
 8001886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800188a:	4644      	mov	r4, r8
 800188c:	fba3 4304 	umull	r4, r3, r3, r4
 8001890:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001894:	4623      	mov	r3, r4
 8001896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800189a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800189e:	18d3      	adds	r3, r2, r3
 80018a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80018b0:	464c      	mov	r4, r9
 80018b2:	0323      	lsls	r3, r4, #12
 80018b4:	4644      	mov	r4, r8
 80018b6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018ba:	4644      	mov	r4, r8
 80018bc:	0322      	lsls	r2, r4, #12
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	; 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
 80018c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80018cc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
  val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 80018d0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80018d4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80018d8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80018dc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <BME280_ReadPressure+0x2e0>)
 80018e2:	88db      	ldrh	r3, [r3, #6]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80018f0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80018f4:	462b      	mov	r3, r5
 80018f6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80018fa:	4642      	mov	r2, r8
 80018fc:	fb02 f203 	mul.w	r2, r2, r3
 8001900:	464b      	mov	r3, r9
 8001902:	4621      	mov	r1, r4
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	4622      	mov	r2, r4
 800190c:	4641      	mov	r1, r8
 800190e:	fba2 1201 	umull	r1, r2, r2, r1
 8001912:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001916:	460a      	mov	r2, r1
 8001918:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800191c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001920:	4413      	add	r3, r2
 8001922:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001932:	4629      	mov	r1, r5
 8001934:	104a      	asrs	r2, r1, #1
 8001936:	4629      	mov	r1, r5
 8001938:	17cb      	asrs	r3, r1, #31
 800193a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  if (val1 == 0) {
 800193e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001942:	4313      	orrs	r3, r2
 8001944:	d106      	bne.n	8001954 <BME280_ReadPressure+0x2e4>
    return 0; // avoid exception caused by division by zero
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e194      	b.n	8001c76 <BME280_ReadPressure+0x606>
 800194c:	20000224 	.word	0x20000224
 8001950:	20000200 	.word	0x20000200
  }
  p = 1048576 - press_raw;
 8001954:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001958:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800195c:	2200      	movs	r2, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001962:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001966:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  p = (((p << 31) - val2) * 3125) / val1;
 800196a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001974:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001978:	07db      	lsls	r3, r3, #31
 800197a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800197e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001986:	4621      	mov	r1, r4
 8001988:	1a89      	subs	r1, r1, r2
 800198a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800198e:	4629      	mov	r1, r5
 8001990:	eb61 0303 	sbc.w	r3, r1, r3
 8001994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001998:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800199c:	4622      	mov	r2, r4
 800199e:	462b      	mov	r3, r5
 80019a0:	1891      	adds	r1, r2, r2
 80019a2:	6239      	str	r1, [r7, #32]
 80019a4:	415b      	adcs	r3, r3
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019ac:	4621      	mov	r1, r4
 80019ae:	1851      	adds	r1, r2, r1
 80019b0:	61b9      	str	r1, [r7, #24]
 80019b2:	4629      	mov	r1, r5
 80019b4:	414b      	adcs	r3, r1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019c4:	4649      	mov	r1, r9
 80019c6:	018b      	lsls	r3, r1, #6
 80019c8:	4641      	mov	r1, r8
 80019ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ce:	4641      	mov	r1, r8
 80019d0:	018a      	lsls	r2, r1, #6
 80019d2:	4641      	mov	r1, r8
 80019d4:	1889      	adds	r1, r1, r2
 80019d6:	6139      	str	r1, [r7, #16]
 80019d8:	4649      	mov	r1, r9
 80019da:	eb43 0101 	adc.w	r1, r3, r1
 80019de:	6179      	str	r1, [r7, #20]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019ec:	4649      	mov	r1, r9
 80019ee:	008b      	lsls	r3, r1, #2
 80019f0:	4641      	mov	r1, r8
 80019f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019f6:	4641      	mov	r1, r8
 80019f8:	008a      	lsls	r2, r1, #2
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	4622      	mov	r2, r4
 8001a02:	189b      	adds	r3, r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	460b      	mov	r3, r1
 8001a08:	462a      	mov	r2, r5
 8001a0a:	eb42 0303 	adc.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	008b      	lsls	r3, r1, #2
 8001a20:	4641      	mov	r1, r8
 8001a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a26:	4641      	mov	r1, r8
 8001a28:	008a      	lsls	r2, r1, #2
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4622      	mov	r2, r4
 8001a32:	189b      	adds	r3, r3, r2
 8001a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a38:	462b      	mov	r3, r5
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	eb42 0303 	adc.w	r3, r2, r3
 8001a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a44:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001a48:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a4c:	f7ff f924 	bl	8000c98 <__aeabi_ldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001a58:	4b8b      	ldr	r3, [pc, #556]	; (8001c88 <BME280_ReadPressure+0x618>)
 8001a5a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	17da      	asrs	r2, r3, #31
 8001a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a64:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a66:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0b50      	lsrs	r0, r2, #13
 8001a74:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a78:	1359      	asrs	r1, r3, #13
 8001a7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a7e:	462b      	mov	r3, r5
 8001a80:	fb00 f203 	mul.w	r2, r0, r3
 8001a84:	4623      	mov	r3, r4
 8001a86:	fb03 f301 	mul.w	r3, r3, r1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	fba2 1200 	umull	r1, r2, r2, r0
 8001a92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001a96:	460a      	mov	r2, r1
 8001a98:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001a9c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001aa6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	0b50      	lsrs	r0, r2, #13
 8001ab4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ab8:	1359      	asrs	r1, r3, #13
 8001aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001abe:	462b      	mov	r3, r5
 8001ac0:	fb00 f203 	mul.w	r2, r0, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	fb03 f301 	mul.w	r3, r3, r1
 8001aca:	4413      	add	r3, r2
 8001acc:	4622      	mov	r2, r4
 8001ace:	fba2 1200 	umull	r1, r2, r2, r0
 8001ad2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001adc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001af2:	4621      	mov	r1, r4
 8001af4:	0e4a      	lsrs	r2, r1, #25
 8001af6:	4629      	mov	r1, r5
 8001af8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001afc:	4629      	mov	r1, r5
 8001afe:	164b      	asrs	r3, r1, #25
 8001b00:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001b04:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <BME280_ReadPressure+0x618>)
 8001b06:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8001b10:	677a      	str	r2, [r7, #116]	; 0x74
 8001b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b16:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001b1a:	462a      	mov	r2, r5
 8001b1c:	fb02 f203 	mul.w	r2, r2, r3
 8001b20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b24:	4621      	mov	r1, r4
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	441a      	add	r2, r3
 8001b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b30:	4621      	mov	r1, r4
 8001b32:	fba3 1301 	umull	r1, r3, r3, r1
 8001b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b44:	18d3      	adds	r3, r2, r3
 8001b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001b56:	4621      	mov	r1, r4
 8001b58:	0cca      	lsrs	r2, r1, #19
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b60:	4629      	mov	r1, r5
 8001b62:	14cb      	asrs	r3, r1, #19
 8001b64:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001b68:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001b6c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001b70:	1884      	adds	r4, r0, r2
 8001b72:	66bc      	str	r4, [r7, #104]	; 0x68
 8001b74:	eb41 0303 	adc.w	r3, r1, r3
 8001b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b7a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b7e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001b82:	4621      	mov	r1, r4
 8001b84:	1889      	adds	r1, r1, r2
 8001b86:	6639      	str	r1, [r7, #96]	; 0x60
 8001b88:	4629      	mov	r1, r5
 8001b8a:	eb43 0101 	adc.w	r1, r3, r1
 8001b8e:	6679      	str	r1, [r7, #100]	; 0x64
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	0a18      	lsrs	r0, r3, #8
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	1219      	asrs	r1, r3, #8
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <BME280_ReadPressure+0x618>)
 8001bac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	17da      	asrs	r2, r3, #31
 8001bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bb6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8001bc4:	464c      	mov	r4, r9
 8001bc6:	0123      	lsls	r3, r4, #4
 8001bc8:	4644      	mov	r4, r8
 8001bca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bce:	4644      	mov	r4, r8
 8001bd0:	0122      	lsls	r2, r4, #4
 8001bd2:	1884      	adds	r4, r0, r2
 8001bd4:	603c      	str	r4, [r7, #0]
 8001bd6:	eb41 0303 	adc.w	r3, r1, r3
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001be0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001be4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	0a02      	lsrs	r2, r0, #8
 8001bf2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001bf6:	120b      	asrs	r3, r1, #8
 8001bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfc:	fb03 f402 	mul.w	r4, r3, r2
 8001c00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c04:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001c08:	653b      	str	r3, [r7, #80]	; 0x50
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <BME280_ReadPressure+0x61c>)
 8001c10:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c14:	464a      	mov	r2, r9
 8001c16:	fb03 f202 	mul.w	r2, r3, r2
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4641      	mov	r1, r8
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <BME280_ReadPressure+0x61c>)
 8001c26:	4641      	mov	r1, r8
 8001c28:	fba1 1202 	umull	r1, r2, r1, r2
 8001c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c30:	460a      	mov	r2, r1
 8001c32:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <BME280_ReadPressure+0x620>)
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001c4a:	f7ff f825 	bl	8000c98 <__aeabi_ldivmod>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4613      	mov	r3, r2
 8001c54:	4423      	add	r3, r4
 8001c56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  press_float = pres_int / 100.0f;
 8001c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c66:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001c94 <BME280_ReadPressure+0x624>
 8001c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6e:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
  return press_float;
 8001c72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
}
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001c82:	46bd      	mov	sp, r7
 8001c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c88:	20000200 	.word	0x20000200
 8001c8c:	0005f5e1 	.word	0x0005f5e1
 8001c90:	000186a0 	.word	0x000186a0
 8001c94:	42c80000 	.word	0x42c80000

08001c98 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  int16_t hum_raw;
  int32_t hum_raw_sign, v_x1_u32r;
  BME280_ReadTemperature(); // must be done first to get t_fine
 8001ca4:	f7ff fc8c 	bl	80015c0 <BME280_ReadTemperature>
  BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	4619      	mov	r1, r3
 8001cac:	20fd      	movs	r0, #253	; 0xfd
 8001cae:	f7ff fae6 	bl	800127e <BME280_ReadReg_BE_S16>
  hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	60bb      	str	r3, [r7, #8]
  v_x1_u32r = (temper_int - ((int32_t)76800));
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <BME280_ReadHumidity+0xf8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001cc2:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	039a      	lsls	r2, r3, #14
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <BME280_ReadHumidity+0xfc>)
 8001cca:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001cce:	051b      	lsls	r3, r3, #20
 8001cd0:	1ad2      	subs	r2, r2, r3
		  (((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <BME280_ReadHumidity+0xfc>)
 8001cd4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
  v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001ce0:	1ad3      	subs	r3, r2, r3
		  (((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001ce2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ce6:	13db      	asrs	r3, r3, #15
		  (((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001ce8:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <BME280_ReadHumidity+0xfc>)
 8001cea:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001cee:	4611      	mov	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	fb01 f202 	mul.w	r2, r1, r2
 8001cf6:	1292      	asrs	r2, r2, #10
				  (((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001cf8:	4926      	ldr	r1, [pc, #152]	; (8001d94 <BME280_ReadHumidity+0xfc>)
 8001cfa:	7f09      	ldrb	r1, [r1, #28]
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	fb00 f101 	mul.w	r1, r0, r1
 8001d04:	12c9      	asrs	r1, r1, #11
 8001d06:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		  (((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001d0a:	fb01 f202 	mul.w	r2, r1, r2
				  (((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001d0e:	1292      	asrs	r2, r2, #10
 8001d10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001d14:	491f      	ldr	r1, [pc, #124]	; (8001d94 <BME280_ReadHumidity+0xfc>)
 8001d16:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001d1a:	fb01 f202 	mul.w	r2, r1, r2
 8001d1e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001d22:	1392      	asrs	r2, r2, #14
  v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	13db      	asrs	r3, r3, #15
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	13d2      	asrs	r2, r2, #15
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	11db      	asrs	r3, r3, #7
		  ((int32_t)CalibData.dig_H1)) >> 4));
 8001d38:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <BME280_ReadHumidity+0xfc>)
 8001d3a:	7e12      	ldrb	r2, [r2, #24]
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
		  ((int32_t)CalibData.dig_H1)) >> 4));
 8001d40:	111b      	asrs	r3, r3, #4
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d4e:	607b      	str	r3, [r7, #4]
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001d56:	bfa8      	it	ge
 8001d58:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001d5c:	607b      	str	r3, [r7, #4]
  hum_float = (v_x1_u32r>>12);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	131b      	asrs	r3, r3, #12
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6a:	edc7 7a03 	vstr	s15, [r7, #12]
  hum_float /= 1024.0f;
 8001d6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d72:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001d98 <BME280_ReadHumidity+0x100>
 8001d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7a:	edc7 7a03 	vstr	s15, [r7, #12]
  return hum_float;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ee07 3a90 	vmov	s15, r3
}
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000224 	.word	0x20000224
 8001d94:	20000200 	.word	0x20000200
 8001d98:	44800000 	.word	0x44800000

08001d9c <BME280_Init>:
  att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
//  if(value !=BME280_ID)
//  	  {
//  	    Error();
//  	    return;
//  	  }
  BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE) ;
 8001da0:	21b6      	movs	r1, #182	; 0xb6
 8001da2:	20e0      	movs	r0, #224	; 0xe0
 8001da4:	f7ff fa28 	bl	80011f8 <BME280_WriteReg>
  while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8001da8:	bf00      	nop
 8001daa:	f7ff faa9 	bl	8001300 <BME280_ReadStatus>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f8      	bne.n	8001daa <BME280_Init+0xe>
  BME280_ReadCoefficients();
 8001db8:	f7ff fab2 	bl	8001320 <BME280_ReadCoefficients>
  BME280_SetStandby(BME280_STBY_1000);
 8001dbc:	20a0      	movs	r0, #160	; 0xa0
 8001dbe:	f7ff fb3b 	bl	8001438 <BME280_SetStandby>
  BME280_SetFilter(BME280_FILTER_4);
 8001dc2:	2008      	movs	r0, #8
 8001dc4:	f7ff fb57 	bl	8001476 <BME280_SetFilter>
  BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001dc8:	2060      	movs	r0, #96	; 0x60
 8001dca:	f7ff fb73 	bl	80014b4 <BME280_SetOversamplingTemper>
  BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f7ff fb8f 	bl	80014f2 <BME280_SetOversamplingPressure>
  BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff fbab 	bl	8001530 <BME280_SetOversamplingHum>
//    (value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
//    ((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
//  SSD1306_GotoXY(0, 40) ; // del
//  SSD1306_Puts(str, &Font_11x18, 1) ; //del
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_SetMode(BME280_MODE_NORMAL);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f7ff fbd1 	bl	8001582 <BME280_SetMode>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <lcd_symbol_creat>:
	{
	micros *= (SystemCoreClock/1000000)/5 ;
	}


void lcd_symbol_creat(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b090      	sub	sp, #64	; 0x40
 8001de8:	af00      	add	r7, sp, #0
	uint8_t symbol800[8] = {0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f} ; // EL800 (1)
 8001dea:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <lcd_symbol_creat+0xdc>)
 8001dec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol300[8] = {0x1f,0x1f,0x1f,0x0,0x0,0x0,0x0,0x0} ;      // EL300 (2)
 8001df8:	4a32      	ldr	r2, [pc, #200]	; (8001ec4 <lcd_symbol_creat+0xe0>)
 8001dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e02:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol302[8] = {0x1f,0x1f,0x1f,0x0,0x0,0x0,0x1f,0x1f} ;    // EL302 (3)
 8001e06:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <lcd_symbol_creat+0xe4>)
 8001e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e10:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol003[8] = {0x0,0x0,0x0,0x0,0x0,0x1f,0x1f,0x1f} ;      // EL003 (4)
 8001e14:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <lcd_symbol_creat+0xe8>)
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol103[8] = {0x1f,0x0,0x0,0x0,0x0,0x1f,0x1f,0x1f} ;     // EL103 (5)
 8001e22:	4a2b      	ldr	r2, [pc, #172]	; (8001ed0 <lcd_symbol_creat+0xec>)
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol000[8] = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0} ;         // EL000 (6)
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <lcd_symbol_creat+0xf0>)
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e3a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol002[8] = {0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x1f} ;       // EL002 (7)
 8001e3e:	4a26      	ldr	r2, [pc, #152]	; (8001ed8 <lcd_symbol_creat+0xf4>)
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e48:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t symbol100[8] = {0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0} ;        // EL100 (8)
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <lcd_symbol_creat+0xf8>)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e54:	e883 0003 	stmia.w	r3, {r0, r1}

	lcd1602_Create_symbol((uint8_t *) symbol800, 1) ;
 8001e58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 f984 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol300, 2) ;
 8001e64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f97e 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol302, 3) ;
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	2103      	movs	r1, #3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 f978 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol003, 4) ;
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	2104      	movs	r1, #4
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 f972 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol103, 5) ;
 8001e88:	f107 0318 	add.w	r3, r7, #24
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 f96c 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol000, 6) ;
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	2106      	movs	r1, #6
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 f966 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol002, 7) ;
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	2107      	movs	r1, #7
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 f960 	bl	800316c <lcd1602_Create_symbol>
	lcd1602_Create_symbol((uint8_t *) symbol100, 8) ;
 8001eac:	463b      	mov	r3, r7
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 f95b 	bl	800316c <lcd1602_Create_symbol>
}
 8001eb6:	bf00      	nop
 8001eb8:	3740      	adds	r7, #64	; 0x40
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800ad78 	.word	0x0800ad78
 8001ec4:	0800ad80 	.word	0x0800ad80
 8001ec8:	0800ad88 	.word	0x0800ad88
 8001ecc:	0800ad90 	.word	0x0800ad90
 8001ed0:	0800ad98 	.word	0x0800ad98
 8001ed4:	0800ada0 	.word	0x0800ada0
 8001ed8:	0800ada8 	.word	0x0800ada8
 8001edc:	0800adb0 	.word	0x0800adb0

08001ee0 <lcd_symbol_0>:
	lcd1602_Print_symbol(6) ;
	lcd1602_SetCursor(x+2, y+1) ;
	lcd1602_Print_symbol(6) ;
}*/

static void lcd_symbol_0(uint8_t x, uint8_t y){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460a      	mov	r2, r1
 8001eea:	71fb      	strb	r3, [r7, #7]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 8001ef0:	79ba      	ldrb	r2, [r7, #6]
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 f8da 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8001efc:	2001      	movs	r0, #1
 8001efe:	f001 f895 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	79ba      	ldrb	r2, [r7, #6]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 f8cf 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(2) ;
 8001f12:	2002      	movs	r0, #2
 8001f14:	f001 f88a 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	79ba      	ldrb	r2, [r7, #6]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f8c4 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f001 f87f 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 f8b9 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f001 f874 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 f8af 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(4) ;
 8001f52:	2004      	movs	r0, #4
 8001f54:	f001 f86a 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f001 f8a2 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f001 f85d 	bl	800302c <lcd1602_Print_symbol>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <lcd_symbol_1>:
static void lcd_symbol_1(uint8_t x, uint8_t y){
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	460a      	mov	r2, r1
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	4613      	mov	r3, r2
 8001f88:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 8001f8a:	79ba      	ldrb	r2, [r7, #6]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 f88d 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 8001f96:	2006      	movs	r0, #6
 8001f98:	f001 f848 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	79ba      	ldrb	r2, [r7, #6]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 f882 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8001fac:	2001      	movs	r0, #1
 8001fae:	f001 f83d 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	79ba      	ldrb	r2, [r7, #6]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 f877 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 8001fc2:	2006      	movs	r0, #6
 8001fc4:	f001 f832 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 f86c 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 8001fd8:	2006      	movs	r0, #6
 8001fda:	f001 f827 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 f862 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8001fec:	2001      	movs	r0, #1
 8001fee:	f001 f81d 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	79bb      	ldrb	r3, [r7, #6]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f001 f855 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 8002006:	2006      	movs	r0, #6
 8002008:	f001 f810 	bl	800302c <lcd1602_Print_symbol>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <lcd_symbol_2>:

static void lcd_symbol_2(uint8_t x, uint8_t y){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	460a      	mov	r2, r1
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	4613      	mov	r3, r2
 8002022:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 8002024:	79ba      	ldrb	r2, [r7, #6]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f001 f840 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 8002030:	2003      	movs	r0, #3
 8002032:	f000 fffb 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	3301      	adds	r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	79ba      	ldrb	r2, [r7, #6]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f001 f835 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 8002046:	2003      	movs	r0, #3
 8002048:	f000 fff0 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	3302      	adds	r3, #2
 8002050:	b2db      	uxtb	r3, r3
 8002052:	79ba      	ldrb	r2, [r7, #6]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f82a 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 800205c:	2001      	movs	r0, #1
 800205e:	f000 ffe5 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8002062:	79bb      	ldrb	r3, [r7, #6]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f001 f81f 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002072:	2001      	movs	r0, #1
 8002074:	f000 ffda 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	3301      	adds	r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f815 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 8002086:	2005      	movs	r0, #5
 8002088:	f000 ffd0 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	3302      	adds	r3, #2
 8002090:	b2da      	uxtb	r2, r3
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	3301      	adds	r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f001 f808 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 80020a0:	2005      	movs	r0, #5
 80020a2:	f000 ffc3 	bl	800302c <lcd1602_Print_symbol>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <lcd_symbol_3>:
static void lcd_symbol_3(uint8_t x, uint8_t y){
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	460a      	mov	r2, r1
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	4613      	mov	r3, r2
 80020bc:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;


	lcd1602_SetCursor(x, y) ;
 80020be:	79ba      	ldrb	r2, [r7, #6]
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fff3 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 80020ca:	2003      	movs	r0, #3
 80020cc:	f000 ffae 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	79ba      	ldrb	r2, [r7, #6]
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 ffe8 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 ffa3 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3302      	adds	r3, #2
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	79ba      	ldrb	r2, [r7, #6]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 ffdd 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 ff98 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	3301      	adds	r3, #1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 ffd2 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 800210c:	2005      	movs	r0, #5
 800210e:	f000 ff8d 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	3301      	adds	r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f000 ffc8 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 8002120:	2005      	movs	r0, #5
 8002122:	f000 ff83 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	3302      	adds	r3, #2
 800212a:	b2da      	uxtb	r2, r3
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	3301      	adds	r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	4610      	mov	r0, r2
 8002136:	f000 ffbb 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 800213a:	2001      	movs	r0, #1
 800213c:	f000 ff76 	bl	800302c <lcd1602_Print_symbol>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <lcd_symbol_4>:
static void lcd_symbol_4(uint8_t x, uint8_t y){
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	460a      	mov	r2, r1
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	4613      	mov	r3, r2
 8002156:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 8002158:	79ba      	ldrb	r2, [r7, #6]
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f000 ffa6 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002164:	2001      	movs	r0, #1
 8002166:	f000 ff61 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	3301      	adds	r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	79ba      	ldrb	r2, [r7, #6]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f000 ff9b 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(7) ;
 800217a:	2007      	movs	r0, #7
 800217c:	f000 ff56 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	3302      	adds	r3, #2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	79ba      	ldrb	r2, [r7, #6]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 ff90 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002190:	2001      	movs	r0, #1
 8002192:	f000 ff4b 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 ff85 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(8) ;
 80021a6:	2008      	movs	r0, #8
 80021a8:	f000 ff40 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	3301      	adds	r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2101      	movs	r1, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 ff7b 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(8) ;
 80021ba:	2008      	movs	r0, #8
 80021bc:	f000 ff36 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	3302      	adds	r3, #2
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 ff6e 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80021d4:	2001      	movs	r0, #1
 80021d6:	f000 ff29 	bl	800302c <lcd1602_Print_symbol>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <lcd_symbol_5>:
static void lcd_symbol_5(uint8_t x, uint8_t y){
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	460a      	mov	r2, r1
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	4613      	mov	r3, r2
 80021f0:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 80021f2:	79ba      	ldrb	r2, [r7, #6]
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 ff59 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 ff14 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	3301      	adds	r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	79ba      	ldrb	r2, [r7, #6]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ff4e 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 8002214:	2003      	movs	r0, #3
 8002216:	f000 ff09 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	3302      	adds	r3, #2
 800221e:	b2db      	uxtb	r3, r3
 8002220:	79ba      	ldrb	r2, [r7, #6]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f000 ff43 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 800222a:	2003      	movs	r0, #3
 800222c:	f000 fefe 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8002230:	79bb      	ldrb	r3, [r7, #6]
 8002232:	3301      	adds	r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f000 ff38 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 8002240:	2005      	movs	r0, #5
 8002242:	f000 fef3 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	3301      	adds	r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2101      	movs	r1, #1
 800224e:	4618      	mov	r0, r3
 8002250:	f000 ff2e 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 8002254:	2005      	movs	r0, #5
 8002256:	f000 fee9 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	3302      	adds	r3, #2
 800225e:	b2da      	uxtb	r2, r3
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	3301      	adds	r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f000 ff21 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 800226e:	2001      	movs	r0, #1
 8002270:	f000 fedc 	bl	800302c <lcd1602_Print_symbol>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <lcd_symbol_6>:
static void lcd_symbol_6(uint8_t x, uint8_t y){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	460a      	mov	r2, r1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 800228c:	79ba      	ldrb	r2, [r7, #6]
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f000 ff0c 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002298:	2001      	movs	r0, #1
 800229a:	f000 fec7 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	79ba      	ldrb	r2, [r7, #6]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 ff01 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 febc 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	3302      	adds	r3, #2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	79ba      	ldrb	r2, [r7, #6]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fef6 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 80022c4:	2003      	movs	r0, #3
 80022c6:	f000 feb1 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	3301      	adds	r3, #1
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 feeb 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fea6 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2101      	movs	r1, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fee1 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 80022ee:	2005      	movs	r0, #5
 80022f0:	f000 fe9c 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	3302      	adds	r3, #2
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 fed4 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002308:	2001      	movs	r0, #1
 800230a:	f000 fe8f 	bl	800302c <lcd1602_Print_symbol>

}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <lcd_symbol_7>:

static void lcd_symbol_7(uint8_t x, uint8_t y){
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	460a      	mov	r2, r1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	4613      	mov	r3, r2
 8002324:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 8002326:	79ba      	ldrb	r2, [r7, #6]
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f000 febf 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(2) ;
 8002332:	2002      	movs	r0, #2
 8002334:	f000 fe7a 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	3301      	adds	r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	79ba      	ldrb	r2, [r7, #6]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 feb4 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(2) ;
 8002348:	2002      	movs	r0, #2
 800234a:	f000 fe6f 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	3302      	adds	r3, #2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	79ba      	ldrb	r2, [r7, #6]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fea9 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 800235e:	2001      	movs	r0, #1
 8002360:	f000 fe64 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fe9e 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 8002374:	2006      	movs	r0, #6
 8002376:	f000 fe59 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	3301      	adds	r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fe94 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002388:	2001      	movs	r0, #1
 800238a:	f000 fe4f 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	3302      	adds	r3, #2
 8002392:	b2da      	uxtb	r2, r3
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	3301      	adds	r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	4610      	mov	r0, r2
 800239e:	f000 fe87 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 80023a2:	2006      	movs	r0, #6
 80023a4:	f000 fe42 	bl	800302c <lcd1602_Print_symbol>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <lcd_symbol_8>:

static void lcd_symbol_8(uint8_t x, uint8_t y){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	71fb      	strb	r3, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	71bb      	strb	r3, [r7, #6]
//	symbol_creat() ;


	lcd1602_SetCursor(x, y) ;
 80023c0:	79ba      	ldrb	r2, [r7, #6]
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fe72 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80023cc:	2001      	movs	r0, #1
 80023ce:	f000 fe2d 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	79ba      	ldrb	r2, [r7, #6]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fe67 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 80023e2:	2003      	movs	r0, #3
 80023e4:	f000 fe22 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	3302      	adds	r3, #2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	79ba      	ldrb	r2, [r7, #6]
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fe5c 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80023f8:	2001      	movs	r0, #1
 80023fa:	f000 fe17 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 80023fe:	79bb      	ldrb	r3, [r7, #6]
 8002400:	3301      	adds	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fe51 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 800240e:	2001      	movs	r0, #1
 8002410:	f000 fe0c 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, +1) ;
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	3301      	adds	r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fe47 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 8002422:	2005      	movs	r0, #5
 8002424:	f000 fe02 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	3302      	adds	r3, #2
 800242c:	b2da      	uxtb	r2, r3
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	3301      	adds	r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f000 fe3a 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 800243c:	2001      	movs	r0, #1
 800243e:	f000 fdf5 	bl	800302c <lcd1602_Print_symbol>

}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <lcd_symbol_9>:

static void lcd_symbol_9(uint8_t x, uint8_t y){
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	460a      	mov	r2, r1
 8002454:	71fb      	strb	r3, [r7, #7]
 8002456:	4613      	mov	r3, r2
 8002458:	71bb      	strb	r3, [r7, #6]
	//symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 800245a:	79ba      	ldrb	r2, [r7, #6]
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fe25 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002466:	2001      	movs	r0, #1
 8002468:	f000 fde0 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1, y) ;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3301      	adds	r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	79ba      	ldrb	r2, [r7, #6]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fe1a 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(3) ;
 800247c:	2003      	movs	r0, #3
 800247e:	f000 fdd5 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y) ;
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	3302      	adds	r3, #2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	79ba      	ldrb	r2, [r7, #6]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fe0f 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 8002492:	2001      	movs	r0, #1
 8002494:	f000 fdca 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fe04 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 80024a8:	2005      	movs	r0, #5
 80024aa:	f000 fdbf 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+1,y+1) ;
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f000 fdf7 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(5) ;
 80024c2:	2005      	movs	r0, #5
 80024c4:	f000 fdb2 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+2, y+1) ;
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	3302      	adds	r3, #2
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fdea 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(1) ;
 80024dc:	2001      	movs	r0, #1
 80024de:	f000 fda5 	bl	800302c <lcd1602_Print_symbol>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <lcd_symbol_dublenull>:
	lcd1602_Print_symbol(8) ;
	lcd1602_SetCursor(x, y+1) ;
	lcd1602_Print_symbol(8) ;
}*/

static void lcd_symbol_dublenull(uint8_t x, uint8_t y){
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	460a      	mov	r2, r1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71bb      	strb	r3, [r7, #6]
	//symbol_creat() ;

	lcd1602_SetCursor(x, y) ;
 80024fa:	79ba      	ldrb	r2, [r7, #6]
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fdd5 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 8002506:	2006      	movs	r0, #6
 8002508:	f000 fd90 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x, y+1) ;
 800250c:	79bb      	ldrb	r3, [r7, #6]
 800250e:	3301      	adds	r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fdca 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(6) ;
 800251c:	2006      	movs	r0, #6
 800251e:	f000 fd85 	bl	800302c <lcd1602_Print_symbol>

}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <lcd_print_hours>:
}*/




void lcd_print_hours (uint8_t hours){
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	//symbol_creat() ;
	if (hours / 10 == 0) {
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b09      	cmp	r3, #9
 800253a:	d81c      	bhi.n	8002576 <lcd_print_hours+0x4a>
        lcd_symbol_dublenull(x+0, y) ;
 800253c:	4b90      	ldr	r3, [pc, #576]	; (8002780 <lcd_print_hours+0x254>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4a90      	ldr	r2, [pc, #576]	; (8002784 <lcd_print_hours+0x258>)
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ffcf 	bl	80024ea <lcd_symbol_dublenull>
	    lcd_symbol_dublenull(x+1, y) ;
 800254c:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <lcd_print_hours+0x254>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4a8b      	ldr	r2, [pc, #556]	; (8002784 <lcd_print_hours+0x258>)
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ffc5 	bl	80024ea <lcd_symbol_dublenull>
	    lcd_symbol_dublenull(x+2, y) ;
 8002560:	4b87      	ldr	r3, [pc, #540]	; (8002780 <lcd_print_hours+0x254>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3302      	adds	r3, #2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4a86      	ldr	r2, [pc, #536]	; (8002784 <lcd_print_hours+0x258>)
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ffbb 	bl	80024ea <lcd_symbol_dublenull>
 8002574:	e019      	b.n	80025aa <lcd_print_hours+0x7e>
	    } else {
	    if(hours / 10 == 1) lcd_symbol_1(x, y) ;
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	3b0a      	subs	r3, #10
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b09      	cmp	r3, #9
 800257e:	d807      	bhi.n	8002590 <lcd_print_hours+0x64>
 8002580:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <lcd_print_hours+0x254>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <lcd_print_hours+0x258>)
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fcf5 	bl	8001f7a <lcd_symbol_1>
	    if(hours / 10 == 2) lcd_symbol_2(x, y) ;
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	3b14      	subs	r3, #20
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b09      	cmp	r3, #9
 8002598:	d807      	bhi.n	80025aa <lcd_print_hours+0x7e>
 800259a:	4b79      	ldr	r3, [pc, #484]	; (8002780 <lcd_print_hours+0x254>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4a79      	ldr	r2, [pc, #484]	; (8002784 <lcd_print_hours+0x258>)
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fd35 	bl	8002014 <lcd_symbol_2>
	    }
	   if(hours % 10 == 0) lcd_symbol_0(x+4, y) ;
 80025aa:	79fa      	ldrb	r2, [r7, #7]
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <lcd_print_hours+0x25c>)
 80025ae:	fba3 1302 	umull	r1, r3, r3, r2
 80025b2:	08d9      	lsrs	r1, r3, #3
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <lcd_print_hours+0xac>
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <lcd_print_hours+0x254>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3304      	adds	r3, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4a6d      	ldr	r2, [pc, #436]	; (8002784 <lcd_print_hours+0x258>)
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fc84 	bl	8001ee0 <lcd_symbol_0>
	   if(hours % 10 == 1) lcd_symbol_1(x+4, y) ;
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <lcd_print_hours+0x25c>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	08d9      	lsrs	r1, r3, #3
 80025e2:	460b      	mov	r3, r1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d109      	bne.n	8002606 <lcd_print_hours+0xda>
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <lcd_print_hours+0x254>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3304      	adds	r3, #4
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	4a62      	ldr	r2, [pc, #392]	; (8002784 <lcd_print_hours+0x258>)
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fcba 	bl	8001f7a <lcd_symbol_1>
	   if(hours % 10 == 2) lcd_symbol_2(x+4, y) ;
 8002606:	79fa      	ldrb	r2, [r7, #7]
 8002608:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <lcd_print_hours+0x25c>)
 800260a:	fba3 1302 	umull	r1, r3, r3, r2
 800260e:	08d9      	lsrs	r1, r3, #3
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d109      	bne.n	8002634 <lcd_print_hours+0x108>
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <lcd_print_hours+0x254>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4a56      	ldr	r2, [pc, #344]	; (8002784 <lcd_print_hours+0x258>)
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fcf0 	bl	8002014 <lcd_symbol_2>
	   if(hours % 10 == 3) lcd_symbol_3(x+4, y) ;
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <lcd_print_hours+0x25c>)
 8002638:	fba3 1302 	umull	r1, r3, r3, r2
 800263c:	08d9      	lsrs	r1, r3, #3
 800263e:	460b      	mov	r3, r1
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b03      	cmp	r3, #3
 800264c:	d109      	bne.n	8002662 <lcd_print_hours+0x136>
 800264e:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <lcd_print_hours+0x254>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3304      	adds	r3, #4
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <lcd_print_hours+0x258>)
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fd26 	bl	80020ae <lcd_symbol_3>
	   if(hours % 10 == 4) lcd_symbol_4(x+4, y) ;
 8002662:	79fa      	ldrb	r2, [r7, #7]
 8002664:	4b48      	ldr	r3, [pc, #288]	; (8002788 <lcd_print_hours+0x25c>)
 8002666:	fba3 1302 	umull	r1, r3, r3, r2
 800266a:	08d9      	lsrs	r1, r3, #3
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b04      	cmp	r3, #4
 800267a:	d109      	bne.n	8002690 <lcd_print_hours+0x164>
 800267c:	4b40      	ldr	r3, [pc, #256]	; (8002780 <lcd_print_hours+0x254>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3304      	adds	r3, #4
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4a3f      	ldr	r2, [pc, #252]	; (8002784 <lcd_print_hours+0x258>)
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fd5c 	bl	8002148 <lcd_symbol_4>
	   if(hours % 10 == 5) lcd_symbol_5(x+4, y) ;
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <lcd_print_hours+0x25c>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	08d9      	lsrs	r1, r3, #3
 800269a:	460b      	mov	r3, r1
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d109      	bne.n	80026be <lcd_print_hours+0x192>
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <lcd_print_hours+0x254>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3304      	adds	r3, #4
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4a34      	ldr	r2, [pc, #208]	; (8002784 <lcd_print_hours+0x258>)
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fd92 	bl	80021e2 <lcd_symbol_5>
	   if(hours % 10 == 6) lcd_symbol_6(x+4, y) ;
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <lcd_print_hours+0x25c>)
 80026c2:	fba3 1302 	umull	r1, r3, r3, r2
 80026c6:	08d9      	lsrs	r1, r3, #3
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d109      	bne.n	80026ec <lcd_print_hours+0x1c0>
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <lcd_print_hours+0x254>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	3304      	adds	r3, #4
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <lcd_print_hours+0x258>)
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fdc8 	bl	800227c <lcd_symbol_6>
	   if(hours % 10 == 7) lcd_symbol_7(x+4, y) ;
 80026ec:	79fa      	ldrb	r2, [r7, #7]
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <lcd_print_hours+0x25c>)
 80026f0:	fba3 1302 	umull	r1, r3, r3, r2
 80026f4:	08d9      	lsrs	r1, r3, #3
 80026f6:	460b      	mov	r3, r1
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b07      	cmp	r3, #7
 8002704:	d109      	bne.n	800271a <lcd_print_hours+0x1ee>
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <lcd_print_hours+0x254>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3304      	adds	r3, #4
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <lcd_print_hours+0x258>)
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fdfe 	bl	8002316 <lcd_symbol_7>
	   if(hours % 10 == 8) lcd_symbol_8(x+4, y) ;
 800271a:	79fa      	ldrb	r2, [r7, #7]
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <lcd_print_hours+0x25c>)
 800271e:	fba3 1302 	umull	r1, r3, r3, r2
 8002722:	08d9      	lsrs	r1, r3, #3
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b08      	cmp	r3, #8
 8002732:	d109      	bne.n	8002748 <lcd_print_hours+0x21c>
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <lcd_print_hours+0x254>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	3304      	adds	r3, #4
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <lcd_print_hours+0x258>)
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fe34 	bl	80023b0 <lcd_symbol_8>
	   if(hours % 10 == 9) lcd_symbol_9(x+4, y) ;
 8002748:	79fa      	ldrb	r2, [r7, #7]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <lcd_print_hours+0x25c>)
 800274c:	fba3 1302 	umull	r1, r3, r3, r2
 8002750:	08d9      	lsrs	r1, r3, #3
 8002752:	460b      	mov	r3, r1
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b09      	cmp	r3, #9
 8002760:	d109      	bne.n	8002776 <lcd_print_hours+0x24a>
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <lcd_print_hours+0x254>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3304      	adds	r3, #4
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <lcd_print_hours+0x258>)
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe6a 	bl	800244a <lcd_symbol_9>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000228 	.word	0x20000228
 8002784:	20000229 	.word	0x20000229
 8002788:	cccccccd 	.word	0xcccccccd

0800278c <lcd_print_minutes>:

void lcd_print_minutes (uint8_t minutes) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
//	symbol_creat() ;
		if (minutes / 10 == 0) {
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b09      	cmp	r3, #9
 800279a:	d80a      	bhi.n	80027b2 <lcd_print_minutes+0x26>
		lcd_symbol_0(x+8, y) ;
 800279c:	4b9f      	ldr	r3, [pc, #636]	; (8002a1c <lcd_print_minutes+0x290>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	3308      	adds	r3, #8
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4a9e      	ldr	r2, [pc, #632]	; (8002a20 <lcd_print_minutes+0x294>)
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fb98 	bl	8001ee0 <lcd_symbol_0>
 80027b0:	e04a      	b.n	8002848 <lcd_print_minutes+0xbc>
		} else {
		if(minutes / 10 == 1) lcd_symbol_1(x+8, y) ;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	3b0a      	subs	r3, #10
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d809      	bhi.n	80027d0 <lcd_print_minutes+0x44>
 80027bc:	4b97      	ldr	r3, [pc, #604]	; (8002a1c <lcd_print_minutes+0x290>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3308      	adds	r3, #8
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4a96      	ldr	r2, [pc, #600]	; (8002a20 <lcd_print_minutes+0x294>)
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fbd5 	bl	8001f7a <lcd_symbol_1>
		if(minutes / 10 == 2) lcd_symbol_2(x+8, y) ;
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	3b14      	subs	r3, #20
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b09      	cmp	r3, #9
 80027d8:	d809      	bhi.n	80027ee <lcd_print_minutes+0x62>
 80027da:	4b90      	ldr	r3, [pc, #576]	; (8002a1c <lcd_print_minutes+0x290>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	3308      	adds	r3, #8
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4a8f      	ldr	r2, [pc, #572]	; (8002a20 <lcd_print_minutes+0x294>)
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fc13 	bl	8002014 <lcd_symbol_2>
		if(minutes / 10 == 3) lcd_symbol_3(x+8, y) ;
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	3b1e      	subs	r3, #30
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	d809      	bhi.n	800280c <lcd_print_minutes+0x80>
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <lcd_print_minutes+0x290>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	3308      	adds	r3, #8
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <lcd_print_minutes+0x294>)
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fc51 	bl	80020ae <lcd_symbol_3>
		if(minutes / 10 == 4) lcd_symbol_4(x+8, y) ;
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	3b28      	subs	r3, #40	; 0x28
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b09      	cmp	r3, #9
 8002814:	d809      	bhi.n	800282a <lcd_print_minutes+0x9e>
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <lcd_print_minutes+0x290>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3308      	adds	r3, #8
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <lcd_print_minutes+0x294>)
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc8f 	bl	8002148 <lcd_symbol_4>
		if(minutes / 10 == 5) lcd_symbol_5(x+8, y) ;
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	3b32      	subs	r3, #50	; 0x32
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b09      	cmp	r3, #9
 8002832:	d809      	bhi.n	8002848 <lcd_print_minutes+0xbc>
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <lcd_print_minutes+0x290>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3308      	adds	r3, #8
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4a78      	ldr	r2, [pc, #480]	; (8002a20 <lcd_print_minutes+0x294>)
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fccd 	bl	80021e2 <lcd_symbol_5>
		}
		if(minutes % 10 == 0) lcd_symbol_0(x+12, y) ;
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <lcd_print_minutes+0x298>)
 800284c:	fba3 1302 	umull	r1, r3, r3, r2
 8002850:	08d9      	lsrs	r1, r3, #3
 8002852:	460b      	mov	r3, r1
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <lcd_print_minutes+0xea>
 8002862:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <lcd_print_minutes+0x290>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4a6d      	ldr	r2, [pc, #436]	; (8002a20 <lcd_print_minutes+0x294>)
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fb35 	bl	8001ee0 <lcd_symbol_0>
		if(minutes % 10 == 1) lcd_symbol_1(x+12, y) ;
 8002876:	79fa      	ldrb	r2, [r7, #7]
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <lcd_print_minutes+0x298>)
 800287a:	fba3 1302 	umull	r1, r3, r3, r2
 800287e:	08d9      	lsrs	r1, r3, #3
 8002880:	460b      	mov	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d109      	bne.n	80028a4 <lcd_print_minutes+0x118>
 8002890:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <lcd_print_minutes+0x290>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4a61      	ldr	r2, [pc, #388]	; (8002a20 <lcd_print_minutes+0x294>)
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb6b 	bl	8001f7a <lcd_symbol_1>
		if(minutes % 10 == 2) lcd_symbol_2(x+12, y) ;
 80028a4:	79fa      	ldrb	r2, [r7, #7]
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <lcd_print_minutes+0x298>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	08d9      	lsrs	r1, r3, #3
 80028ae:	460b      	mov	r3, r1
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d109      	bne.n	80028d2 <lcd_print_minutes+0x146>
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <lcd_print_minutes+0x290>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4a56      	ldr	r2, [pc, #344]	; (8002a20 <lcd_print_minutes+0x294>)
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fba1 	bl	8002014 <lcd_symbol_2>
		if(minutes % 10 == 3) lcd_symbol_3(x+12, y) ;
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <lcd_print_minutes+0x298>)
 80028d6:	fba3 1302 	umull	r1, r3, r3, r2
 80028da:	08d9      	lsrs	r1, r3, #3
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d109      	bne.n	8002900 <lcd_print_minutes+0x174>
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <lcd_print_minutes+0x290>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4a4a      	ldr	r2, [pc, #296]	; (8002a20 <lcd_print_minutes+0x294>)
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fbd7 	bl	80020ae <lcd_symbol_3>
		if(minutes % 10 == 4) lcd_symbol_4(x+12, y) ;
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <lcd_print_minutes+0x298>)
 8002904:	fba3 1302 	umull	r1, r3, r3, r2
 8002908:	08d9      	lsrs	r1, r3, #3
 800290a:	460b      	mov	r3, r1
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b04      	cmp	r3, #4
 8002918:	d109      	bne.n	800292e <lcd_print_minutes+0x1a2>
 800291a:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <lcd_print_minutes+0x290>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4a3f      	ldr	r2, [pc, #252]	; (8002a20 <lcd_print_minutes+0x294>)
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fc0d 	bl	8002148 <lcd_symbol_4>
		if(minutes % 10 == 5) lcd_symbol_5(x+12, y) ;
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <lcd_print_minutes+0x298>)
 8002932:	fba3 1302 	umull	r1, r3, r3, r2
 8002936:	08d9      	lsrs	r1, r3, #3
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b05      	cmp	r3, #5
 8002946:	d109      	bne.n	800295c <lcd_print_minutes+0x1d0>
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <lcd_print_minutes+0x290>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <lcd_print_minutes+0x294>)
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fc43 	bl	80021e2 <lcd_symbol_5>
		if(minutes % 10 == 6) lcd_symbol_6(x+12, y) ;
 800295c:	79fa      	ldrb	r2, [r7, #7]
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <lcd_print_minutes+0x298>)
 8002960:	fba3 1302 	umull	r1, r3, r3, r2
 8002964:	08d9      	lsrs	r1, r3, #3
 8002966:	460b      	mov	r3, r1
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b06      	cmp	r3, #6
 8002974:	d109      	bne.n	800298a <lcd_print_minutes+0x1fe>
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <lcd_print_minutes+0x290>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4a28      	ldr	r2, [pc, #160]	; (8002a20 <lcd_print_minutes+0x294>)
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fc79 	bl	800227c <lcd_symbol_6>
		if(minutes % 10 == 7) lcd_symbol_7(x+12, y) ;
 800298a:	79fa      	ldrb	r2, [r7, #7]
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <lcd_print_minutes+0x298>)
 800298e:	fba3 1302 	umull	r1, r3, r3, r2
 8002992:	08d9      	lsrs	r1, r3, #3
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	d109      	bne.n	80029b8 <lcd_print_minutes+0x22c>
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <lcd_print_minutes+0x290>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <lcd_print_minutes+0x294>)
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fcaf 	bl	8002316 <lcd_symbol_7>
		if(minutes % 10 == 8) lcd_symbol_8(x+12, y) ;
 80029b8:	79fa      	ldrb	r2, [r7, #7]
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <lcd_print_minutes+0x298>)
 80029bc:	fba3 1302 	umull	r1, r3, r3, r2
 80029c0:	08d9      	lsrs	r1, r3, #3
 80029c2:	460b      	mov	r3, r1
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d109      	bne.n	80029e6 <lcd_print_minutes+0x25a>
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <lcd_print_minutes+0x290>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <lcd_print_minutes+0x294>)
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fce5 	bl	80023b0 <lcd_symbol_8>
		if(minutes % 10 == 9) lcd_symbol_9(x+12, y) ;
 80029e6:	79fa      	ldrb	r2, [r7, #7]
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <lcd_print_minutes+0x298>)
 80029ea:	fba3 1302 	umull	r1, r3, r3, r2
 80029ee:	08d9      	lsrs	r1, r3, #3
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	d109      	bne.n	8002a14 <lcd_print_minutes+0x288>
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <lcd_print_minutes+0x290>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <lcd_print_minutes+0x294>)
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fd1b 	bl	800244a <lcd_symbol_9>
	}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000228 	.word	0x20000228
 8002a20:	20000229 	.word	0x20000229
 8002a24:	cccccccd 	.word	0xcccccccd

08002a28 <lcd_print_s>:

void lcd_print_s(uint8_t x, uint8_t y) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	460a      	mov	r2, r1
 8002a32:	71fb      	strb	r3, [r7, #7]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71bb      	strb	r3, [r7, #6]
	lcd1602_SetCursor(x+7, y) ;
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	3307      	adds	r3, #7
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	79ba      	ldrb	r2, [r7, #6]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fb34 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(4) ;
 8002a48:	2004      	movs	r0, #4
 8002a4a:	f000 faef 	bl	800302c <lcd1602_Print_symbol>
	lcd1602_SetCursor(x+7, y+1) ;
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	3307      	adds	r3, #7
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	79bb      	ldrb	r3, [r7, #6]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f000 fb27 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_symbol(2) ;
 8002a62:	2002      	movs	r0, #2
 8002a64:	f000 fae2 	bl	800302c <lcd1602_Print_symbol>
	HAL_Delay(500) ;
 8002a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a6c:	f001 f8be 	bl	8003bec <HAL_Delay>
	lcd_symbol_dublenull(x+7, y) ;
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	3307      	adds	r3, #7
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	79ba      	ldrb	r2, [r7, #6]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fd35 	bl	80024ea <lcd_symbol_dublenull>
	HAL_Delay(500) ;
 8002a80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a84:	f001 f8b2 	bl	8003bec <HAL_Delay>
	}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <lcd_print_sekonds>:

void lcd_print_sekonds (uint8_t sekonds){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
	extern char lcd1602_tx_buffer[40] ;
	if (sekonds < 10) {
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	d824      	bhi.n	8002aea <lcd_print_sekonds+0x5a>
		lcd1602_SetCursor(x+15, y+1) ;
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <lcd_print_sekonds+0x8c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	330f      	adds	r3, #15
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <lcd_print_sekonds+0x90>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f000 fafc 	bl	80030b0 <lcd1602_SetCursor>
		lcd1602_Print_symbol(6) ;
 8002ab8:	2006      	movs	r0, #6
 8002aba:	f000 fab7 	bl	800302c <lcd1602_Print_symbol>
		lcd1602_SetCursor(x+16, y+1) ;
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <lcd_print_sekonds+0x8c>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <lcd_print_sekonds+0x90>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f000 faed 	bl	80030b0 <lcd1602_SetCursor>
		sprintf(lcd1602_tx_buffer, "%d", sekonds ) ;
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4912      	ldr	r1, [pc, #72]	; (8002b24 <lcd_print_sekonds+0x94>)
 8002adc:	4812      	ldr	r0, [pc, #72]	; (8002b28 <lcd_print_sekonds+0x98>)
 8002ade:	f004 fb4f 	bl	8007180 <siprintf>
		lcd1602_Print_text(lcd1602_tx_buffer) ;
 8002ae2:	4811      	ldr	r0, [pc, #68]	; (8002b28 <lcd_print_sekonds+0x98>)
 8002ae4:	f000 fac7 	bl	8003076 <lcd1602_Print_text>
	if(sekonds >= 10) {
		lcd1602_SetCursor(x+15, 1) ;
		sprintf(lcd1602_tx_buffer, "%d", sekonds ) ;
		lcd1602_Print_text(lcd1602_tx_buffer) ;}
		}
	}
 8002ae8:	e013      	b.n	8002b12 <lcd_print_sekonds+0x82>
	if(sekonds >= 10) {
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	d910      	bls.n	8002b12 <lcd_print_sekonds+0x82>
		lcd1602_SetCursor(x+15, 1) ;
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <lcd_print_sekonds+0x8c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	330f      	adds	r3, #15
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fad8 	bl	80030b0 <lcd1602_SetCursor>
		sprintf(lcd1602_tx_buffer, "%d", sekonds ) ;
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <lcd_print_sekonds+0x94>)
 8002b06:	4808      	ldr	r0, [pc, #32]	; (8002b28 <lcd_print_sekonds+0x98>)
 8002b08:	f004 fb3a 	bl	8007180 <siprintf>
		lcd1602_Print_text(lcd1602_tx_buffer) ;}
 8002b0c:	4806      	ldr	r0, [pc, #24]	; (8002b28 <lcd_print_sekonds+0x98>)
 8002b0e:	f000 fab2 	bl	8003076 <lcd1602_Print_text>
	}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000228 	.word	0x20000228
 8002b20:	20000229 	.word	0x20000229
 8002b24:	0800adb8 	.word	0x0800adb8
 8002b28:	2000022c 	.word	0x2000022c

08002b2c <lcd_print_date>:

void lcd_print_date (uint8_t day){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
	extern char lcd1602_tx_buffer[40] ;
	if (day < 10) {
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d820      	bhi.n	8002b7e <lcd_print_date+0x52>
		lcd1602_SetCursor(x+15, y) ;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <lcd_print_date+0x80>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	330f      	adds	r3, #15
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <lcd_print_date+0x84>)
 8002b46:	7812      	ldrb	r2, [r2, #0]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fab0 	bl	80030b0 <lcd1602_SetCursor>
		lcd1602_Print_symbol(6) ;
 8002b50:	2006      	movs	r0, #6
 8002b52:	f000 fa6b 	bl	800302c <lcd1602_Print_symbol>
		lcd1602_SetCursor(x+16, y) ;
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <lcd_print_date+0x80>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <lcd_print_date+0x84>)
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 faa3 	bl	80030b0 <lcd1602_SetCursor>
		sprintf(lcd1602_tx_buffer, "%d.", day ) ;
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4911      	ldr	r1, [pc, #68]	; (8002bb4 <lcd_print_date+0x88>)
 8002b70:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <lcd_print_date+0x8c>)
 8002b72:	f004 fb05 	bl	8007180 <siprintf>
		lcd1602_Print_text(lcd1602_tx_buffer) ;
 8002b76:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <lcd_print_date+0x8c>)
 8002b78:	f000 fa7d 	bl	8003076 <lcd1602_Print_text>
    } else {
    	lcd1602_SetCursor(x+15, y) ;
        sprintf(lcd1602_tx_buffer, "%d.", day ) ;
        lcd1602_Print_text(lcd1602_tx_buffer) ;
    	}
	}
 8002b7c:	e012      	b.n	8002ba4 <lcd_print_date+0x78>
    	lcd1602_SetCursor(x+15, y) ;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <lcd_print_date+0x80>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	330f      	adds	r3, #15
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <lcd_print_date+0x84>)
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fa8f 	bl	80030b0 <lcd1602_SetCursor>
        sprintf(lcd1602_tx_buffer, "%d.", day ) ;
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <lcd_print_date+0x88>)
 8002b98:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <lcd_print_date+0x8c>)
 8002b9a:	f004 faf1 	bl	8007180 <siprintf>
        lcd1602_Print_text(lcd1602_tx_buffer) ;
 8002b9e:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <lcd_print_date+0x8c>)
 8002ba0:	f000 fa69 	bl	8003076 <lcd1602_Print_text>
	}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000228 	.word	0x20000228
 8002bb0:	20000229 	.word	0x20000229
 8002bb4:	0800adbc 	.word	0x0800adbc
 8002bb8:	2000022c 	.word	0x2000022c

08002bbc <lcd_print_month>:

void lcd_print_month (uint8_t month){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
	extern char lcd1602_tx_buffer[40] ;
	if (month < 10) {
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d820      	bhi.n	8002c0e <lcd_print_month+0x52>
		lcd1602_SetCursor(x+18, y) ;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <lcd_print_month+0x80>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3312      	adds	r3, #18
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <lcd_print_month+0x84>)
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fa68 	bl	80030b0 <lcd1602_SetCursor>
		lcd1602_Print_symbol(6) ;
 8002be0:	2006      	movs	r0, #6
 8002be2:	f000 fa23 	bl	800302c <lcd1602_Print_symbol>
		lcd1602_SetCursor(x+18, y) ;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <lcd_print_month+0x80>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3312      	adds	r3, #18
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <lcd_print_month+0x84>)
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fa5b 	bl	80030b0 <lcd1602_SetCursor>
		sprintf(lcd1602_tx_buffer, "0%d", month ) ;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4911      	ldr	r1, [pc, #68]	; (8002c44 <lcd_print_month+0x88>)
 8002c00:	4811      	ldr	r0, [pc, #68]	; (8002c48 <lcd_print_month+0x8c>)
 8002c02:	f004 fabd 	bl	8007180 <siprintf>
		lcd1602_Print_text(lcd1602_tx_buffer) ;
 8002c06:	4810      	ldr	r0, [pc, #64]	; (8002c48 <lcd_print_month+0x8c>)
 8002c08:	f000 fa35 	bl	8003076 <lcd1602_Print_text>
    } else {
    	lcd1602_SetCursor(x+18, y) ;
        sprintf(lcd1602_tx_buffer, "%d", month ) ;
        lcd1602_Print_text(lcd1602_tx_buffer) ;
    	}
	}
 8002c0c:	e012      	b.n	8002c34 <lcd_print_month+0x78>
    	lcd1602_SetCursor(x+18, y) ;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <lcd_print_month+0x80>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	3312      	adds	r3, #18
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <lcd_print_month+0x84>)
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fa47 	bl	80030b0 <lcd1602_SetCursor>
        sprintf(lcd1602_tx_buffer, "%d", month ) ;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4909      	ldr	r1, [pc, #36]	; (8002c4c <lcd_print_month+0x90>)
 8002c28:	4807      	ldr	r0, [pc, #28]	; (8002c48 <lcd_print_month+0x8c>)
 8002c2a:	f004 faa9 	bl	8007180 <siprintf>
        lcd1602_Print_text(lcd1602_tx_buffer) ;
 8002c2e:	4806      	ldr	r0, [pc, #24]	; (8002c48 <lcd_print_month+0x8c>)
 8002c30:	f000 fa21 	bl	8003076 <lcd1602_Print_text>
	}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000228 	.word	0x20000228
 8002c40:	20000229 	.word	0x20000229
 8002c44:	0800adc0 	.word	0x0800adc0
 8002c48:	2000022c 	.word	0x2000022c
 8002c4c:	0800adb8 	.word	0x0800adb8

08002c50 <lcd_print_weekdey>:

void lcd_print_weekdey(uint8_t dow) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b092      	sub	sp, #72	; 0x48
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	extern char lcd1602_tx_buffer[40] ;
	char WDAY0[] = "HH";
 8002c5a:	4a3c      	ldr	r2, [pc, #240]	; (8002d4c <lcd_print_weekdey+0xfc>)
 8002c5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	4611      	mov	r1, r2
 8002c64:	8019      	strh	r1, [r3, #0]
 8002c66:	3302      	adds	r3, #2
 8002c68:	0c12      	lsrs	r2, r2, #16
 8002c6a:	701a      	strb	r2, [r3, #0]
	char WDAY1[] = "PH";
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <lcd_print_weekdey+0x100>)
 8002c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4611      	mov	r1, r2
 8002c76:	8019      	strh	r1, [r3, #0]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	0c12      	lsrs	r2, r2, #16
 8002c7c:	701a      	strb	r2, [r3, #0]
	char WDAY2[] = "BT";
 8002c7e:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <lcd_print_weekdey+0x104>)
 8002c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4611      	mov	r1, r2
 8002c88:	8019      	strh	r1, [r3, #0]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	0c12      	lsrs	r2, r2, #16
 8002c8e:	701a      	strb	r2, [r3, #0]
	char WDAY3[] = "CP";
 8002c90:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <lcd_print_weekdey+0x108>)
 8002c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	8019      	strh	r1, [r3, #0]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	0c12      	lsrs	r2, r2, #16
 8002ca0:	701a      	strb	r2, [r3, #0]
	char WDAY4[] = "4T";
 8002ca2:	4a2e      	ldr	r2, [pc, #184]	; (8002d5c <lcd_print_weekdey+0x10c>)
 8002ca4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	4611      	mov	r1, r2
 8002cac:	8019      	strh	r1, [r3, #0]
 8002cae:	3302      	adds	r3, #2
 8002cb0:	0c12      	lsrs	r2, r2, #16
 8002cb2:	701a      	strb	r2, [r3, #0]
	char WDAY5[] = "PT";
 8002cb4:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <lcd_print_weekdey+0x110>)
 8002cb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	8019      	strh	r1, [r3, #0]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	0c12      	lsrs	r2, r2, #16
 8002cc4:	701a      	strb	r2, [r3, #0]
	char WDAY6[] = "SB";
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <lcd_print_weekdey+0x114>)
 8002cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	8019      	strh	r1, [r3, #0]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	0c12      	lsrs	r2, r2, #16
 8002cd6:	701a      	strb	r2, [r3, #0]
	char WDAY7[] = "BC";
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <lcd_print_weekdey+0x118>)
 8002cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	8019      	strh	r1, [r3, #0]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	0c12      	lsrs	r2, r2, #16
 8002ce8:	701a      	strb	r2, [r3, #0]
	char * WDAY[8]={WDAY0, WDAY1, WDAY2, WDAY3, WDAY4, WDAY5, WDAY6, WDAY7} ;
 8002cea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24

	lcd1602_SetCursor(x+18, y+1) ;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <lcd_print_weekdey+0x11c>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	3312      	adds	r3, #18
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <lcd_print_weekdey+0x120>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f000 f9bf 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_text(WDAY[dow]) ;
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3348      	adds	r3, #72	; 0x48
 8002d38:	443b      	add	r3, r7
 8002d3a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f999 	bl	8003076 <lcd1602_Print_text>
//	lcd1602_Print_text(lcd1602_tx_buffer) ;
//
//	lcd1602_SetCursor(0, 3) ;
//	sprintf(lcd1602_tx_buffer, "%d", dow) ;
//	lcd1602_Print_text(lcd1602_tx_buffer) ;
}
 8002d44:	bf00      	nop
 8002d46:	3748      	adds	r7, #72	; 0x48
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	0800adc4 	.word	0x0800adc4
 8002d50:	0800adc8 	.word	0x0800adc8
 8002d54:	0800adcc 	.word	0x0800adcc
 8002d58:	0800add0 	.word	0x0800add0
 8002d5c:	0800add4 	.word	0x0800add4
 8002d60:	0800add8 	.word	0x0800add8
 8002d64:	0800addc 	.word	0x0800addc
 8002d68:	0800ade0 	.word	0x0800ade0
 8002d6c:	20000228 	.word	0x20000228
 8002d70:	20000229 	.word	0x20000229

08002d74 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <lcd1602_Send_init_Data+0x80>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e006      	b.n	8002da2 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f023 0308 	bic.w	r3, r3, #8
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8002db0:	230a      	movs	r3, #10
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2301      	movs	r3, #1
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	214e      	movs	r1, #78	; 0x4e
 8002dba:	480f      	ldr	r0, [pc, #60]	; (8002df8 <lcd1602_Send_init_Data+0x84>)
 8002dbc:	f001 fb02 	bl	80043c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8002dc0:	2005      	movs	r0, #5
 8002dc2:	f000 ff13 	bl	8003bec <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8002dd4:	230a      	movs	r3, #10
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	214e      	movs	r1, #78	; 0x4e
 8002dde:	4806      	ldr	r0, [pc, #24]	; (8002df8 <lcd1602_Send_init_Data+0x84>)
 8002de0:	f001 faf0 	bl	80043c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8002de4:	2005      	movs	r0, #5
 8002de6:	f000 ff01 	bl	8003bec <HAL_Delay>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000258 	.word	0x20000258

08002dfc <lcd1602_Write_byte>:
/*-------------Функция для отправки данных при инициализации дисплея-------------*/

/*--------------------Функция отправки байта информации на дисплей---------------*/
/// Функция отправки байта информации на дисплей
/// \param Data - Байт данныйх
static void lcd1602_Write_byte(uint8_t Data) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, &Data, 1, 10);
 8002e06:	1dfa      	adds	r2, r7, #7
 8002e08:	230a      	movs	r3, #10
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	214e      	movs	r1, #78	; 0x4e
 8002e10:	4803      	ldr	r0, [pc, #12]	; (8002e20 <lcd1602_Write_byte+0x24>)
 8002e12:	f001 fad7 	bl	80043c4 <HAL_I2C_Master_Transmit>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000258 	.word	0x20000258

08002e24 <lcd1602_Send_cmd>:
/*--------------------Функция отправки байта информации на дисплей---------------*/

/*----------------------Функция отправки пол байта информации--------------------*/
/// Функция отправки пол байта информации
/// \*param Data - байт данных
static void lcd1602_Send_cmd(uint8_t Data) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
	Data <<= 4;
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	71fb      	strb	r3, [r7, #7]
	lcd1602_Write_byte(global_buffer |= 0x04); // Устанавливаем стробирующий сигнал E в 1
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ffd8 	bl	8002dfc <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer | Data); // Отправляем в дисплей полученный и сдвинутый байт
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ffd0 	bl	8002dfc <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer &= ~0x04);	// Устанавливаем стробирующий сигнал E в 0.
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <lcd1602_Send_cmd+0x58>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ffc4 	bl	8002dfc <lcd1602_Write_byte>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000254 	.word	0x20000254

08002e80 <lcd1602_Send_data_symbol>:

/*----------------------Функция отправки байта данных----------------------------*/
/// Функция отправки байта данных на дисплей
/// \param Data - байт данных
/// \param mode - отправка команды. 1 - RW = 1(отправка данных). 0 - RW = 0(отправка команды).
static void lcd1602_Send_data_symbol(uint8_t Data, uint8_t mode) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	460a      	mov	r2, r1
 8002e8a:	71fb      	strb	r3, [r7, #7]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	71bb      	strb	r3, [r7, #6]
	if (mode == 0) {
 8002e90:	79bb      	ldrb	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <lcd1602_Send_data_symbol+0x30>
		lcd1602_Write_byte(global_buffer &= ~0x01); // RS = 0
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <lcd1602_Send_data_symbol+0x6c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <lcd1602_Send_data_symbol+0x6c>)
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <lcd1602_Send_data_symbol+0x6c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ffa7 	bl	8002dfc <lcd1602_Write_byte>
 8002eae:	e00b      	b.n	8002ec8 <lcd1602_Send_data_symbol+0x48>
	} else {
		lcd1602_Write_byte(global_buffer |= 0x01); // RS = 1
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <lcd1602_Send_data_symbol+0x6c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <lcd1602_Send_data_symbol+0x6c>)
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <lcd1602_Send_data_symbol+0x6c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ff9a 	bl	8002dfc <lcd1602_Write_byte>
	}
	uint8_t MSB_Data = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
	MSB_Data = Data >> 4; // Сдвигаем полученный байт на 4 позичии и записываем в переменную
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_cmd(MSB_Data);	// Отправляем первые 4 бита полученного байта
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ffa5 	bl	8002e24 <lcd1602_Send_cmd>
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ffa1 	bl	8002e24 <lcd1602_Send_cmd>
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000254 	.word	0x20000254

08002ef0 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <lcd1602_Send_data+0x74>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e006      	b.n	8002f1e <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f023 0308 	bic.w	r3, r3, #8
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2301      	movs	r3, #1
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	214e      	movs	r1, #78	; 0x4e
 8002f36:	480c      	ldr	r0, [pc, #48]	; (8002f68 <lcd1602_Send_data+0x78>)
 8002f38:	f001 fa44 	bl	80043c4 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8002f4a:	230a      	movs	r3, #10
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	214e      	movs	r1, #78	; 0x4e
 8002f54:	4804      	ldr	r0, [pc, #16]	; (8002f68 <lcd1602_Send_data+0x78>)
 8002f56:	f001 fa35 	bl	80043c4 <HAL_I2C_Master_Transmit>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000258 	.word	0x20000258

08002f6c <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8002f72:	2330      	movs	r3, #48	; 0x30
 8002f74:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8002f76:	200f      	movs	r0, #15
 8002f78:	f000 fe38 	bl	8003bec <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8002f7c:	1dfb      	adds	r3, r7, #7
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fef8 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8002f84:	2005      	movs	r0, #5
 8002f86:	f000 fe31 	bl	8003bec <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fef1 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f000 fe2a 	bl	8003bec <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff feea 	bl	8002d74 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fee4 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8002fac:	2320      	movs	r3, #32
 8002fae:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fede 	bl	8002d74 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fed8 	bl	8002d74 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fed2 	bl	8002d74 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fecc 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fec6 	bl	8002d74 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8002fe8:	2310      	movs	r3, #16
 8002fea:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002fec:	1dfb      	adds	r3, r7, #7
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fec0 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff feba 	bl	8002d74 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8003000:	2330      	movs	r3, #48	; 0x30
 8003002:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8003004:	1dfb      	adds	r3, r7, #7
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff feb4 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 800300c:	2300      	movs	r3, #0
 800300e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff feae 	bl	8002d74 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8003018:	23c0      	movs	r3, #192	; 0xc0
 800301a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fea8 	bl	8002d74 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	f023 030f 	bic.w	r3, r3, #15
 800303e:	b25b      	sxtb	r3, r3
 8003040:	f043 0309 	orr.w	r3, r3, #9
 8003044:	b25b      	sxtb	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 800304a:	f107 030f 	add.w	r3, r7, #15
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff4e 	bl	8002ef0 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	b25b      	sxtb	r3, r3
 800305a:	f043 0309 	orr.w	r3, r3, #9
 800305e:	b25b      	sxtb	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8003064:	f107 030f 	add.w	r3, r7, #15
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff41 	bl	8002ef0 <lcd1602_Send_data>
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e009      	b.n	8003098 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ffcd 	bl	800302c <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd f8a1 	bl	80001e0 <strlen>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d8ee      	bhi.n	8003084 <lcd1602_Print_text+0xe>
	}
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d901      	bls.n	80030ca <lcd1602_SetCursor+0x1a>
		y = 3;
 80030c6:	2303      	movs	r3, #3
 80030c8:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b27      	cmp	r3, #39	; 0x27
 80030ce:	d901      	bls.n	80030d4 <lcd1602_SetCursor+0x24>
		x = 39;
 80030d0:	2327      	movs	r3, #39	; 0x27
 80030d2:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <lcd1602_SetCursor+0x2e>
		adr = x;
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 80030de:	79bb      	ldrb	r3, [r7, #6]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	3340      	adds	r3, #64	; 0x40
 80030e8:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d102      	bne.n	80030f6 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	3314      	adds	r3, #20
 80030f4:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 80030f6:	79bb      	ldrb	r3, [r7, #6]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d102      	bne.n	8003102 <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	3354      	adds	r3, #84	; 0x54
 8003100:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800310a:	b25b      	sxtb	r3, r3
 800310c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003110:	b25b      	sxtb	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8003116:	f107 030e 	add.w	r3, r7, #14
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fee8 	bl	8002ef0 <lcd1602_Send_data>

	command = (adr << 4);
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	b2db      	uxtb	r3, r3
 8003126:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8003128:	f107 030e 	add.w	r3, r7, #14
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fedf 	bl	8002ef0 <lcd1602_Send_data>

}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <lcd1602_Backlight>:

/*---------------------Функция включения/выключения подсветки--------------------*/
/// Булевая функция включения/выключения подсветки
/// \param state - состояние подсветки.
/// 1 - вкл. 0 - выкл.
void lcd1602_Backlight(bool state) {
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <lcd1602_Backlight+0x18>
		backlight = true;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <lcd1602_Backlight+0x2c>)
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
	} else {
		backlight = false;
	}
}
 8003152:	e002      	b.n	800315a <lcd1602_Backlight+0x1e>
		backlight = false;
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <lcd1602_Backlight+0x2c>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <lcd1602_Create_symbol>:

/*---------------------Функция создания своего символа-------------------------- */
/// Функция создания своего собственного символа и запись его в память.
/// \param *my_Symbol - массив с символом
/// \param memory_adress - номер ячейки: от 1 до 8. Всего 8 ячеек.
void lcd1602_Create_symbol(uint8_t *my_Symbol, uint8_t memory_adress) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
	lcd1602_Send_data_symbol(((memory_adress * 8) | 0x40), 0);
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	b25b      	sxtb	r3, r3
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	b25b      	sxtb	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fe78 	bl	8002e80 <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	e00a      	b.n	80031ac <lcd1602_Create_symbol+0x40>
		lcd1602_Send_data_symbol(my_Symbol[i], 1); // Записываем данные побайтово в память
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fe6d 	bl	8002e80 <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b07      	cmp	r3, #7
 80031b0:	d9f1      	bls.n	8003196 <lcd1602_Create_symbol+0x2a>
	}
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <lcd1602_Clear>:
/*---------------------Функция создания своего символа-------------------------- */

/*-------------------------Функция очистки дисплея-------------------------------*/

void lcd1602_Clear(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
/// Аппаратная функция очистки дисплея.
/// Удаляет весь текст, возвращает курсор в начальное положение.
	uint8_t tx_buffer = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80031c6:	1dfb      	adds	r3, r7, #7
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fdd3 	bl	8002d74 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80031ce:	2310      	movs	r3, #16
 80031d0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fdcd 	bl	8002d74 <lcd1602_Send_init_Data>

}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float tf, pf, af = 0.0f ;
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031f0:	f000 fc8a 	bl	8003b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031f4:	f000 f998 	bl	8003528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031f8:	f000 fa74 	bl	80036e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80031fc:	f000 fa00 	bl	8003600 <MX_I2C1_Init>
  MX_RTC_Init();
 8003200:	f000 fa2c 	bl	800365c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	//1) Set time
	sTime.Hours = BUILD_HOUR;
 8003204:	2332      	movs	r3, #50	; 0x32
 8003206:	2b3f      	cmp	r3, #63	; 0x3f
 8003208:	d00d      	beq.n	8003226 <main+0x42>
 800320a:	2332      	movs	r3, #50	; 0x32
 800320c:	3b30      	subs	r3, #48	; 0x30
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2232      	movs	r2, #50	; 0x32
 800321c:	4413      	add	r3, r2
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3b30      	subs	r3, #48	; 0x30
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e000      	b.n	8003228 <main+0x44>
 8003226:	2363      	movs	r3, #99	; 0x63
 8003228:	4ab5      	ldr	r2, [pc, #724]	; (8003500 <main+0x31c>)
 800322a:	7013      	strb	r3, [r2, #0]
	sTime.Minutes = BUILD_MIN;
 800322c:	2332      	movs	r3, #50	; 0x32
 800322e:	2b3f      	cmp	r3, #63	; 0x3f
 8003230:	d00d      	beq.n	800324e <main+0x6a>
 8003232:	2332      	movs	r3, #50	; 0x32
 8003234:	3b30      	subs	r3, #48	; 0x30
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4413      	add	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2234      	movs	r2, #52	; 0x34
 8003244:	4413      	add	r3, r2
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3b30      	subs	r3, #48	; 0x30
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e000      	b.n	8003250 <main+0x6c>
 800324e:	2363      	movs	r3, #99	; 0x63
 8003250:	4aab      	ldr	r2, [pc, #684]	; (8003500 <main+0x31c>)
 8003252:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = BUILD_SEC;
 8003254:	2332      	movs	r3, #50	; 0x32
 8003256:	2b3f      	cmp	r3, #63	; 0x3f
 8003258:	d00d      	beq.n	8003276 <main+0x92>
 800325a:	2331      	movs	r3, #49	; 0x31
 800325c:	3b30      	subs	r3, #48	; 0x30
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	4413      	add	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2230      	movs	r2, #48	; 0x30
 800326c:	4413      	add	r3, r2
 800326e:	b2db      	uxtb	r3, r3
 8003270:	3b30      	subs	r3, #48	; 0x30
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e000      	b.n	8003278 <main+0x94>
 8003276:	2363      	movs	r3, #99	; 0x63
 8003278:	4aa1      	ldr	r2, [pc, #644]	; (8003500 <main+0x31c>)
 800327a:	7093      	strb	r3, [r2, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800327c:	2200      	movs	r2, #0
 800327e:	49a0      	ldr	r1, [pc, #640]	; (8003500 <main+0x31c>)
 8003280:	48a0      	ldr	r0, [pc, #640]	; (8003504 <main+0x320>)
 8003282:	f002 fe43 	bl	8005f0c <HAL_RTC_SetTime>
	//2) Set date
	sDate.Date = BUILD_DAY;
 8003286:	234a      	movs	r3, #74	; 0x4a
 8003288:	2b3f      	cmp	r3, #63	; 0x3f
 800328a:	d012      	beq.n	80032b2 <main+0xce>
 800328c:	2320      	movs	r3, #32
 800328e:	2b2f      	cmp	r3, #47	; 0x2f
 8003290:	d908      	bls.n	80032a4 <main+0xc0>
 8003292:	2320      	movs	r3, #32
 8003294:	3b30      	subs	r3, #48	; 0x30
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4413      	add	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e000      	b.n	80032a6 <main+0xc2>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2237      	movs	r2, #55	; 0x37
 80032a8:	4413      	add	r3, r2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3b30      	subs	r3, #48	; 0x30
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e000      	b.n	80032b4 <main+0xd0>
 80032b2:	2363      	movs	r3, #99	; 0x63
 80032b4:	4a94      	ldr	r2, [pc, #592]	; (8003508 <main+0x324>)
 80032b6:	7093      	strb	r3, [r2, #2]
	sDate.Month = BUILD_MONTH;
 80032b8:	234a      	movs	r3, #74	; 0x4a
 80032ba:	2b3f      	cmp	r3, #63	; 0x3f
 80032bc:	d061      	beq.n	8003382 <main+0x19e>
 80032be:	234a      	movs	r3, #74	; 0x4a
 80032c0:	2b4a      	cmp	r3, #74	; 0x4a
 80032c2:	d105      	bne.n	80032d0 <main+0xec>
 80032c4:	2375      	movs	r3, #117	; 0x75
 80032c6:	2b61      	cmp	r3, #97	; 0x61
 80032c8:	d102      	bne.n	80032d0 <main+0xec>
 80032ca:	236c      	movs	r3, #108	; 0x6c
 80032cc:	2b6e      	cmp	r3, #110	; 0x6e
 80032ce:	d056      	beq.n	800337e <main+0x19a>
 80032d0:	234a      	movs	r3, #74	; 0x4a
 80032d2:	2b46      	cmp	r3, #70	; 0x46
 80032d4:	d051      	beq.n	800337a <main+0x196>
 80032d6:	234a      	movs	r3, #74	; 0x4a
 80032d8:	2b4d      	cmp	r3, #77	; 0x4d
 80032da:	d105      	bne.n	80032e8 <main+0x104>
 80032dc:	2375      	movs	r3, #117	; 0x75
 80032de:	2b61      	cmp	r3, #97	; 0x61
 80032e0:	d102      	bne.n	80032e8 <main+0x104>
 80032e2:	236c      	movs	r3, #108	; 0x6c
 80032e4:	2b72      	cmp	r3, #114	; 0x72
 80032e6:	d046      	beq.n	8003376 <main+0x192>
 80032e8:	234a      	movs	r3, #74	; 0x4a
 80032ea:	2b41      	cmp	r3, #65	; 0x41
 80032ec:	d102      	bne.n	80032f4 <main+0x110>
 80032ee:	2375      	movs	r3, #117	; 0x75
 80032f0:	2b70      	cmp	r3, #112	; 0x70
 80032f2:	d03e      	beq.n	8003372 <main+0x18e>
 80032f4:	234a      	movs	r3, #74	; 0x4a
 80032f6:	2b4d      	cmp	r3, #77	; 0x4d
 80032f8:	d105      	bne.n	8003306 <main+0x122>
 80032fa:	2375      	movs	r3, #117	; 0x75
 80032fc:	2b61      	cmp	r3, #97	; 0x61
 80032fe:	d102      	bne.n	8003306 <main+0x122>
 8003300:	236c      	movs	r3, #108	; 0x6c
 8003302:	2b79      	cmp	r3, #121	; 0x79
 8003304:	d033      	beq.n	800336e <main+0x18a>
 8003306:	234a      	movs	r3, #74	; 0x4a
 8003308:	2b4a      	cmp	r3, #74	; 0x4a
 800330a:	d105      	bne.n	8003318 <main+0x134>
 800330c:	2375      	movs	r3, #117	; 0x75
 800330e:	2b75      	cmp	r3, #117	; 0x75
 8003310:	d102      	bne.n	8003318 <main+0x134>
 8003312:	236c      	movs	r3, #108	; 0x6c
 8003314:	2b6e      	cmp	r3, #110	; 0x6e
 8003316:	d028      	beq.n	800336a <main+0x186>
 8003318:	234a      	movs	r3, #74	; 0x4a
 800331a:	2b4a      	cmp	r3, #74	; 0x4a
 800331c:	d105      	bne.n	800332a <main+0x146>
 800331e:	2375      	movs	r3, #117	; 0x75
 8003320:	2b75      	cmp	r3, #117	; 0x75
 8003322:	d102      	bne.n	800332a <main+0x146>
 8003324:	236c      	movs	r3, #108	; 0x6c
 8003326:	2b6c      	cmp	r3, #108	; 0x6c
 8003328:	d01d      	beq.n	8003366 <main+0x182>
 800332a:	234a      	movs	r3, #74	; 0x4a
 800332c:	2b41      	cmp	r3, #65	; 0x41
 800332e:	d102      	bne.n	8003336 <main+0x152>
 8003330:	2375      	movs	r3, #117	; 0x75
 8003332:	2b75      	cmp	r3, #117	; 0x75
 8003334:	d015      	beq.n	8003362 <main+0x17e>
 8003336:	234a      	movs	r3, #74	; 0x4a
 8003338:	2b53      	cmp	r3, #83	; 0x53
 800333a:	d010      	beq.n	800335e <main+0x17a>
 800333c:	234a      	movs	r3, #74	; 0x4a
 800333e:	2b4f      	cmp	r3, #79	; 0x4f
 8003340:	d00b      	beq.n	800335a <main+0x176>
 8003342:	234a      	movs	r3, #74	; 0x4a
 8003344:	2b4e      	cmp	r3, #78	; 0x4e
 8003346:	d006      	beq.n	8003356 <main+0x172>
 8003348:	234a      	movs	r3, #74	; 0x4a
 800334a:	2b44      	cmp	r3, #68	; 0x44
 800334c:	d101      	bne.n	8003352 <main+0x16e>
 800334e:	230c      	movs	r3, #12
 8003350:	e018      	b.n	8003384 <main+0x1a0>
 8003352:	2363      	movs	r3, #99	; 0x63
 8003354:	e016      	b.n	8003384 <main+0x1a0>
 8003356:	230b      	movs	r3, #11
 8003358:	e014      	b.n	8003384 <main+0x1a0>
 800335a:	230a      	movs	r3, #10
 800335c:	e012      	b.n	8003384 <main+0x1a0>
 800335e:	2309      	movs	r3, #9
 8003360:	e010      	b.n	8003384 <main+0x1a0>
 8003362:	2308      	movs	r3, #8
 8003364:	e00e      	b.n	8003384 <main+0x1a0>
 8003366:	2307      	movs	r3, #7
 8003368:	e00c      	b.n	8003384 <main+0x1a0>
 800336a:	2306      	movs	r3, #6
 800336c:	e00a      	b.n	8003384 <main+0x1a0>
 800336e:	2305      	movs	r3, #5
 8003370:	e008      	b.n	8003384 <main+0x1a0>
 8003372:	2304      	movs	r3, #4
 8003374:	e006      	b.n	8003384 <main+0x1a0>
 8003376:	2303      	movs	r3, #3
 8003378:	e004      	b.n	8003384 <main+0x1a0>
 800337a:	2302      	movs	r3, #2
 800337c:	e002      	b.n	8003384 <main+0x1a0>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <main+0x1a0>
 8003382:	2363      	movs	r3, #99	; 0x63
 8003384:	4a60      	ldr	r2, [pc, #384]	; (8003508 <main+0x324>)
 8003386:	7053      	strb	r3, [r2, #1]
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8003388:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <main+0x324>)
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
	sDate.Year = BUILD_YEAR_NEW;
 800338e:	234a      	movs	r3, #74	; 0x4a
 8003390:	2b3f      	cmp	r3, #63	; 0x3f
 8003392:	d00d      	beq.n	80033b0 <main+0x1cc>
 8003394:	2332      	movs	r3, #50	; 0x32
 8003396:	3b30      	subs	r3, #48	; 0x30
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	0092      	lsls	r2, r2, #2
 800339e:	4413      	add	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2232      	movs	r2, #50	; 0x32
 80033a6:	4413      	add	r3, r2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3b30      	subs	r3, #48	; 0x30
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e000      	b.n	80033b2 <main+0x1ce>
 80033b0:	2363      	movs	r3, #99	; 0x63
 80033b2:	4a55      	ldr	r2, [pc, #340]	; (8003508 <main+0x324>)
 80033b4:	70d3      	strb	r3, [r2, #3]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80033b6:	2200      	movs	r2, #0
 80033b8:	4953      	ldr	r1, [pc, #332]	; (8003508 <main+0x324>)
 80033ba:	4852      	ldr	r0, [pc, #328]	; (8003504 <main+0x320>)
 80033bc:	f002 fe9e 	bl	80060fc <HAL_RTC_SetDate>
	HAL_Delay(100) ;
 80033c0:	2064      	movs	r0, #100	; 0x64
 80033c2:	f000 fc13 	bl	8003bec <HAL_Delay>
	lcd1602_Init();
 80033c6:	f7ff fdd1 	bl	8002f6c <lcd1602_Init>
	BME280_Init() ;
 80033ca:	f7fe fce7 	bl	8001d9c <BME280_Init>
	lcd_symbol_creat() ;
 80033ce:	f7fe fd09 	bl	8001de4 <lcd_symbol_creat>

	lcd1602_Backlight(1) ;
 80033d2:	2001      	movs	r0, #1
 80033d4:	f7ff feb2 	bl	800313c <lcd1602_Backlight>
	lcd1602_SetCursor(0, 0) ;
 80033d8:	2100      	movs	r1, #0
 80033da:	2000      	movs	r0, #0
 80033dc:	f7ff fe68 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_text("Hello World!") ;
 80033e0:	484a      	ldr	r0, [pc, #296]	; (800350c <main+0x328>)
 80033e2:	f7ff fe48 	bl	8003076 <lcd1602_Print_text>
	lcd1602_SetCursor(0, 1) ;
 80033e6:	2101      	movs	r1, #1
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7ff fe61 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_text("F401CC_RTC_BME280") ;
 80033ee:	4848      	ldr	r0, [pc, #288]	; (8003510 <main+0x32c>)
 80033f0:	f7ff fe41 	bl	8003076 <lcd1602_Print_text>

	HAL_Delay(500) ;
 80033f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033f8:	f000 fbf8 	bl	8003bec <HAL_Delay>
	lcd1602_Clear() ;
 80033fc:	f7ff fede 	bl	80031bc <lcd1602_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8003400:	2200      	movs	r2, #0
 8003402:	493f      	ldr	r1, [pc, #252]	; (8003500 <main+0x31c>)
 8003404:	483f      	ldr	r0, [pc, #252]	; (8003504 <main+0x320>)
 8003406:	f002 fe1b 	bl	8006040 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 800340a:	2200      	movs	r2, #0
 800340c:	493e      	ldr	r1, [pc, #248]	; (8003508 <main+0x324>)
 800340e:	483d      	ldr	r0, [pc, #244]	; (8003504 <main+0x320>)
 8003410:	f002 fef8 	bl	8006204 <HAL_RTC_GetDate>
	tf = BME280_ReadTemperature() ;
 8003414:	f7fe f8d4 	bl	80015c0 <BME280_ReadTemperature>
 8003418:	ed87 0a04 	vstr	s0, [r7, #16]
	pf = BME280_ReadPressure() ;
 800341c:	f7fe f928 	bl	8001670 <BME280_ReadPressure>
 8003420:	ed87 0a03 	vstr	s0, [r7, #12]
	hf = BME280_ReadHumidity() ;
 8003424:	f7fe fc38 	bl	8001c98 <BME280_ReadHumidity>
 8003428:	eef0 7a40 	vmov.f32	s15, s0
 800342c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003430:	ee17 3a90 	vmov	r3, s15
 8003434:	817b      	strh	r3, [r7, #10]
	uint8_t uHours    = sTime.Hours ;
 8003436:	4b32      	ldr	r3, [pc, #200]	; (8003500 <main+0x31c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	727b      	strb	r3, [r7, #9]
	uint8_t uMinutes  = sTime.Minutes ;
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <main+0x31c>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	723b      	strb	r3, [r7, #8]
	uint8_t uSekonds  = sTime.Seconds ;
 8003442:	4b2f      	ldr	r3, [pc, #188]	; (8003500 <main+0x31c>)
 8003444:	789b      	ldrb	r3, [r3, #2]
 8003446:	71fb      	strb	r3, [r7, #7]
	uint8_t uDow      = sDate.WeekDay ;
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <main+0x324>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	71bb      	strb	r3, [r7, #6]
	uint8_t uMonth    = sDate.Month ;
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <main+0x324>)
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	717b      	strb	r3, [r7, #5]
	uint8_t uDay      = sDate.Date ;
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <main+0x324>)
 8003456:	789b      	ldrb	r3, [r3, #2]
 8003458:	713b      	strb	r3, [r7, #4]
//	test_lcd() ;
	lcd_print_s(0, 0) ;
 800345a:	2100      	movs	r1, #0
 800345c:	2000      	movs	r0, #0
 800345e:	f7ff fae3 	bl	8002a28 <lcd_print_s>
	lcd_print_hours(uHours) ;
 8003462:	7a7b      	ldrb	r3, [r7, #9]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff f861 	bl	800252c <lcd_print_hours>
	lcd_print_minutes(uMinutes) ;
 800346a:	7a3b      	ldrb	r3, [r7, #8]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f98d 	bl	800278c <lcd_print_minutes>
	lcd_print_sekonds(uSekonds) ;
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fb0b 	bl	8002a90 <lcd_print_sekonds>
	lcd_print_date(uDay) ;
 800347a:	793b      	ldrb	r3, [r7, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fb55 	bl	8002b2c <lcd_print_date>
	lcd_print_month(uMonth) ;
 8003482:	797b      	ldrb	r3, [r7, #5]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fb99 	bl	8002bbc <lcd_print_month>
	lcd_print_weekdey(uDow) ;
 800348a:	79bb      	ldrb	r3, [r7, #6]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fbdf 	bl	8002c50 <lcd_print_weekdey>
	sprintf(str, "%.1f C", tf) ;
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f7fd f860 	bl	8000558 <__aeabi_f2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	491d      	ldr	r1, [pc, #116]	; (8003514 <main+0x330>)
 800349e:	481e      	ldr	r0, [pc, #120]	; (8003518 <main+0x334>)
 80034a0:	f003 fe6e 	bl	8007180 <siprintf>
	lcd1602_SetCursor(0, 2) ;
 80034a4:	2102      	movs	r1, #2
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7ff fe02 	bl	80030b0 <lcd1602_SetCursor>
	lcd1602_Print_text(str) ;
 80034ac:	481a      	ldr	r0, [pc, #104]	; (8003518 <main+0x334>)
 80034ae:	f7ff fde2 	bl	8003076 <lcd1602_Print_text>
	aux = pf * 0.000750061683f ;
 80034b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800351c <main+0x338>
 80034ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c2:	ee17 3a90 	vmov	r3, s15
 80034c6:	807b      	strh	r3, [r7, #2]
    sprintf(str, "%d mm", aux) ;
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4914      	ldr	r1, [pc, #80]	; (8003520 <main+0x33c>)
 80034ce:	4812      	ldr	r0, [pc, #72]	; (8003518 <main+0x334>)
 80034d0:	f003 fe56 	bl	8007180 <siprintf>
    lcd1602_SetCursor(0, 3) ;
 80034d4:	2103      	movs	r1, #3
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7ff fdea 	bl	80030b0 <lcd1602_SetCursor>
    lcd1602_Print_text(str) ;
 80034dc:	480e      	ldr	r0, [pc, #56]	; (8003518 <main+0x334>)
 80034de:	f7ff fdca 	bl	8003076 <lcd1602_Print_text>
    sprintf(str, "%d%%", hf) ;
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	461a      	mov	r2, r3
 80034e6:	490f      	ldr	r1, [pc, #60]	; (8003524 <main+0x340>)
 80034e8:	480b      	ldr	r0, [pc, #44]	; (8003518 <main+0x334>)
 80034ea:	f003 fe49 	bl	8007180 <siprintf>
    lcd1602_SetCursor(7, 2) ;
 80034ee:	2102      	movs	r1, #2
 80034f0:	2007      	movs	r0, #7
 80034f2:	f7ff fddd 	bl	80030b0 <lcd1602_SetCursor>
    lcd1602_Print_text(str) ;
 80034f6:	4808      	ldr	r0, [pc, #32]	; (8003518 <main+0x334>)
 80034f8:	f7ff fdbd 	bl	8003076 <lcd1602_Print_text>
  {
 80034fc:	e780      	b.n	8003400 <main+0x21c>
 80034fe:	bf00      	nop
 8003500:	20000330 	.word	0x20000330
 8003504:	200002ac 	.word	0x200002ac
 8003508:	20000344 	.word	0x20000344
 800350c:	0800ade4 	.word	0x0800ade4
 8003510:	0800adf4 	.word	0x0800adf4
 8003514:	0800ae08 	.word	0x0800ae08
 8003518:	200002cc 	.word	0x200002cc
 800351c:	3a449fca 	.word	0x3a449fca
 8003520:	0800ae10 	.word	0x0800ae10
 8003524:	0800ae18 	.word	0x0800ae18

08003528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b094      	sub	sp, #80	; 0x50
 800352c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800352e:	f107 0320 	add.w	r3, r7, #32
 8003532:	2230      	movs	r2, #48	; 0x30
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f002 ff9a 	bl	8006470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <SystemClock_Config+0xd0>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <SystemClock_Config+0xd0>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <SystemClock_Config+0xd0>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <SystemClock_Config+0xd4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <SystemClock_Config+0xd4>)
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <SystemClock_Config+0xd4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003588:	2305      	movs	r3, #5
 800358a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800358c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003592:	2301      	movs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003596:	2302      	movs	r3, #2
 8003598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800359a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80035a0:	2319      	movs	r3, #25
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035a4:	23a8      	movs	r3, #168	; 0xa8
 80035a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035a8:	2302      	movs	r3, #2
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035ac:	2304      	movs	r3, #4
 80035ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035b0:	f107 0320 	add.w	r3, r7, #32
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 ff01 	bl	80053bc <HAL_RCC_OscConfig>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80035c0:	f000 f8d4 	bl	800376c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c4:	230f      	movs	r3, #15
 80035c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c8:	2302      	movs	r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 f963 	bl	80058ac <HAL_RCC_ClockConfig>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80035ec:	f000 f8be 	bl	800376c <Error_Handler>
  }
}
 80035f0:	bf00      	nop
 80035f2:	3750      	adds	r7, #80	; 0x50
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40007000 	.word	0x40007000

08003600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <MX_I2C1_Init+0x50>)
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <MX_I2C1_Init+0x54>)
 8003608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <MX_I2C1_Init+0x50>)
 800360c:	4a12      	ldr	r2, [pc, #72]	; (8003658 <MX_I2C1_Init+0x58>)
 800360e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <MX_I2C1_Init+0x50>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <MX_I2C1_Init+0x50>)
 8003618:	2200      	movs	r2, #0
 800361a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <MX_I2C1_Init+0x50>)
 800361e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <MX_I2C1_Init+0x50>)
 8003626:	2200      	movs	r2, #0
 8003628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <MX_I2C1_Init+0x50>)
 800362c:	2200      	movs	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <MX_I2C1_Init+0x50>)
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <MX_I2C1_Init+0x50>)
 8003638:	2200      	movs	r2, #0
 800363a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800363c:	4804      	ldr	r0, [pc, #16]	; (8003650 <MX_I2C1_Init+0x50>)
 800363e:	f000 fd7d 	bl	800413c <HAL_I2C_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003648:	f000 f890 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000258 	.word	0x20000258
 8003654:	40005400 	.word	0x40005400
 8003658:	00061a80 	.word	0x00061a80

0800365c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <MX_RTC_Init+0x78>)
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <MX_RTC_Init+0x7c>)
 8003664:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <MX_RTC_Init+0x78>)
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <MX_RTC_Init+0x78>)
 800366e:	227f      	movs	r2, #127	; 0x7f
 8003670:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003672:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <MX_RTC_Init+0x78>)
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <MX_RTC_Init+0x78>)
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <MX_RTC_Init+0x78>)
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <MX_RTC_Init+0x78>)
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800368a:	4812      	ldr	r0, [pc, #72]	; (80036d4 <MX_RTC_Init+0x78>)
 800368c:	f002 fbc8 	bl	8005e20 <HAL_RTC_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003696:	f000 f869 	bl	800376c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <MX_RTC_Init+0x80>)
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80036a0:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <MX_RTC_Init+0x80>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <MX_RTC_Init+0x80>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <MX_RTC_Init+0x80>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <MX_RTC_Init+0x80>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <MX_RTC_Init+0x84>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <MX_RTC_Init+0x84>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <MX_RTC_Init+0x84>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <MX_RTC_Init+0x84>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	70da      	strb	r2, [r3, #3]
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	200002ac 	.word	0x200002ac
 80036d8:	40002800 	.word	0x40002800
 80036dc:	20000330 	.word	0x20000330
 80036e0:	20000344 	.word	0x20000344

080036e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <MX_GPIO_Init+0x84>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <MX_GPIO_Init+0x84>)
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <MX_GPIO_Init+0x84>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	4b17      	ldr	r3, [pc, #92]	; (8003768 <MX_GPIO_Init+0x84>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <MX_GPIO_Init+0x84>)
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <MX_GPIO_Init+0x84>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <MX_GPIO_Init+0x84>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <MX_GPIO_Init+0x84>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <MX_GPIO_Init+0x84>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MX_GPIO_Init+0x84>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <MX_GPIO_Init+0x84>)
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_GPIO_Init+0x84>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	683b      	ldr	r3, [r7, #0]

}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800

0800376c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003770:	b672      	cpsid	i
}
 8003772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003774:	e7fe      	b.n	8003774 <Error_Handler+0x8>
	...

08003778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_MspInit+0x4c>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_MspInit+0x4c>)
 8003788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378c:	6453      	str	r3, [r2, #68]	; 0x44
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_MspInit+0x4c>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_MspInit+0x4c>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <HAL_MspInit+0x4c>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_MspInit+0x4c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_I2C_MspInit+0x84>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d12b      	bne.n	8003842 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_I2C_MspInit+0x88>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_I2C_MspInit+0x88>)
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_I2C_MspInit+0x88>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003806:	23c0      	movs	r3, #192	; 0xc0
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800380a:	2312      	movs	r3, #18
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003812:	2303      	movs	r3, #3
 8003814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003816:	2304      	movs	r3, #4
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4619      	mov	r1, r3
 8003820:	480c      	ldr	r0, [pc, #48]	; (8003854 <HAL_I2C_MspInit+0x8c>)
 8003822:	f000 faed 	bl	8003e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_I2C_MspInit+0x88>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a08      	ldr	r2, [pc, #32]	; (8003850 <HAL_I2C_MspInit+0x88>)
 8003830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_I2C_MspInit+0x88>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003842:	bf00      	nop
 8003844:	3728      	adds	r7, #40	; 0x28
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40005400 	.word	0x40005400
 8003850:	40023800 	.word	0x40023800
 8003854:	40020400 	.word	0x40020400

08003858 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <HAL_RTC_MspInit+0x50>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800387a:	2302      	movs	r3, #2
 800387c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800387e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003882:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	4618      	mov	r0, r3
 800388a:	f002 f9db 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003894:	f7ff ff6a 	bl	800376c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_RTC_MspInit+0x54>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800389e:	bf00      	nop
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40002800 	.word	0x40002800
 80038ac:	42470e3c 	.word	0x42470e3c

080038b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b4:	e7fe      	b.n	80038b4 <NMI_Handler+0x4>

080038b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ba:	e7fe      	b.n	80038ba <HardFault_Handler+0x4>

080038bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <MemManage_Handler+0x4>

080038c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c6:	e7fe      	b.n	80038c6 <BusFault_Handler+0x4>

080038c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <UsageFault_Handler+0x4>

080038ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038fc:	f000 f956 	bl	8003bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}

08003904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
	return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_kill>:

int _kill(int pid, int sig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800391e:	f002 fd7d 	bl	800641c <__errno>
 8003922:	4603      	mov	r3, r0
 8003924:	2216      	movs	r2, #22
 8003926:	601a      	str	r2, [r3, #0]
	return -1;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_exit>:

void _exit (int status)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800393c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe7 	bl	8003914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003946:	e7fe      	b.n	8003946 <_exit+0x12>

08003948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e00a      	b.n	8003970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800395a:	f3af 8000 	nop.w
 800395e:	4601      	mov	r1, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	b2ca      	uxtb	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dbf0      	blt.n	800395a <_read+0x12>
	}

return len;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e009      	b.n	80039a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	60ba      	str	r2, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dbf1      	blt.n	8003994 <_write+0x12>
	}
	return len;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_close>:

int _close(int file)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
	return -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039e2:	605a      	str	r2, [r3, #4]
	return 0;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_isatty>:

int _isatty(int file)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
	return 1;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
	return 0;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <_sbrk+0x5c>)
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <_sbrk+0x60>)
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <_sbrk+0x64>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <_sbrk+0x64>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <_sbrk+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d207      	bcs.n	8003a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a54:	f002 fce2 	bl	800641c <__errno>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a62:	e009      	b.n	8003a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <_sbrk+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <_sbrk+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <_sbrk+0x64>)
 8003a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20010000 	.word	0x20010000
 8003a84:	00000400 	.word	0x00000400
 8003a88:	20000348 	.word	0x20000348
 8003a8c:	20000360 	.word	0x20000360

08003a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <SystemInit+0x20>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <SystemInit+0x20>)
 8003a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab8:	480d      	ldr	r0, [pc, #52]	; (8003af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aba:	490e      	ldr	r1, [pc, #56]	; (8003af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003abc:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac0:	e002      	b.n	8003ac8 <LoopCopyDataInit>

08003ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac6:	3304      	adds	r3, #4

08003ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003acc:	d3f9      	bcc.n	8003ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ace:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ad0:	4c0b      	ldr	r4, [pc, #44]	; (8003b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad4:	e001      	b.n	8003ada <LoopFillZerobss>

08003ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad8:	3204      	adds	r2, #4

08003ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003adc:	d3fb      	bcc.n	8003ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ade:	f7ff ffd7 	bl	8003a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ae2:	f002 fca1 	bl	8006428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ae6:	f7ff fb7d 	bl	80031e4 <main>
  bx  lr    
 8003aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003af8:	0800b2ec 	.word	0x0800b2ec
  ldr r2, =_sbss
 8003afc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003b00:	20000360 	.word	0x20000360

08003b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b04:	e7fe      	b.n	8003b04 <ADC_IRQHandler>
	...

08003b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_Init+0x40>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <HAL_Init+0x40>)
 8003b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_Init+0x40>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b30:	2003      	movs	r0, #3
 8003b32:	f000 f931 	bl	8003d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b36:	200f      	movs	r0, #15
 8003b38:	f000 f808 	bl	8003b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b3c:	f7ff fe1c 	bl	8003778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00

08003b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_InitTick+0x54>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_InitTick+0x58>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f93b 	bl	8003de6 <HAL_SYSTICK_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00e      	b.n	8003b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	d80a      	bhi.n	8003b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b88:	f000 f911 	bl	8003dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b8c:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <HAL_InitTick+0x5c>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000004 	.word	0x20000004
 8003ba4:	2000000c 	.word	0x2000000c
 8003ba8:	20000008 	.word	0x20000008

08003bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_IncTick+0x20>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	2000034c 	.word	0x2000034c

08003bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_GetTick+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000034c 	.word	0x2000034c

08003bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7ff ffee 	bl	8003bd4 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c04:	d005      	beq.n	8003c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_Delay+0x44>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c12:	bf00      	nop
 8003c14:	f7ff ffde 	bl	8003bd4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d8f7      	bhi.n	8003c14 <HAL_Delay+0x28>
  {
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000000c 	.word	0x2000000c

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	db0a      	blt.n	8003cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <__NVIC_SetPriority+0x4c>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	440b      	add	r3, r1
 8003cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc0:	e00a      	b.n	8003cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4908      	ldr	r1, [pc, #32]	; (8003ce8 <__NVIC_SetPriority+0x50>)
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	0112      	lsls	r2, r2, #4
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	761a      	strb	r2, [r3, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000e100 	.word	0xe000e100
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f1c3 0307 	rsb	r3, r3, #7
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	bf28      	it	cs
 8003d0a:	2304      	movcs	r3, #4
 8003d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3304      	adds	r3, #4
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d902      	bls.n	8003d1c <NVIC_EncodePriority+0x30>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3b03      	subs	r3, #3
 8003d1a:	e000      	b.n	8003d1e <NVIC_EncodePriority+0x32>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	401a      	ands	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	43d9      	mvns	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	4313      	orrs	r3, r2
         );
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3724      	adds	r7, #36	; 0x24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d64:	d301      	bcc.n	8003d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d66:	2301      	movs	r3, #1
 8003d68:	e00f      	b.n	8003d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <SysTick_Config+0x40>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d72:	210f      	movs	r1, #15
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d78:	f7ff ff8e 	bl	8003c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <SysTick_Config+0x40>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <SysTick_Config+0x40>)
 8003d84:	2207      	movs	r2, #7
 8003d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	e000e010 	.word	0xe000e010

08003d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff47 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc0:	f7ff ff5c 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	6978      	ldr	r0, [r7, #20]
 8003dcc:	f7ff ff8e 	bl	8003cec <NVIC_EncodePriority>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff5d 	bl	8003c98 <__NVIC_SetPriority>
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffb0 	bl	8003d54 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e159      	b.n	80040d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f040 8148 	bne.w	80040ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d005      	beq.n	8003e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d130      	bne.n	8003eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0201 	and.w	r2, r3, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d017      	beq.n	8003ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d123      	bne.n	8003f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	08da      	lsrs	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3208      	adds	r2, #8
 8003f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	08da      	lsrs	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3208      	adds	r2, #8
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a2 	beq.w	80040ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <HAL_GPIO_Init+0x2e8>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a56      	ldr	r2, [pc, #344]	; (80040e8 <HAL_GPIO_Init+0x2e8>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b54      	ldr	r3, [pc, #336]	; (80040e8 <HAL_GPIO_Init+0x2e8>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa2:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_GPIO_Init+0x2ec>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a49      	ldr	r2, [pc, #292]	; (80040f0 <HAL_GPIO_Init+0x2f0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d019      	beq.n	8004002 <HAL_GPIO_Init+0x202>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a48      	ldr	r2, [pc, #288]	; (80040f4 <HAL_GPIO_Init+0x2f4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_GPIO_Init+0x1fe>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a47      	ldr	r2, [pc, #284]	; (80040f8 <HAL_GPIO_Init+0x2f8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00d      	beq.n	8003ffa <HAL_GPIO_Init+0x1fa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a46      	ldr	r2, [pc, #280]	; (80040fc <HAL_GPIO_Init+0x2fc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <HAL_GPIO_Init+0x1f6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a45      	ldr	r2, [pc, #276]	; (8004100 <HAL_GPIO_Init+0x300>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_GPIO_Init+0x1f2>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	e008      	b.n	8004004 <HAL_GPIO_Init+0x204>
 8003ff2:	2307      	movs	r3, #7
 8003ff4:	e006      	b.n	8004004 <HAL_GPIO_Init+0x204>
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e004      	b.n	8004004 <HAL_GPIO_Init+0x204>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e002      	b.n	8004004 <HAL_GPIO_Init+0x204>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_GPIO_Init+0x204>
 8004002:	2300      	movs	r3, #0
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f002 0203 	and.w	r2, r2, #3
 800400a:	0092      	lsls	r2, r2, #2
 800400c:	4093      	lsls	r3, r2
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004014:	4935      	ldr	r1, [pc, #212]	; (80040ec <HAL_GPIO_Init+0x2ec>)
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004022:	4b38      	ldr	r3, [pc, #224]	; (8004104 <HAL_GPIO_Init+0x304>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <HAL_GPIO_Init+0x304>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800404c:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_GPIO_Init+0x304>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <HAL_GPIO_Init+0x304>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004076:	4b23      	ldr	r3, [pc, #140]	; (8004104 <HAL_GPIO_Init+0x304>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800409a:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_GPIO_Init+0x304>)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <HAL_GPIO_Init+0x304>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040c4:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <HAL_GPIO_Init+0x304>)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3301      	adds	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b0f      	cmp	r3, #15
 80040d4:	f67f aea2 	bls.w	8003e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	40020400 	.word	0x40020400
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40020c00 	.word	0x40020c00
 8004100:	40021000 	.word	0x40021000
 8004104:	40013c00 	.word	0x40013c00

08004108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
 8004114:	4613      	mov	r3, r2
 8004116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004118:	787b      	ldrb	r3, [r7, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004124:	e003      	b.n	800412e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	041a      	lsls	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	619a      	str	r2, [r3, #24]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e12b      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fb30 	bl	80037c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041a0:	f001 fd3c 	bl	8005c1c <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a81      	ldr	r2, [pc, #516]	; (80043b0 <HAL_I2C_Init+0x274>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d807      	bhi.n	80041c0 <HAL_I2C_Init+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a80      	ldr	r2, [pc, #512]	; (80043b4 <HAL_I2C_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bf94      	ite	ls
 80041b8:	2301      	movls	r3, #1
 80041ba:	2300      	movhi	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e006      	b.n	80041ce <HAL_I2C_Init+0x92>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a7d      	ldr	r2, [pc, #500]	; (80043b8 <HAL_I2C_Init+0x27c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0e7      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a78      	ldr	r2, [pc, #480]	; (80043bc <HAL_I2C_Init+0x280>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d802      	bhi.n	8004210 <HAL_I2C_Init+0xd4>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	e009      	b.n	8004224 <HAL_I2C_Init+0xe8>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <HAL_I2C_Init+0x284>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	3301      	adds	r3, #1
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	495c      	ldr	r1, [pc, #368]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d819      	bhi.n	8004278 <HAL_I2C_Init+0x13c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e59      	subs	r1, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004258:	400b      	ands	r3, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_I2C_Init+0x138>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e59      	subs	r1, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fbb1 f3f3 	udiv	r3, r1, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004272:	e051      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004274:	2304      	movs	r3, #4
 8004276:	e04f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <HAL_I2C_Init+0x168>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e012      	b.n	80042ca <HAL_I2C_Init+0x18e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Init+0x196>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e022      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_I2C_Init+0x1bc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e58      	subs	r0, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	440b      	add	r3, r1
 80042e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	6809      	ldr	r1, [r1, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6911      	ldr	r1, [r2, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	4311      	orrs	r1, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	000186a0 	.word	0x000186a0
 80043b4:	001e847f 	.word	0x001e847f
 80043b8:	003d08ff 	.word	0x003d08ff
 80043bc:	431bde83 	.word	0x431bde83
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	461a      	mov	r2, r3
 80043d0:	460b      	mov	r3, r1
 80043d2:	817b      	strh	r3, [r7, #10]
 80043d4:	4613      	mov	r3, r2
 80043d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043d8:	f7ff fbfc 	bl	8003bd4 <HAL_GetTick>
 80043dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	f040 80e0 	bne.w	80045ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	4970      	ldr	r1, [pc, #448]	; (80045b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fe02 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	e0d3      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_I2C_Master_Transmit+0x50>
 8004410:	2302      	movs	r3, #2
 8004412:	e0cc      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d007      	beq.n	800443a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004448:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	; 0x21
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2210      	movs	r2, #16
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	893a      	ldrh	r2, [r7, #8]
 800446a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a50      	ldr	r2, [pc, #320]	; (80045bc <HAL_I2C_Master_Transmit+0x1f8>)
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800447c:	8979      	ldrh	r1, [r7, #10]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fbbc 	bl	8004c00 <I2C_MasterRequestWrite>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e08d      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044a8:	e066      	b.n	8004578 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	6a39      	ldr	r1, [r7, #32]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fe7c 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00d      	beq.n	80044d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d107      	bne.n	80044d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06b      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	781a      	ldrb	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d11b      	bne.n	800454c <HAL_I2C_Master_Transmit+0x188>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6a39      	ldr	r1, [r7, #32]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fe6c 	bl	800522e <I2C_WaitOnBTFFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b04      	cmp	r3, #4
 8004562:	d107      	bne.n	8004574 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01a      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d194      	bne.n	80044aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	00100002 	.word	0x00100002
 80045bc:	ffff0000 	.word	0xffff0000

080045c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	461a      	mov	r2, r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	817b      	strh	r3, [r7, #10]
 80045d2:	460b      	mov	r3, r1
 80045d4:	813b      	strh	r3, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045da:	f7ff fafb 	bl	8003bd4 <HAL_GetTick>
 80045de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	f040 80d9 	bne.w	80047a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2319      	movs	r3, #25
 80045f4:	2201      	movs	r2, #1
 80045f6:	496d      	ldr	r1, [pc, #436]	; (80047ac <HAL_I2C_Mem_Write+0x1ec>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fd01 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
 8004606:	e0cc      	b.n	80047a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_I2C_Mem_Write+0x56>
 8004612:	2302      	movs	r3, #2
 8004614:	e0c5      	b.n	80047a2 <HAL_I2C_Mem_Write+0x1e2>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d007      	beq.n	800463c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2221      	movs	r2, #33	; 0x21
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a4d      	ldr	r2, [pc, #308]	; (80047b0 <HAL_I2C_Mem_Write+0x1f0>)
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800467e:	88f8      	ldrh	r0, [r7, #6]
 8004680:	893a      	ldrh	r2, [r7, #8]
 8004682:	8979      	ldrh	r1, [r7, #10]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	4603      	mov	r3, r0
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fb38 	bl	8004d04 <I2C_RequestMemoryWrite>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d052      	beq.n	8004740 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e081      	b.n	80047a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fd82 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d107      	bne.n	80046c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e06b      	b.n	80047a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <HAL_I2C_Mem_Write+0x180>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d017      	beq.n	8004740 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1aa      	bne.n	800469e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fd6e 	bl	800522e <I2C_WaitOnBTFFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00d      	beq.n	8004774 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	2b04      	cmp	r3, #4
 800475e:	d107      	bne.n	8004770 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e016      	b.n	80047a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	00100002 	.word	0x00100002
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	; 0x30
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ce:	f7ff fa01 	bl	8003bd4 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b20      	cmp	r3, #32
 80047de:	f040 8208 	bne.w	8004bf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2319      	movs	r3, #25
 80047e8:	2201      	movs	r2, #1
 80047ea:	497b      	ldr	r1, [pc, #492]	; (80049d8 <HAL_I2C_Mem_Read+0x224>)
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fc07 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
 80047fa:	e1fb      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_I2C_Mem_Read+0x56>
 8004806:	2302      	movs	r3, #2
 8004808:	e1f4      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d007      	beq.n	8004830 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2222      	movs	r2, #34	; 0x22
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2240      	movs	r2, #64	; 0x40
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <HAL_I2C_Mem_Read+0x228>)
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004872:	88f8      	ldrh	r0, [r7, #6]
 8004874:	893a      	ldrh	r2, [r7, #8]
 8004876:	8979      	ldrh	r1, [r7, #10]
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4603      	mov	r3, r0
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fad4 	bl	8004e30 <I2C_RequestMemoryRead>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e1b0      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d113      	bne.n	80048c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e184      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d11b      	bne.n	8004902 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e164      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	2b02      	cmp	r3, #2
 8004908:	d11b      	bne.n	8004942 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	e144      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004958:	e138      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	2b03      	cmp	r3, #3
 8004960:	f200 80f1 	bhi.w	8004b46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	2b01      	cmp	r3, #1
 800496a:	d123      	bne.n	80049b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fc9d 	bl	80052b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e139      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b2:	e10b      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d14e      	bne.n	8004a5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	2200      	movs	r2, #0
 80049c4:	4906      	ldr	r1, [pc, #24]	; (80049e0 <HAL_I2C_Mem_Read+0x22c>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fb1a 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e10e      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
 80049d6:	bf00      	nop
 80049d8:	00100002 	.word	0x00100002
 80049dc:	ffff0000 	.word	0xffff0000
 80049e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a58:	e0b8      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	2200      	movs	r2, #0
 8004a62:	4966      	ldr	r1, [pc, #408]	; (8004bfc <HAL_I2C_Mem_Read+0x448>)
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 facb 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0bf      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	2200      	movs	r2, #0
 8004abe:	494f      	ldr	r1, [pc, #316]	; (8004bfc <HAL_I2C_Mem_Read+0x448>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fa9d 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e091      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b44:	e042      	b.n	8004bcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fbb0 	bl	80052b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e04c      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d118      	bne.n	8004bcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f aec2 	bne.w	800495a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3728      	adds	r7, #40	; 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	00010004 	.word	0x00010004

08004c00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d006      	beq.n	8004c2a <I2C_MasterRequestWrite+0x2a>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d003      	beq.n	8004c2a <I2C_MasterRequestWrite+0x2a>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c28:	d108      	bne.n	8004c3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e00b      	b.n	8004c54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2b12      	cmp	r3, #18
 8004c42:	d107      	bne.n	8004c54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f9cd 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d103      	bne.n	8004c84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e035      	b.n	8004cf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c90:	d108      	bne.n	8004ca4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca0:	611a      	str	r2, [r3, #16]
 8004ca2:	e01b      	b.n	8004cdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ca4:	897b      	ldrh	r3, [r7, #10]
 8004ca6:	11db      	asrs	r3, r3, #7
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0306 	and.w	r3, r3, #6
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f063 030f 	orn	r3, r3, #15
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	490e      	ldr	r1, [pc, #56]	; (8004cfc <I2C_MasterRequestWrite+0xfc>)
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f9f3 	bl	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e010      	b.n	8004cf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cd2:	897b      	ldrh	r3, [r7, #10]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4907      	ldr	r1, [pc, #28]	; (8004d00 <I2C_MasterRequestWrite+0x100>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f9e3 	bl	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	00010008 	.word	0x00010008
 8004d00:	00010002 	.word	0x00010002

08004d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	817b      	strh	r3, [r7, #10]
 8004d16:	460b      	mov	r3, r1
 8004d18:	813b      	strh	r3, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f960 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d54:	d103      	bne.n	8004d5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e05f      	b.n	8004e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d62:	897b      	ldrh	r3, [r7, #10]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	492d      	ldr	r1, [pc, #180]	; (8004e2c <I2C_RequestMemoryWrite+0x128>)
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f998 	bl	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e04c      	b.n	8004e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	6a39      	ldr	r1, [r7, #32]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fa02 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00d      	beq.n	8004dca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d107      	bne.n	8004dc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e02b      	b.n	8004e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd0:	893b      	ldrh	r3, [r7, #8]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	611a      	str	r2, [r3, #16]
 8004dda:	e021      	b.n	8004e20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ddc:	893b      	ldrh	r3, [r7, #8]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	6a39      	ldr	r1, [r7, #32]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f9dc 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d107      	bne.n	8004e12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e005      	b.n	8004e22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e16:	893b      	ldrh	r3, [r7, #8]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	817b      	strh	r3, [r7, #10]
 8004e42:	460b      	mov	r3, r1
 8004e44:	813b      	strh	r3, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f8c2 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e90:	d103      	bne.n	8004e9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e0aa      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	6a3a      	ldr	r2, [r7, #32]
 8004eb2:	4952      	ldr	r1, [pc, #328]	; (8004ffc <I2C_RequestMemoryRead+0x1cc>)
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f8fa 	bl	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e097      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	6a39      	ldr	r1, [r7, #32]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f964 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00d      	beq.n	8004f06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d107      	bne.n	8004f02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e076      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]
 8004f16:	e021      	b.n	8004f5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f93e 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d107      	bne.n	8004f4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e050      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f52:	893b      	ldrh	r3, [r7, #8]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5e:	6a39      	ldr	r1, [r7, #32]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f923 	bl	80051ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d107      	bne.n	8004f84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e035      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f82b 	bl	8005000 <I2C_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbe:	d103      	bne.n	8004fc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e013      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	6a3a      	ldr	r2, [r7, #32]
 8004fe0:	4906      	ldr	r1, [pc, #24]	; (8004ffc <I2C_RequestMemoryRead+0x1cc>)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f863 	bl	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	00010002 	.word	0x00010002

08005000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005010:	e025      	b.n	800505e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005018:	d021      	beq.n	800505e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fe fddb 	bl	8003bd4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e023      	b.n	80050a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10d      	bne.n	8005084 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	e00c      	b.n	800509e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	43da      	mvns	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d0b6      	beq.n	8005012 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050bc:	e051      	b.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d123      	bne.n	8005116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f043 0204 	orr.w	r2, r3, #4
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e046      	b.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800511c:	d021      	beq.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7fe fd59 	bl	8003bd4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e020      	b.n	80051a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10c      	bne.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	43da      	mvns	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4013      	ands	r3, r2
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e00b      	b.n	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	43da      	mvns	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	4013      	ands	r3, r2
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d18d      	bne.n	80050be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051b8:	e02d      	b.n	8005216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8ce 	bl	800535c <I2C_IsAcknowledgeFailed>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e02d      	b.n	8005226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d0:	d021      	beq.n	8005216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe fcff 	bl	8003bd4 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d116      	bne.n	8005216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e007      	b.n	8005226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d1ca      	bne.n	80051ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800523a:	e02d      	b.n	8005298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f88d 	bl	800535c <I2C_IsAcknowledgeFailed>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e02d      	b.n	80052a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005252:	d021      	beq.n	8005298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fe fcbe 	bl	8003bd4 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d116      	bne.n	8005298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e007      	b.n	80052a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d1ca      	bne.n	800523c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052bc:	e042      	b.n	8005344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d119      	bne.n	8005300 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0210 	mvn.w	r2, #16
 80052d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e029      	b.n	8005354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005300:	f7fe fc68 	bl	8003bd4 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	d302      	bcc.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d116      	bne.n	8005344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e007      	b.n	8005354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d1b5      	bne.n	80052be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d11b      	bne.n	80053ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800537c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f043 0204 	orr.w	r2, r3, #4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e267      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d075      	beq.n	80054c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	4b88      	ldr	r3, [pc, #544]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d00c      	beq.n	8005400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b85      	ldr	r3, [pc, #532]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d112      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4b82      	ldr	r3, [pc, #520]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d10b      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05b      	beq.n	80054c4 <HAL_RCC_OscConfig+0x108>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d157      	bne.n	80054c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e242      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x74>
 8005422:	4b76      	ldr	r3, [pc, #472]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a75      	ldr	r2, [pc, #468]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x98>
 800543a:	4b70      	ldr	r3, [pc, #448]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6f      	ldr	r2, [pc, #444]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b6d      	ldr	r3, [pc, #436]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6c      	ldr	r2, [pc, #432]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005454:	4b69      	ldr	r3, [pc, #420]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a68      	ldr	r2, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fe fbae 	bl	8003bd4 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7fe fbaa 	bl	8003bd4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e207      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b5b      	ldr	r3, [pc, #364]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xc0>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fe fb9a 	bl	8003bd4 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fe fb96 	bl	8003bd4 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1f3      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0xe8>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d063      	beq.n	800559a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d2:	4b4a      	ldr	r3, [pc, #296]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054de:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d11c      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ea:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	4b41      	ldr	r3, [pc, #260]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e1c7      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4937      	ldr	r1, [pc, #220]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	e03a      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCC_OscConfig+0x244>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fe fb4f 	bl	8003bd4 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553a:	f7fe fb4b 	bl	8003bd4 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e1a8      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554c:	4b2b      	ldr	r3, [pc, #172]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4925      	ldr	r1, [pc, #148]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
 800556c:	e015      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <HAL_RCC_OscConfig+0x244>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fe fb2e 	bl	8003bd4 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557c:	f7fe fb2a 	bl	8003bd4 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e187      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558e:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d036      	beq.n	8005614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_RCC_OscConfig+0x248>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fe fb0e 	bl	8003bd4 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fe fb0a 	bl	8003bd4 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e167      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80055d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x200>
 80055da:	e01b      	b.n	8005614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCC_OscConfig+0x248>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fe faf7 	bl	8003bd4 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	e00e      	b.n	8005608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ea:	f7fe faf3 	bl	8003bd4 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d907      	bls.n	8005608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e150      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
 80055fc:	40023800 	.word	0x40023800
 8005600:	42470000 	.word	0x42470000
 8005604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800560a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ea      	bne.n	80055ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8097 	beq.w	8005750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005626:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10f      	bne.n	8005652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	4b7d      	ldr	r3, [pc, #500]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a7c      	ldr	r2, [pc, #496]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b7a      	ldr	r3, [pc, #488]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b77      	ldr	r3, [pc, #476]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565e:	4b74      	ldr	r3, [pc, #464]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a73      	ldr	r2, [pc, #460]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fe fab3 	bl	8003bd4 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fe faaf 	bl	8003bd4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e10c      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	4b6a      	ldr	r3, [pc, #424]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d106      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2ea>
 8005698:	4b64      	ldr	r3, [pc, #400]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a63      	ldr	r2, [pc, #396]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e01c      	b.n	80056e0 <HAL_RCC_OscConfig+0x324>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x30c>
 80056ae:	4b5f      	ldr	r3, [pc, #380]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a5e      	ldr	r2, [pc, #376]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a5b      	ldr	r2, [pc, #364]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0x324>
 80056c8:	4b58      	ldr	r3, [pc, #352]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056cc:	4a57      	ldr	r2, [pc, #348]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	6713      	str	r3, [r2, #112]	; 0x70
 80056d4:	4b55      	ldr	r3, [pc, #340]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a54      	ldr	r2, [pc, #336]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056da:	f023 0304 	bic.w	r3, r3, #4
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fe fa74 	bl	8003bd4 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fe fa70 	bl	8003bd4 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0cb      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	4b49      	ldr	r3, [pc, #292]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ee      	beq.n	80056f0 <HAL_RCC_OscConfig+0x334>
 8005712:	e014      	b.n	800573e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005714:	f7fe fa5e 	bl	8003bd4 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fe fa5a 	bl	8003bd4 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0b5      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ee      	bne.n	800571c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	4a38      	ldr	r2, [pc, #224]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a1 	beq.w	800589c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800575a:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b08      	cmp	r3, #8
 8005764:	d05c      	beq.n	8005820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d141      	bne.n	80057f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576e:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fe fa2e 	bl	8003bd4 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577c:	f7fe fa2a 	bl	8003bd4 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e087      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	491b      	ldr	r1, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ca:	f7fe fa03 	bl	8003bd4 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d2:	f7fe f9ff 	bl	8003bd4 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e05c      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x416>
 80057f0:	e054      	b.n	800589c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b10      	ldr	r3, [pc, #64]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fe f9ec 	bl	8003bd4 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005800:	f7fe f9e8 	bl	8003bd4 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e045      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x444>
 800581e:	e03d      	b.n	800589c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e038      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
 800582c:	40023800 	.word	0x40023800
 8005830:	40007000 	.word	0x40007000
 8005834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005838:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <HAL_RCC_OscConfig+0x4ec>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d028      	beq.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d121      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d11a      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800586e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005870:	4293      	cmp	r3, r2
 8005872:	d111      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d107      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800

080058ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0cc      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90c      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b63      	ldr	r3, [pc, #396]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0b8      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005900:	4b59      	ldr	r3, [pc, #356]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a58      	ldr	r2, [pc, #352]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800590a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005918:	4b53      	ldr	r3, [pc, #332]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4a52      	ldr	r2, [pc, #328]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	494d      	ldr	r1, [pc, #308]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d044      	beq.n	80059cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d119      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e07f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d003      	beq.n	800596a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e06f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e067      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598a:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4934      	ldr	r1, [pc, #208]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800599c:	f7fe f91a 	bl	8003bd4 <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fe f916 	bl	8003bd4 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e04f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 020c 	and.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1eb      	bne.n	80059a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d20c      	bcs.n	80059f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e032      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4916      	ldr	r1, [pc, #88]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	490e      	ldr	r1, [pc, #56]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a32:	f000 f821 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	490a      	ldr	r1, [pc, #40]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	5ccb      	ldrb	r3, [r1, r3]
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe f87a 	bl	8003b4c <HAL_InitTick>

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40023c00 	.word	0x40023c00
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	0800ae20 	.word	0x0800ae20
 8005a70:	20000004 	.word	0x20000004
 8005a74:	20000008 	.word	0x20000008

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a7c:	b090      	sub	sp, #64	; 0x40
 8005a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a88:	2300      	movs	r3, #0
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a90:	4b59      	ldr	r3, [pc, #356]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	f200 80a1 	bhi.w	8005be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x34>
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aaa:	e09b      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ab0:	e09b      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ab2:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ab6:	e098      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab8:	4b4f      	ldr	r3, [pc, #316]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac2:	4b4d      	ldr	r3, [pc, #308]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d028      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ace:	4b4a      	ldr	r3, [pc, #296]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	623b      	str	r3, [r7, #32]
 8005ad8:	627a      	str	r2, [r7, #36]	; 0x24
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4b47      	ldr	r3, [pc, #284]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ae4:	fb03 f201 	mul.w	r2, r3, r1
 8005ae8:	2300      	movs	r3, #0
 8005aea:	fb00 f303 	mul.w	r3, r0, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	4a43      	ldr	r2, [pc, #268]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8005af2:	fba0 1202 	umull	r1, r2, r0, r2
 8005af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af8:	460a      	mov	r2, r1
 8005afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8005afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afe:	4413      	add	r3, r2
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	2200      	movs	r2, #0
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	61fa      	str	r2, [r7, #28]
 8005b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b12:	f7fb f911 	bl	8000d38 <__aeabi_uldivmod>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1e:	e053      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b20:	4b35      	ldr	r3, [pc, #212]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	099b      	lsrs	r3, r3, #6
 8005b26:	2200      	movs	r2, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	617a      	str	r2, [r7, #20]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b32:	f04f 0b00 	mov.w	fp, #0
 8005b36:	4652      	mov	r2, sl
 8005b38:	465b      	mov	r3, fp
 8005b3a:	f04f 0000 	mov.w	r0, #0
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	0159      	lsls	r1, r3, #5
 8005b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b48:	0150      	lsls	r0, r2, #5
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8005b52:	eb63 090b 	sbc.w	r9, r3, fp
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8005b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	00eb      	lsls	r3, r5, #3
 8005b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b80:	00e2      	lsls	r2, r4, #3
 8005b82:	4614      	mov	r4, r2
 8005b84:	461d      	mov	r5, r3
 8005b86:	eb14 030a 	adds.w	r3, r4, sl
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	eb45 030b 	adc.w	r3, r5, fp
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	028b      	lsls	r3, r1, #10
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ba8:	4621      	mov	r1, r4
 8005baa:	028a      	lsls	r2, r1, #10
 8005bac:	4610      	mov	r0, r2
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	60fa      	str	r2, [r7, #12]
 8005bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bbc:	f7fb f8bc 	bl	8000d38 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005be2:	e002      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8005be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3740      	adds	r7, #64	; 0x40
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	00f42400 	.word	0x00f42400
 8005c00:	017d7840 	.word	0x017d7840

08005c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000004 	.word	0x20000004

08005c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c20:	f7ff fff0 	bl	8005c04 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	0a9b      	lsrs	r3, r3, #10
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4903      	ldr	r1, [pc, #12]	; (8005c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	0800ae30 	.word	0x0800ae30

08005c44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d035      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c6c:	4b67      	ldr	r3, [pc, #412]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c72:	f7fd ffaf 	bl	8003bd4 <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c7a:	f7fd ffab 	bl	8003bd4 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0ba      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c8c:	4b60      	ldr	r3, [pc, #384]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	019a      	lsls	r2, r3, #6
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	071b      	lsls	r3, r3, #28
 8005ca4:	495a      	ldr	r1, [pc, #360]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cac:	4b57      	ldr	r3, [pc, #348]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb2:	f7fd ff8f 	bl	8003bd4 <HAL_GetTick>
 8005cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cba:	f7fd ff8b 	bl	8003bd4 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e09a      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ccc:	4b50      	ldr	r3, [pc, #320]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8083 	beq.w	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	4b49      	ldr	r3, [pc, #292]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	4a48      	ldr	r2, [pc, #288]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf6:	4b46      	ldr	r3, [pc, #280]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d02:	4b44      	ldr	r3, [pc, #272]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a43      	ldr	r2, [pc, #268]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0e:	f7fd ff61 	bl	8003bd4 <HAL_GetTick>
 8005d12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d16:	f7fd ff5d 	bl	8003bd4 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e06c      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d28:	4b3a      	ldr	r3, [pc, #232]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d34:	4b36      	ldr	r3, [pc, #216]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02f      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d028      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d62:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d68:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d6e:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d114      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d7a:	f7fd ff2b 	bl	8003bd4 <HAL_GetTick>
 8005d7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fd ff27 	bl	8003bd4 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e034      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ee      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db0:	d10d      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc6:	4912      	ldr	r1, [pc, #72]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]
 8005dcc:	e005      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dd8:	6093      	str	r3, [r2, #8]
 8005dda:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de6:	490a      	ldr	r1, [pc, #40]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7c1a      	ldrb	r2, [r3, #16]
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dfe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	42470068 	.word	0x42470068
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42470e40 	.word	0x42470e40
 8005e1c:	424711e0 	.word	0x424711e0

08005e20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e066      	b.n	8005f04 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7f5b      	ldrb	r3, [r3, #29]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d105      	bne.n	8005e4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fd fd06 	bl	8003858 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	22ca      	movs	r2, #202	; 0xca
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2253      	movs	r2, #83	; 0x53
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa45 	bl	80062f2 <RTC_EnterInitMode>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d12c      	bne.n	8005ecc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e84:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6899      	ldr	r1, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68d2      	ldr	r2, [r2, #12]
 8005eac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6919      	ldr	r1, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	041a      	lsls	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa4c 	bl	8006360 <RTC_ExitInitMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d113      	bne.n	8005efa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	22ff      	movs	r2, #255	; 0xff
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	7f1b      	ldrb	r3, [r3, #28]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_RTC_SetTime+0x1c>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e087      	b.n	8006038 <HAL_RTC_SetTime+0x12c>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2202      	movs	r2, #2
 8005f32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d126      	bne.n	8005f88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fa29 	bl	80063aa <RTC_ByteToBcd2>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fa22 	bl	80063aa <RTC_ByteToBcd2>
 8005f66:	4603      	mov	r3, r0
 8005f68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	789b      	ldrb	r3, [r3, #2]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fa1a 	bl	80063aa <RTC_ByteToBcd2>
 8005f76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	78db      	ldrb	r3, [r3, #3]
 8005f80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e018      	b.n	8005fba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fa8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005fae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	22ca      	movs	r2, #202	; 0xca
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2253      	movs	r2, #83	; 0x53
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f991 	bl	80062f2 <RTC_EnterInitMode>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d120      	bne.n	800601c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fe4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fe8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ff8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6899      	ldr	r1, [r3, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	431a      	orrs	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f9a4 	bl	8006360 <RTC_ExitInitMode>
 8006018:	4603      	mov	r3, r0
 800601a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	771a      	strb	r2, [r3, #28]

  return status;
 8006036:	7cfb      	ldrb	r3, [r7, #19]
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	bd90      	pop	{r4, r7, pc}

08006040 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006072:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006076:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	0d9b      	lsrs	r3, r3, #22
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11a      	bne.n	80060f2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 f98f 	bl	80063e4 <RTC_Bcd2ToByte>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f986 	bl	80063e4 <RTC_Bcd2ToByte>
 80060d8:	4603      	mov	r3, r0
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	789b      	ldrb	r3, [r3, #2]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 f97d 	bl	80063e4 <RTC_Bcd2ToByte>
 80060ea:	4603      	mov	r3, r0
 80060ec:	461a      	mov	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	7f1b      	ldrb	r3, [r3, #28]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_RTC_SetDate+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e071      	b.n	80061fc <HAL_RTC_SetDate+0x100>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2202      	movs	r2, #2
 8006122:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10e      	bne.n	8006148 <HAL_RTC_SetDate+0x4c>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	f023 0310 	bic.w	r3, r3, #16
 800613e:	b2db      	uxtb	r3, r3
 8006140:	330a      	adds	r3, #10
 8006142:	b2da      	uxtb	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d11c      	bne.n	8006188 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f929 	bl	80063aa <RTC_ByteToBcd2>
 8006158:	4603      	mov	r3, r0
 800615a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 f922 	bl	80063aa <RTC_ByteToBcd2>
 8006166:	4603      	mov	r3, r0
 8006168:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800616a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	789b      	ldrb	r3, [r3, #2]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f91a 	bl	80063aa <RTC_ByteToBcd2>
 8006176:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006178:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e00e      	b.n	80061a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	78db      	ldrb	r3, [r3, #3]
 800618c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006194:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800619a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	22ca      	movs	r2, #202	; 0xca
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2253      	movs	r2, #83	; 0x53
 80061b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f89b 	bl	80062f2 <RTC_EnterInitMode>
 80061bc:	4603      	mov	r3, r0
 80061be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10c      	bne.n	80061e0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f8c2 	bl	8006360 <RTC_ExitInitMode>
 80061dc:	4603      	mov	r3, r0
 80061de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061e0:	7cfb      	ldrb	r3, [r7, #19]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	771a      	strb	r2, [r3, #28]

  return status;
 80061fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd90      	pop	{r4, r7, pc}

08006204 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006222:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	0c1b      	lsrs	r3, r3, #16
 8006228:	b2da      	uxtb	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	0b5b      	lsrs	r3, r3, #13
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	b2da      	uxtb	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11a      	bne.n	8006298 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f8bc 	bl	80063e4 <RTC_Bcd2ToByte>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 f8b3 	bl	80063e4 <RTC_Bcd2ToByte>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	789b      	ldrb	r3, [r3, #2]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f8aa 	bl	80063e4 <RTC_Bcd2ToByte>
 8006290:	4603      	mov	r3, r0
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062bc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062be:	f7fd fc89 	bl	8003bd4 <HAL_GetTick>
 80062c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062c4:	e009      	b.n	80062da <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062c6:	f7fd fc85 	bl	8003bd4 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d4:	d901      	bls.n	80062da <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e007      	b.n	80062ea <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ee      	beq.n	80062c6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d122      	bne.n	8006356 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800631e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006320:	f7fd fc58 	bl	8003bd4 <HAL_GetTick>
 8006324:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006326:	e00c      	b.n	8006342 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006328:	f7fd fc54 	bl	8003bd4 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006336:	d904      	bls.n	8006342 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2204      	movs	r2, #4
 800633c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <RTC_EnterInitMode+0x64>
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d1e8      	bne.n	8006328 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800637a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff ff89 	bl	80062a2 <HAL_RTC_WaitForSynchro>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2204      	movs	r2, #4
 800639a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	4603      	mov	r3, r0
 80063b2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80063b8:	e005      	b.n	80063c6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	3301      	adds	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	3b0a      	subs	r3, #10
 80063c4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b09      	cmp	r3, #9
 80063ca:	d8f6      	bhi.n	80063ba <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	b2db      	uxtb	r3, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	0092      	lsls	r2, r2, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	b2da      	uxtb	r2, r3
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	4413      	add	r3, r2
 800640e:	b2db      	uxtb	r3, r3
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <__errno>:
 800641c:	4b01      	ldr	r3, [pc, #4]	; (8006424 <__errno+0x8>)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000010 	.word	0x20000010

08006428 <__libc_init_array>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4d0d      	ldr	r5, [pc, #52]	; (8006460 <__libc_init_array+0x38>)
 800642c:	4c0d      	ldr	r4, [pc, #52]	; (8006464 <__libc_init_array+0x3c>)
 800642e:	1b64      	subs	r4, r4, r5
 8006430:	10a4      	asrs	r4, r4, #2
 8006432:	2600      	movs	r6, #0
 8006434:	42a6      	cmp	r6, r4
 8006436:	d109      	bne.n	800644c <__libc_init_array+0x24>
 8006438:	4d0b      	ldr	r5, [pc, #44]	; (8006468 <__libc_init_array+0x40>)
 800643a:	4c0c      	ldr	r4, [pc, #48]	; (800646c <__libc_init_array+0x44>)
 800643c:	f004 fc90 	bl	800ad60 <_init>
 8006440:	1b64      	subs	r4, r4, r5
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	2600      	movs	r6, #0
 8006446:	42a6      	cmp	r6, r4
 8006448:	d105      	bne.n	8006456 <__libc_init_array+0x2e>
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006450:	4798      	blx	r3
 8006452:	3601      	adds	r6, #1
 8006454:	e7ee      	b.n	8006434 <__libc_init_array+0xc>
 8006456:	f855 3b04 	ldr.w	r3, [r5], #4
 800645a:	4798      	blx	r3
 800645c:	3601      	adds	r6, #1
 800645e:	e7f2      	b.n	8006446 <__libc_init_array+0x1e>
 8006460:	0800b2e4 	.word	0x0800b2e4
 8006464:	0800b2e4 	.word	0x0800b2e4
 8006468:	0800b2e4 	.word	0x0800b2e4
 800646c:	0800b2e8 	.word	0x0800b2e8

08006470 <memset>:
 8006470:	4402      	add	r2, r0
 8006472:	4603      	mov	r3, r0
 8006474:	4293      	cmp	r3, r2
 8006476:	d100      	bne.n	800647a <memset+0xa>
 8006478:	4770      	bx	lr
 800647a:	f803 1b01 	strb.w	r1, [r3], #1
 800647e:	e7f9      	b.n	8006474 <memset+0x4>

08006480 <__cvt>:
 8006480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	ec55 4b10 	vmov	r4, r5, d0
 8006488:	2d00      	cmp	r5, #0
 800648a:	460e      	mov	r6, r1
 800648c:	4619      	mov	r1, r3
 800648e:	462b      	mov	r3, r5
 8006490:	bfbb      	ittet	lt
 8006492:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006496:	461d      	movlt	r5, r3
 8006498:	2300      	movge	r3, #0
 800649a:	232d      	movlt	r3, #45	; 0x2d
 800649c:	700b      	strb	r3, [r1, #0]
 800649e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064a4:	4691      	mov	r9, r2
 80064a6:	f023 0820 	bic.w	r8, r3, #32
 80064aa:	bfbc      	itt	lt
 80064ac:	4622      	movlt	r2, r4
 80064ae:	4614      	movlt	r4, r2
 80064b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064b4:	d005      	beq.n	80064c2 <__cvt+0x42>
 80064b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064ba:	d100      	bne.n	80064be <__cvt+0x3e>
 80064bc:	3601      	adds	r6, #1
 80064be:	2102      	movs	r1, #2
 80064c0:	e000      	b.n	80064c4 <__cvt+0x44>
 80064c2:	2103      	movs	r1, #3
 80064c4:	ab03      	add	r3, sp, #12
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	ab02      	add	r3, sp, #8
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	ec45 4b10 	vmov	d0, r4, r5
 80064d0:	4653      	mov	r3, sl
 80064d2:	4632      	mov	r2, r6
 80064d4:	f001 fdac 	bl	8008030 <_dtoa_r>
 80064d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064dc:	4607      	mov	r7, r0
 80064de:	d102      	bne.n	80064e6 <__cvt+0x66>
 80064e0:	f019 0f01 	tst.w	r9, #1
 80064e4:	d022      	beq.n	800652c <__cvt+0xac>
 80064e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064ea:	eb07 0906 	add.w	r9, r7, r6
 80064ee:	d110      	bne.n	8006512 <__cvt+0x92>
 80064f0:	783b      	ldrb	r3, [r7, #0]
 80064f2:	2b30      	cmp	r3, #48	; 0x30
 80064f4:	d10a      	bne.n	800650c <__cvt+0x8c>
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7fa faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006502:	b918      	cbnz	r0, 800650c <__cvt+0x8c>
 8006504:	f1c6 0601 	rsb	r6, r6, #1
 8006508:	f8ca 6000 	str.w	r6, [sl]
 800650c:	f8da 3000 	ldr.w	r3, [sl]
 8006510:	4499      	add	r9, r3
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	f7fa fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800651e:	b108      	cbz	r0, 8006524 <__cvt+0xa4>
 8006520:	f8cd 900c 	str.w	r9, [sp, #12]
 8006524:	2230      	movs	r2, #48	; 0x30
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	454b      	cmp	r3, r9
 800652a:	d307      	bcc.n	800653c <__cvt+0xbc>
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006530:	1bdb      	subs	r3, r3, r7
 8006532:	4638      	mov	r0, r7
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	b004      	add	sp, #16
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	1c59      	adds	r1, r3, #1
 800653e:	9103      	str	r1, [sp, #12]
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e7f0      	b.n	8006526 <__cvt+0xa6>

08006544 <__exponent>:
 8006544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006546:	4603      	mov	r3, r0
 8006548:	2900      	cmp	r1, #0
 800654a:	bfb8      	it	lt
 800654c:	4249      	neglt	r1, r1
 800654e:	f803 2b02 	strb.w	r2, [r3], #2
 8006552:	bfb4      	ite	lt
 8006554:	222d      	movlt	r2, #45	; 0x2d
 8006556:	222b      	movge	r2, #43	; 0x2b
 8006558:	2909      	cmp	r1, #9
 800655a:	7042      	strb	r2, [r0, #1]
 800655c:	dd2a      	ble.n	80065b4 <__exponent+0x70>
 800655e:	f10d 0407 	add.w	r4, sp, #7
 8006562:	46a4      	mov	ip, r4
 8006564:	270a      	movs	r7, #10
 8006566:	46a6      	mov	lr, r4
 8006568:	460a      	mov	r2, r1
 800656a:	fb91 f6f7 	sdiv	r6, r1, r7
 800656e:	fb07 1516 	mls	r5, r7, r6, r1
 8006572:	3530      	adds	r5, #48	; 0x30
 8006574:	2a63      	cmp	r2, #99	; 0x63
 8006576:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800657a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800657e:	4631      	mov	r1, r6
 8006580:	dcf1      	bgt.n	8006566 <__exponent+0x22>
 8006582:	3130      	adds	r1, #48	; 0x30
 8006584:	f1ae 0502 	sub.w	r5, lr, #2
 8006588:	f804 1c01 	strb.w	r1, [r4, #-1]
 800658c:	1c44      	adds	r4, r0, #1
 800658e:	4629      	mov	r1, r5
 8006590:	4561      	cmp	r1, ip
 8006592:	d30a      	bcc.n	80065aa <__exponent+0x66>
 8006594:	f10d 0209 	add.w	r2, sp, #9
 8006598:	eba2 020e 	sub.w	r2, r2, lr
 800659c:	4565      	cmp	r5, ip
 800659e:	bf88      	it	hi
 80065a0:	2200      	movhi	r2, #0
 80065a2:	4413      	add	r3, r2
 80065a4:	1a18      	subs	r0, r3, r0
 80065a6:	b003      	add	sp, #12
 80065a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065b2:	e7ed      	b.n	8006590 <__exponent+0x4c>
 80065b4:	2330      	movs	r3, #48	; 0x30
 80065b6:	3130      	adds	r1, #48	; 0x30
 80065b8:	7083      	strb	r3, [r0, #2]
 80065ba:	70c1      	strb	r1, [r0, #3]
 80065bc:	1d03      	adds	r3, r0, #4
 80065be:	e7f1      	b.n	80065a4 <__exponent+0x60>

080065c0 <_printf_float>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	ed2d 8b02 	vpush	{d8}
 80065c8:	b08d      	sub	sp, #52	; 0x34
 80065ca:	460c      	mov	r4, r1
 80065cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065d0:	4616      	mov	r6, r2
 80065d2:	461f      	mov	r7, r3
 80065d4:	4605      	mov	r5, r0
 80065d6:	f002 fe89 	bl	80092ec <_localeconv_r>
 80065da:	f8d0 a000 	ldr.w	sl, [r0]
 80065de:	4650      	mov	r0, sl
 80065e0:	f7f9 fdfe 	bl	80001e0 <strlen>
 80065e4:	2300      	movs	r3, #0
 80065e6:	930a      	str	r3, [sp, #40]	; 0x28
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	f8d8 3000 	ldr.w	r3, [r8]
 80065f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065f4:	3307      	adds	r3, #7
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	f103 0208 	add.w	r2, r3, #8
 80065fe:	f8c8 2000 	str.w	r2, [r8]
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800660a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800660e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006612:	9307      	str	r3, [sp, #28]
 8006614:	f8cd 8018 	str.w	r8, [sp, #24]
 8006618:	ee08 0a10 	vmov	s16, r0
 800661c:	4b9f      	ldr	r3, [pc, #636]	; (800689c <_printf_float+0x2dc>)
 800661e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006626:	f7fa fa89 	bl	8000b3c <__aeabi_dcmpun>
 800662a:	bb88      	cbnz	r0, 8006690 <_printf_float+0xd0>
 800662c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006630:	4b9a      	ldr	r3, [pc, #616]	; (800689c <_printf_float+0x2dc>)
 8006632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006636:	f7fa fa63 	bl	8000b00 <__aeabi_dcmple>
 800663a:	bb48      	cbnz	r0, 8006690 <_printf_float+0xd0>
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7fa fa52 	bl	8000aec <__aeabi_dcmplt>
 8006648:	b110      	cbz	r0, 8006650 <_printf_float+0x90>
 800664a:	232d      	movs	r3, #45	; 0x2d
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	4b93      	ldr	r3, [pc, #588]	; (80068a0 <_printf_float+0x2e0>)
 8006652:	4894      	ldr	r0, [pc, #592]	; (80068a4 <_printf_float+0x2e4>)
 8006654:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006658:	bf94      	ite	ls
 800665a:	4698      	movls	r8, r3
 800665c:	4680      	movhi	r8, r0
 800665e:	2303      	movs	r3, #3
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	f023 0204 	bic.w	r2, r3, #4
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	f04f 0900 	mov.w	r9, #0
 800666e:	9700      	str	r7, [sp, #0]
 8006670:	4633      	mov	r3, r6
 8006672:	aa0b      	add	r2, sp, #44	; 0x2c
 8006674:	4621      	mov	r1, r4
 8006676:	4628      	mov	r0, r5
 8006678:	f000 f9d8 	bl	8006a2c <_printf_common>
 800667c:	3001      	adds	r0, #1
 800667e:	f040 8090 	bne.w	80067a2 <_printf_float+0x1e2>
 8006682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006686:	b00d      	add	sp, #52	; 0x34
 8006688:	ecbd 8b02 	vpop	{d8}
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	f7fa fa50 	bl	8000b3c <__aeabi_dcmpun>
 800669c:	b140      	cbz	r0, 80066b0 <_printf_float+0xf0>
 800669e:	464b      	mov	r3, r9
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfbc      	itt	lt
 80066a4:	232d      	movlt	r3, #45	; 0x2d
 80066a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066aa:	487f      	ldr	r0, [pc, #508]	; (80068a8 <_printf_float+0x2e8>)
 80066ac:	4b7f      	ldr	r3, [pc, #508]	; (80068ac <_printf_float+0x2ec>)
 80066ae:	e7d1      	b.n	8006654 <_printf_float+0x94>
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066b6:	9206      	str	r2, [sp, #24]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	d13f      	bne.n	800673c <_printf_float+0x17c>
 80066bc:	2306      	movs	r3, #6
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	9b05      	ldr	r3, [sp, #20]
 80066c2:	6861      	ldr	r1, [r4, #4]
 80066c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066c8:	2300      	movs	r3, #0
 80066ca:	9303      	str	r3, [sp, #12]
 80066cc:	ab0a      	add	r3, sp, #40	; 0x28
 80066ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066d2:	ab09      	add	r3, sp, #36	; 0x24
 80066d4:	ec49 8b10 	vmov	d0, r8, r9
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066e0:	4628      	mov	r0, r5
 80066e2:	f7ff fecd 	bl	8006480 <__cvt>
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ea:	2b47      	cmp	r3, #71	; 0x47
 80066ec:	4680      	mov	r8, r0
 80066ee:	d108      	bne.n	8006702 <_printf_float+0x142>
 80066f0:	1cc8      	adds	r0, r1, #3
 80066f2:	db02      	blt.n	80066fa <_printf_float+0x13a>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	4299      	cmp	r1, r3
 80066f8:	dd41      	ble.n	800677e <_printf_float+0x1be>
 80066fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80066fe:	fa5f fb8b 	uxtb.w	fp, fp
 8006702:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006706:	d820      	bhi.n	800674a <_printf_float+0x18a>
 8006708:	3901      	subs	r1, #1
 800670a:	465a      	mov	r2, fp
 800670c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006710:	9109      	str	r1, [sp, #36]	; 0x24
 8006712:	f7ff ff17 	bl	8006544 <__exponent>
 8006716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006718:	1813      	adds	r3, r2, r0
 800671a:	2a01      	cmp	r2, #1
 800671c:	4681      	mov	r9, r0
 800671e:	6123      	str	r3, [r4, #16]
 8006720:	dc02      	bgt.n	8006728 <_printf_float+0x168>
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	07d2      	lsls	r2, r2, #31
 8006726:	d501      	bpl.n	800672c <_printf_float+0x16c>
 8006728:	3301      	adds	r3, #1
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006730:	2b00      	cmp	r3, #0
 8006732:	d09c      	beq.n	800666e <_printf_float+0xae>
 8006734:	232d      	movs	r3, #45	; 0x2d
 8006736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673a:	e798      	b.n	800666e <_printf_float+0xae>
 800673c:	9a06      	ldr	r2, [sp, #24]
 800673e:	2a47      	cmp	r2, #71	; 0x47
 8006740:	d1be      	bne.n	80066c0 <_printf_float+0x100>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1bc      	bne.n	80066c0 <_printf_float+0x100>
 8006746:	2301      	movs	r3, #1
 8006748:	e7b9      	b.n	80066be <_printf_float+0xfe>
 800674a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800674e:	d118      	bne.n	8006782 <_printf_float+0x1c2>
 8006750:	2900      	cmp	r1, #0
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	dd0b      	ble.n	800676e <_printf_float+0x1ae>
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	b913      	cbnz	r3, 8006760 <_printf_float+0x1a0>
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	07d0      	lsls	r0, r2, #31
 800675e:	d502      	bpl.n	8006766 <_printf_float+0x1a6>
 8006760:	3301      	adds	r3, #1
 8006762:	440b      	add	r3, r1
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	65a1      	str	r1, [r4, #88]	; 0x58
 8006768:	f04f 0900 	mov.w	r9, #0
 800676c:	e7de      	b.n	800672c <_printf_float+0x16c>
 800676e:	b913      	cbnz	r3, 8006776 <_printf_float+0x1b6>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	07d2      	lsls	r2, r2, #31
 8006774:	d501      	bpl.n	800677a <_printf_float+0x1ba>
 8006776:	3302      	adds	r3, #2
 8006778:	e7f4      	b.n	8006764 <_printf_float+0x1a4>
 800677a:	2301      	movs	r3, #1
 800677c:	e7f2      	b.n	8006764 <_printf_float+0x1a4>
 800677e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006784:	4299      	cmp	r1, r3
 8006786:	db05      	blt.n	8006794 <_printf_float+0x1d4>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	6121      	str	r1, [r4, #16]
 800678c:	07d8      	lsls	r0, r3, #31
 800678e:	d5ea      	bpl.n	8006766 <_printf_float+0x1a6>
 8006790:	1c4b      	adds	r3, r1, #1
 8006792:	e7e7      	b.n	8006764 <_printf_float+0x1a4>
 8006794:	2900      	cmp	r1, #0
 8006796:	bfd4      	ite	le
 8006798:	f1c1 0202 	rsble	r2, r1, #2
 800679c:	2201      	movgt	r2, #1
 800679e:	4413      	add	r3, r2
 80067a0:	e7e0      	b.n	8006764 <_printf_float+0x1a4>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	055a      	lsls	r2, r3, #21
 80067a6:	d407      	bmi.n	80067b8 <_printf_float+0x1f8>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	4642      	mov	r2, r8
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	d12c      	bne.n	8006810 <_printf_float+0x250>
 80067b6:	e764      	b.n	8006682 <_printf_float+0xc2>
 80067b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067bc:	f240 80e0 	bls.w	8006980 <_printf_float+0x3c0>
 80067c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067c4:	2200      	movs	r2, #0
 80067c6:	2300      	movs	r3, #0
 80067c8:	f7fa f986 	bl	8000ad8 <__aeabi_dcmpeq>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d034      	beq.n	800683a <_printf_float+0x27a>
 80067d0:	4a37      	ldr	r2, [pc, #220]	; (80068b0 <_printf_float+0x2f0>)
 80067d2:	2301      	movs	r3, #1
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af51 	beq.w	8006682 <_printf_float+0xc2>
 80067e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e4:	429a      	cmp	r2, r3
 80067e6:	db02      	blt.n	80067ee <_printf_float+0x22e>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	07d8      	lsls	r0, r3, #31
 80067ec:	d510      	bpl.n	8006810 <_printf_float+0x250>
 80067ee:	ee18 3a10 	vmov	r3, s16
 80067f2:	4652      	mov	r2, sl
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af41 	beq.w	8006682 <_printf_float+0xc2>
 8006800:	f04f 0800 	mov.w	r8, #0
 8006804:	f104 091a 	add.w	r9, r4, #26
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	3b01      	subs	r3, #1
 800680c:	4543      	cmp	r3, r8
 800680e:	dc09      	bgt.n	8006824 <_printf_float+0x264>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	f100 8105 	bmi.w	8006a22 <_printf_float+0x462>
 8006818:	68e0      	ldr	r0, [r4, #12]
 800681a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800681c:	4298      	cmp	r0, r3
 800681e:	bfb8      	it	lt
 8006820:	4618      	movlt	r0, r3
 8006822:	e730      	b.n	8006686 <_printf_float+0xc6>
 8006824:	2301      	movs	r3, #1
 8006826:	464a      	mov	r2, r9
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af27 	beq.w	8006682 <_printf_float+0xc2>
 8006834:	f108 0801 	add.w	r8, r8, #1
 8006838:	e7e6      	b.n	8006808 <_printf_float+0x248>
 800683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	dc39      	bgt.n	80068b4 <_printf_float+0x2f4>
 8006840:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <_printf_float+0x2f0>)
 8006842:	2301      	movs	r3, #1
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af19 	beq.w	8006682 <_printf_float+0xc2>
 8006850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006854:	4313      	orrs	r3, r2
 8006856:	d102      	bne.n	800685e <_printf_float+0x29e>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	07d9      	lsls	r1, r3, #31
 800685c:	d5d8      	bpl.n	8006810 <_printf_float+0x250>
 800685e:	ee18 3a10 	vmov	r3, s16
 8006862:	4652      	mov	r2, sl
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f af09 	beq.w	8006682 <_printf_float+0xc2>
 8006870:	f04f 0900 	mov.w	r9, #0
 8006874:	f104 0a1a 	add.w	sl, r4, #26
 8006878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687a:	425b      	negs	r3, r3
 800687c:	454b      	cmp	r3, r9
 800687e:	dc01      	bgt.n	8006884 <_printf_float+0x2c4>
 8006880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006882:	e792      	b.n	80067aa <_printf_float+0x1ea>
 8006884:	2301      	movs	r3, #1
 8006886:	4652      	mov	r2, sl
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f aef7 	beq.w	8006682 <_printf_float+0xc2>
 8006894:	f109 0901 	add.w	r9, r9, #1
 8006898:	e7ee      	b.n	8006878 <_printf_float+0x2b8>
 800689a:	bf00      	nop
 800689c:	7fefffff 	.word	0x7fefffff
 80068a0:	0800ae3c 	.word	0x0800ae3c
 80068a4:	0800ae40 	.word	0x0800ae40
 80068a8:	0800ae48 	.word	0x0800ae48
 80068ac:	0800ae44 	.word	0x0800ae44
 80068b0:	0800ae4c 	.word	0x0800ae4c
 80068b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b8:	429a      	cmp	r2, r3
 80068ba:	bfa8      	it	ge
 80068bc:	461a      	movge	r2, r3
 80068be:	2a00      	cmp	r2, #0
 80068c0:	4691      	mov	r9, r2
 80068c2:	dc37      	bgt.n	8006934 <_printf_float+0x374>
 80068c4:	f04f 0b00 	mov.w	fp, #0
 80068c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068cc:	f104 021a 	add.w	r2, r4, #26
 80068d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	eba3 0309 	sub.w	r3, r3, r9
 80068d8:	455b      	cmp	r3, fp
 80068da:	dc33      	bgt.n	8006944 <_printf_float+0x384>
 80068dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068e0:	429a      	cmp	r2, r3
 80068e2:	db3b      	blt.n	800695c <_printf_float+0x39c>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07da      	lsls	r2, r3, #31
 80068e8:	d438      	bmi.n	800695c <_printf_float+0x39c>
 80068ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ec:	9a05      	ldr	r2, [sp, #20]
 80068ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f0:	1a9a      	subs	r2, r3, r2
 80068f2:	eba3 0901 	sub.w	r9, r3, r1
 80068f6:	4591      	cmp	r9, r2
 80068f8:	bfa8      	it	ge
 80068fa:	4691      	movge	r9, r2
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	dc35      	bgt.n	800696e <_printf_float+0x3ae>
 8006902:	f04f 0800 	mov.w	r8, #0
 8006906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690a:	f104 0a1a 	add.w	sl, r4, #26
 800690e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	eba3 0309 	sub.w	r3, r3, r9
 8006918:	4543      	cmp	r3, r8
 800691a:	f77f af79 	ble.w	8006810 <_printf_float+0x250>
 800691e:	2301      	movs	r3, #1
 8006920:	4652      	mov	r2, sl
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f aeaa 	beq.w	8006682 <_printf_float+0xc2>
 800692e:	f108 0801 	add.w	r8, r8, #1
 8006932:	e7ec      	b.n	800690e <_printf_float+0x34e>
 8006934:	4613      	mov	r3, r2
 8006936:	4631      	mov	r1, r6
 8006938:	4642      	mov	r2, r8
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	d1c0      	bne.n	80068c4 <_printf_float+0x304>
 8006942:	e69e      	b.n	8006682 <_printf_float+0xc2>
 8006944:	2301      	movs	r3, #1
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	9205      	str	r2, [sp, #20]
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f ae97 	beq.w	8006682 <_printf_float+0xc2>
 8006954:	9a05      	ldr	r2, [sp, #20]
 8006956:	f10b 0b01 	add.w	fp, fp, #1
 800695a:	e7b9      	b.n	80068d0 <_printf_float+0x310>
 800695c:	ee18 3a10 	vmov	r3, s16
 8006960:	4652      	mov	r2, sl
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	d1be      	bne.n	80068ea <_printf_float+0x32a>
 800696c:	e689      	b.n	8006682 <_printf_float+0xc2>
 800696e:	9a05      	ldr	r2, [sp, #20]
 8006970:	464b      	mov	r3, r9
 8006972:	4442      	add	r2, r8
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	d1c1      	bne.n	8006902 <_printf_float+0x342>
 800697e:	e680      	b.n	8006682 <_printf_float+0xc2>
 8006980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006982:	2a01      	cmp	r2, #1
 8006984:	dc01      	bgt.n	800698a <_printf_float+0x3ca>
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d538      	bpl.n	80069fc <_printf_float+0x43c>
 800698a:	2301      	movs	r3, #1
 800698c:	4642      	mov	r2, r8
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	47b8      	blx	r7
 8006994:	3001      	adds	r0, #1
 8006996:	f43f ae74 	beq.w	8006682 <_printf_float+0xc2>
 800699a:	ee18 3a10 	vmov	r3, s16
 800699e:	4652      	mov	r2, sl
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f ae6b 	beq.w	8006682 <_printf_float+0xc2>
 80069ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	f7fa f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80069b8:	b9d8      	cbnz	r0, 80069f2 <_printf_float+0x432>
 80069ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069bc:	f108 0201 	add.w	r2, r8, #1
 80069c0:	3b01      	subs	r3, #1
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	d10e      	bne.n	80069ea <_printf_float+0x42a>
 80069cc:	e659      	b.n	8006682 <_printf_float+0xc2>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4652      	mov	r2, sl
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f ae52 	beq.w	8006682 <_printf_float+0xc2>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e4:	3b01      	subs	r3, #1
 80069e6:	4543      	cmp	r3, r8
 80069e8:	dcf1      	bgt.n	80069ce <_printf_float+0x40e>
 80069ea:	464b      	mov	r3, r9
 80069ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069f0:	e6dc      	b.n	80067ac <_printf_float+0x1ec>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	f104 0a1a 	add.w	sl, r4, #26
 80069fa:	e7f2      	b.n	80069e2 <_printf_float+0x422>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4642      	mov	r2, r8
 8006a00:	e7df      	b.n	80069c2 <_printf_float+0x402>
 8006a02:	2301      	movs	r3, #1
 8006a04:	464a      	mov	r2, r9
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f ae38 	beq.w	8006682 <_printf_float+0xc2>
 8006a12:	f108 0801 	add.w	r8, r8, #1
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a1a:	1a5b      	subs	r3, r3, r1
 8006a1c:	4543      	cmp	r3, r8
 8006a1e:	dcf0      	bgt.n	8006a02 <_printf_float+0x442>
 8006a20:	e6fa      	b.n	8006818 <_printf_float+0x258>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f104 0919 	add.w	r9, r4, #25
 8006a2a:	e7f4      	b.n	8006a16 <_printf_float+0x456>

08006a2c <_printf_common>:
 8006a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	4616      	mov	r6, r2
 8006a32:	4699      	mov	r9, r3
 8006a34:	688a      	ldr	r2, [r1, #8]
 8006a36:	690b      	ldr	r3, [r1, #16]
 8006a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	bfb8      	it	lt
 8006a40:	4613      	movlt	r3, r2
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a48:	4607      	mov	r7, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	b10a      	cbz	r2, 8006a52 <_printf_common+0x26>
 8006a4e:	3301      	adds	r3, #1
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	0699      	lsls	r1, r3, #26
 8006a56:	bf42      	ittt	mi
 8006a58:	6833      	ldrmi	r3, [r6, #0]
 8006a5a:	3302      	addmi	r3, #2
 8006a5c:	6033      	strmi	r3, [r6, #0]
 8006a5e:	6825      	ldr	r5, [r4, #0]
 8006a60:	f015 0506 	ands.w	r5, r5, #6
 8006a64:	d106      	bne.n	8006a74 <_printf_common+0x48>
 8006a66:	f104 0a19 	add.w	sl, r4, #25
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	6832      	ldr	r2, [r6, #0]
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	dc26      	bgt.n	8006ac2 <_printf_common+0x96>
 8006a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a78:	1e13      	subs	r3, r2, #0
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	bf18      	it	ne
 8006a7e:	2301      	movne	r3, #1
 8006a80:	0692      	lsls	r2, r2, #26
 8006a82:	d42b      	bmi.n	8006adc <_printf_common+0xb0>
 8006a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a88:	4649      	mov	r1, r9
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	47c0      	blx	r8
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d01e      	beq.n	8006ad0 <_printf_common+0xa4>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	68e5      	ldr	r5, [r4, #12]
 8006a96:	6832      	ldr	r2, [r6, #0]
 8006a98:	f003 0306 	and.w	r3, r3, #6
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	bf08      	it	eq
 8006aa0:	1aad      	subeq	r5, r5, r2
 8006aa2:	68a3      	ldr	r3, [r4, #8]
 8006aa4:	6922      	ldr	r2, [r4, #16]
 8006aa6:	bf0c      	ite	eq
 8006aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aac:	2500      	movne	r5, #0
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	bfc4      	itt	gt
 8006ab2:	1a9b      	subgt	r3, r3, r2
 8006ab4:	18ed      	addgt	r5, r5, r3
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	341a      	adds	r4, #26
 8006aba:	42b5      	cmp	r5, r6
 8006abc:	d11a      	bne.n	8006af4 <_printf_common+0xc8>
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e008      	b.n	8006ad4 <_printf_common+0xa8>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	4638      	mov	r0, r7
 8006aca:	47c0      	blx	r8
 8006acc:	3001      	adds	r0, #1
 8006ace:	d103      	bne.n	8006ad8 <_printf_common+0xac>
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad8:	3501      	adds	r5, #1
 8006ada:	e7c6      	b.n	8006a6a <_printf_common+0x3e>
 8006adc:	18e1      	adds	r1, r4, r3
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	2030      	movs	r0, #48	; 0x30
 8006ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ae6:	4422      	add	r2, r4
 8006ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006af0:	3302      	adds	r3, #2
 8006af2:	e7c7      	b.n	8006a84 <_printf_common+0x58>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4622      	mov	r2, r4
 8006af8:	4649      	mov	r1, r9
 8006afa:	4638      	mov	r0, r7
 8006afc:	47c0      	blx	r8
 8006afe:	3001      	adds	r0, #1
 8006b00:	d0e6      	beq.n	8006ad0 <_printf_common+0xa4>
 8006b02:	3601      	adds	r6, #1
 8006b04:	e7d9      	b.n	8006aba <_printf_common+0x8e>
	...

08006b08 <_printf_i>:
 8006b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	7e0f      	ldrb	r7, [r1, #24]
 8006b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b10:	2f78      	cmp	r7, #120	; 0x78
 8006b12:	4691      	mov	r9, r2
 8006b14:	4680      	mov	r8, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	469a      	mov	sl, r3
 8006b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b1e:	d807      	bhi.n	8006b30 <_printf_i+0x28>
 8006b20:	2f62      	cmp	r7, #98	; 0x62
 8006b22:	d80a      	bhi.n	8006b3a <_printf_i+0x32>
 8006b24:	2f00      	cmp	r7, #0
 8006b26:	f000 80d8 	beq.w	8006cda <_printf_i+0x1d2>
 8006b2a:	2f58      	cmp	r7, #88	; 0x58
 8006b2c:	f000 80a3 	beq.w	8006c76 <_printf_i+0x16e>
 8006b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b38:	e03a      	b.n	8006bb0 <_printf_i+0xa8>
 8006b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b3e:	2b15      	cmp	r3, #21
 8006b40:	d8f6      	bhi.n	8006b30 <_printf_i+0x28>
 8006b42:	a101      	add	r1, pc, #4	; (adr r1, 8006b48 <_printf_i+0x40>)
 8006b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b48:	08006ba1 	.word	0x08006ba1
 8006b4c:	08006bb5 	.word	0x08006bb5
 8006b50:	08006b31 	.word	0x08006b31
 8006b54:	08006b31 	.word	0x08006b31
 8006b58:	08006b31 	.word	0x08006b31
 8006b5c:	08006b31 	.word	0x08006b31
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006b31 	.word	0x08006b31
 8006b68:	08006b31 	.word	0x08006b31
 8006b6c:	08006b31 	.word	0x08006b31
 8006b70:	08006b31 	.word	0x08006b31
 8006b74:	08006cc1 	.word	0x08006cc1
 8006b78:	08006be5 	.word	0x08006be5
 8006b7c:	08006ca3 	.word	0x08006ca3
 8006b80:	08006b31 	.word	0x08006b31
 8006b84:	08006b31 	.word	0x08006b31
 8006b88:	08006ce3 	.word	0x08006ce3
 8006b8c:	08006b31 	.word	0x08006b31
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006b31 	.word	0x08006b31
 8006b98:	08006b31 	.word	0x08006b31
 8006b9c:	08006cab 	.word	0x08006cab
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	1d1a      	adds	r2, r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	602a      	str	r2, [r5, #0]
 8006ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0a3      	b.n	8006cfc <_printf_i+0x1f4>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	6829      	ldr	r1, [r5, #0]
 8006bb8:	0606      	lsls	r6, r0, #24
 8006bba:	f101 0304 	add.w	r3, r1, #4
 8006bbe:	d50a      	bpl.n	8006bd6 <_printf_i+0xce>
 8006bc0:	680e      	ldr	r6, [r1, #0]
 8006bc2:	602b      	str	r3, [r5, #0]
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	da03      	bge.n	8006bd0 <_printf_i+0xc8>
 8006bc8:	232d      	movs	r3, #45	; 0x2d
 8006bca:	4276      	negs	r6, r6
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd0:	485e      	ldr	r0, [pc, #376]	; (8006d4c <_printf_i+0x244>)
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	e019      	b.n	8006c0a <_printf_i+0x102>
 8006bd6:	680e      	ldr	r6, [r1, #0]
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bde:	bf18      	it	ne
 8006be0:	b236      	sxthne	r6, r6
 8006be2:	e7ef      	b.n	8006bc4 <_printf_i+0xbc>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	6820      	ldr	r0, [r4, #0]
 8006be8:	1d19      	adds	r1, r3, #4
 8006bea:	6029      	str	r1, [r5, #0]
 8006bec:	0601      	lsls	r1, r0, #24
 8006bee:	d501      	bpl.n	8006bf4 <_printf_i+0xec>
 8006bf0:	681e      	ldr	r6, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <_printf_i+0xf2>
 8006bf4:	0646      	lsls	r6, r0, #25
 8006bf6:	d5fb      	bpl.n	8006bf0 <_printf_i+0xe8>
 8006bf8:	881e      	ldrh	r6, [r3, #0]
 8006bfa:	4854      	ldr	r0, [pc, #336]	; (8006d4c <_printf_i+0x244>)
 8006bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8006bfe:	bf0c      	ite	eq
 8006c00:	2308      	moveq	r3, #8
 8006c02:	230a      	movne	r3, #10
 8006c04:	2100      	movs	r1, #0
 8006c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c0a:	6865      	ldr	r5, [r4, #4]
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	bfa2      	ittt	ge
 8006c12:	6821      	ldrge	r1, [r4, #0]
 8006c14:	f021 0104 	bicge.w	r1, r1, #4
 8006c18:	6021      	strge	r1, [r4, #0]
 8006c1a:	b90e      	cbnz	r6, 8006c20 <_printf_i+0x118>
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	d04d      	beq.n	8006cbc <_printf_i+0x1b4>
 8006c20:	4615      	mov	r5, r2
 8006c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c26:	fb03 6711 	mls	r7, r3, r1, r6
 8006c2a:	5dc7      	ldrb	r7, [r0, r7]
 8006c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c30:	4637      	mov	r7, r6
 8006c32:	42bb      	cmp	r3, r7
 8006c34:	460e      	mov	r6, r1
 8006c36:	d9f4      	bls.n	8006c22 <_printf_i+0x11a>
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d10b      	bne.n	8006c54 <_printf_i+0x14c>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	07de      	lsls	r6, r3, #31
 8006c40:	d508      	bpl.n	8006c54 <_printf_i+0x14c>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	6861      	ldr	r1, [r4, #4]
 8006c46:	4299      	cmp	r1, r3
 8006c48:	bfde      	ittt	le
 8006c4a:	2330      	movle	r3, #48	; 0x30
 8006c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c54:	1b52      	subs	r2, r2, r5
 8006c56:	6122      	str	r2, [r4, #16]
 8006c58:	f8cd a000 	str.w	sl, [sp]
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	aa03      	add	r2, sp, #12
 8006c60:	4621      	mov	r1, r4
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fee2 	bl	8006a2c <_printf_common>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d14c      	bne.n	8006d06 <_printf_i+0x1fe>
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c70:	b004      	add	sp, #16
 8006c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c76:	4835      	ldr	r0, [pc, #212]	; (8006d4c <_printf_i+0x244>)
 8006c78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c7c:	6829      	ldr	r1, [r5, #0]
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c84:	6029      	str	r1, [r5, #0]
 8006c86:	061d      	lsls	r5, r3, #24
 8006c88:	d514      	bpl.n	8006cb4 <_printf_i+0x1ac>
 8006c8a:	07df      	lsls	r7, r3, #31
 8006c8c:	bf44      	itt	mi
 8006c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c92:	6023      	strmi	r3, [r4, #0]
 8006c94:	b91e      	cbnz	r6, 8006c9e <_printf_i+0x196>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	f023 0320 	bic.w	r3, r3, #32
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	e7b0      	b.n	8006c04 <_printf_i+0xfc>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f043 0320 	orr.w	r3, r3, #32
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	2378      	movs	r3, #120	; 0x78
 8006cac:	4828      	ldr	r0, [pc, #160]	; (8006d50 <_printf_i+0x248>)
 8006cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cb2:	e7e3      	b.n	8006c7c <_printf_i+0x174>
 8006cb4:	0659      	lsls	r1, r3, #25
 8006cb6:	bf48      	it	mi
 8006cb8:	b2b6      	uxthmi	r6, r6
 8006cba:	e7e6      	b.n	8006c8a <_printf_i+0x182>
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	e7bb      	b.n	8006c38 <_printf_i+0x130>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	6826      	ldr	r6, [r4, #0]
 8006cc4:	6961      	ldr	r1, [r4, #20]
 8006cc6:	1d18      	adds	r0, r3, #4
 8006cc8:	6028      	str	r0, [r5, #0]
 8006cca:	0635      	lsls	r5, r6, #24
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	d501      	bpl.n	8006cd4 <_printf_i+0x1cc>
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	e002      	b.n	8006cda <_printf_i+0x1d2>
 8006cd4:	0670      	lsls	r0, r6, #25
 8006cd6:	d5fb      	bpl.n	8006cd0 <_printf_i+0x1c8>
 8006cd8:	8019      	strh	r1, [r3, #0]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	4615      	mov	r5, r2
 8006ce0:	e7ba      	b.n	8006c58 <_printf_i+0x150>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	1d1a      	adds	r2, r3, #4
 8006ce6:	602a      	str	r2, [r5, #0]
 8006ce8:	681d      	ldr	r5, [r3, #0]
 8006cea:	6862      	ldr	r2, [r4, #4]
 8006cec:	2100      	movs	r1, #0
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7f9 fa7e 	bl	80001f0 <memchr>
 8006cf4:	b108      	cbz	r0, 8006cfa <_printf_i+0x1f2>
 8006cf6:	1b40      	subs	r0, r0, r5
 8006cf8:	6060      	str	r0, [r4, #4]
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d04:	e7a8      	b.n	8006c58 <_printf_i+0x150>
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	47d0      	blx	sl
 8006d10:	3001      	adds	r0, #1
 8006d12:	d0ab      	beq.n	8006c6c <_printf_i+0x164>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	079b      	lsls	r3, r3, #30
 8006d18:	d413      	bmi.n	8006d42 <_printf_i+0x23a>
 8006d1a:	68e0      	ldr	r0, [r4, #12]
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	4298      	cmp	r0, r3
 8006d20:	bfb8      	it	lt
 8006d22:	4618      	movlt	r0, r3
 8006d24:	e7a4      	b.n	8006c70 <_printf_i+0x168>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4632      	mov	r2, r6
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	47d0      	blx	sl
 8006d30:	3001      	adds	r0, #1
 8006d32:	d09b      	beq.n	8006c6c <_printf_i+0x164>
 8006d34:	3501      	adds	r5, #1
 8006d36:	68e3      	ldr	r3, [r4, #12]
 8006d38:	9903      	ldr	r1, [sp, #12]
 8006d3a:	1a5b      	subs	r3, r3, r1
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	dcf2      	bgt.n	8006d26 <_printf_i+0x21e>
 8006d40:	e7eb      	b.n	8006d1a <_printf_i+0x212>
 8006d42:	2500      	movs	r5, #0
 8006d44:	f104 0619 	add.w	r6, r4, #25
 8006d48:	e7f5      	b.n	8006d36 <_printf_i+0x22e>
 8006d4a:	bf00      	nop
 8006d4c:	0800ae4e 	.word	0x0800ae4e
 8006d50:	0800ae5f 	.word	0x0800ae5f

08006d54 <_scanf_float>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	4617      	mov	r7, r2
 8006d5c:	9303      	str	r3, [sp, #12]
 8006d5e:	688b      	ldr	r3, [r1, #8]
 8006d60:	1e5a      	subs	r2, r3, #1
 8006d62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d66:	bf83      	ittte	hi
 8006d68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006d6c:	195b      	addhi	r3, r3, r5
 8006d6e:	9302      	strhi	r3, [sp, #8]
 8006d70:	2300      	movls	r3, #0
 8006d72:	bf86      	itte	hi
 8006d74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006d78:	608b      	strhi	r3, [r1, #8]
 8006d7a:	9302      	strls	r3, [sp, #8]
 8006d7c:	680b      	ldr	r3, [r1, #0]
 8006d7e:	468b      	mov	fp, r1
 8006d80:	2500      	movs	r5, #0
 8006d82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d86:	f84b 3b1c 	str.w	r3, [fp], #28
 8006d8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d8e:	4680      	mov	r8, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	465e      	mov	r6, fp
 8006d94:	46aa      	mov	sl, r5
 8006d96:	46a9      	mov	r9, r5
 8006d98:	9501      	str	r5, [sp, #4]
 8006d9a:	68a2      	ldr	r2, [r4, #8]
 8006d9c:	b152      	cbz	r2, 8006db4 <_scanf_float+0x60>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b4e      	cmp	r3, #78	; 0x4e
 8006da4:	d864      	bhi.n	8006e70 <_scanf_float+0x11c>
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d83c      	bhi.n	8006e24 <_scanf_float+0xd0>
 8006daa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006dae:	b2c8      	uxtb	r0, r1
 8006db0:	280e      	cmp	r0, #14
 8006db2:	d93a      	bls.n	8006e2a <_scanf_float+0xd6>
 8006db4:	f1b9 0f00 	cmp.w	r9, #0
 8006db8:	d003      	beq.n	8006dc2 <_scanf_float+0x6e>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006dc6:	f1ba 0f01 	cmp.w	sl, #1
 8006dca:	f200 8113 	bhi.w	8006ff4 <_scanf_float+0x2a0>
 8006dce:	455e      	cmp	r6, fp
 8006dd0:	f200 8105 	bhi.w	8006fde <_scanf_float+0x28a>
 8006dd4:	2501      	movs	r5, #1
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	b007      	add	sp, #28
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006de2:	2a0d      	cmp	r2, #13
 8006de4:	d8e6      	bhi.n	8006db4 <_scanf_float+0x60>
 8006de6:	a101      	add	r1, pc, #4	; (adr r1, 8006dec <_scanf_float+0x98>)
 8006de8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006dec:	08006f2b 	.word	0x08006f2b
 8006df0:	08006db5 	.word	0x08006db5
 8006df4:	08006db5 	.word	0x08006db5
 8006df8:	08006db5 	.word	0x08006db5
 8006dfc:	08006f8b 	.word	0x08006f8b
 8006e00:	08006f63 	.word	0x08006f63
 8006e04:	08006db5 	.word	0x08006db5
 8006e08:	08006db5 	.word	0x08006db5
 8006e0c:	08006f39 	.word	0x08006f39
 8006e10:	08006db5 	.word	0x08006db5
 8006e14:	08006db5 	.word	0x08006db5
 8006e18:	08006db5 	.word	0x08006db5
 8006e1c:	08006db5 	.word	0x08006db5
 8006e20:	08006ef1 	.word	0x08006ef1
 8006e24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e28:	e7db      	b.n	8006de2 <_scanf_float+0x8e>
 8006e2a:	290e      	cmp	r1, #14
 8006e2c:	d8c2      	bhi.n	8006db4 <_scanf_float+0x60>
 8006e2e:	a001      	add	r0, pc, #4	; (adr r0, 8006e34 <_scanf_float+0xe0>)
 8006e30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e34:	08006ee3 	.word	0x08006ee3
 8006e38:	08006db5 	.word	0x08006db5
 8006e3c:	08006ee3 	.word	0x08006ee3
 8006e40:	08006f77 	.word	0x08006f77
 8006e44:	08006db5 	.word	0x08006db5
 8006e48:	08006e91 	.word	0x08006e91
 8006e4c:	08006ecd 	.word	0x08006ecd
 8006e50:	08006ecd 	.word	0x08006ecd
 8006e54:	08006ecd 	.word	0x08006ecd
 8006e58:	08006ecd 	.word	0x08006ecd
 8006e5c:	08006ecd 	.word	0x08006ecd
 8006e60:	08006ecd 	.word	0x08006ecd
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006ecd 	.word	0x08006ecd
 8006e6c:	08006ecd 	.word	0x08006ecd
 8006e70:	2b6e      	cmp	r3, #110	; 0x6e
 8006e72:	d809      	bhi.n	8006e88 <_scanf_float+0x134>
 8006e74:	2b60      	cmp	r3, #96	; 0x60
 8006e76:	d8b2      	bhi.n	8006dde <_scanf_float+0x8a>
 8006e78:	2b54      	cmp	r3, #84	; 0x54
 8006e7a:	d077      	beq.n	8006f6c <_scanf_float+0x218>
 8006e7c:	2b59      	cmp	r3, #89	; 0x59
 8006e7e:	d199      	bne.n	8006db4 <_scanf_float+0x60>
 8006e80:	2d07      	cmp	r5, #7
 8006e82:	d197      	bne.n	8006db4 <_scanf_float+0x60>
 8006e84:	2508      	movs	r5, #8
 8006e86:	e029      	b.n	8006edc <_scanf_float+0x188>
 8006e88:	2b74      	cmp	r3, #116	; 0x74
 8006e8a:	d06f      	beq.n	8006f6c <_scanf_float+0x218>
 8006e8c:	2b79      	cmp	r3, #121	; 0x79
 8006e8e:	e7f6      	b.n	8006e7e <_scanf_float+0x12a>
 8006e90:	6821      	ldr	r1, [r4, #0]
 8006e92:	05c8      	lsls	r0, r1, #23
 8006e94:	d51a      	bpl.n	8006ecc <_scanf_float+0x178>
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e9c:	6021      	str	r1, [r4, #0]
 8006e9e:	f109 0901 	add.w	r9, r9, #1
 8006ea2:	b11b      	cbz	r3, 8006eac <_scanf_float+0x158>
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	3201      	adds	r2, #1
 8006ea8:	9302      	str	r3, [sp, #8]
 8006eaa:	60a2      	str	r2, [r4, #8]
 8006eac:	68a3      	ldr	r3, [r4, #8]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	60a3      	str	r3, [r4, #8]
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	6123      	str	r3, [r4, #16]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	f340 8084 	ble.w	8006fcc <_scanf_float+0x278>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	e766      	b.n	8006d9a <_scanf_float+0x46>
 8006ecc:	eb1a 0f05 	cmn.w	sl, r5
 8006ed0:	f47f af70 	bne.w	8006db4 <_scanf_float+0x60>
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ee0:	e7e4      	b.n	8006eac <_scanf_float+0x158>
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	0610      	lsls	r0, r2, #24
 8006ee6:	f57f af65 	bpl.w	8006db4 <_scanf_float+0x60>
 8006eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eee:	e7f4      	b.n	8006eda <_scanf_float+0x186>
 8006ef0:	f1ba 0f00 	cmp.w	sl, #0
 8006ef4:	d10e      	bne.n	8006f14 <_scanf_float+0x1c0>
 8006ef6:	f1b9 0f00 	cmp.w	r9, #0
 8006efa:	d10e      	bne.n	8006f1a <_scanf_float+0x1c6>
 8006efc:	6822      	ldr	r2, [r4, #0]
 8006efe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f06:	d108      	bne.n	8006f1a <_scanf_float+0x1c6>
 8006f08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f0c:	6022      	str	r2, [r4, #0]
 8006f0e:	f04f 0a01 	mov.w	sl, #1
 8006f12:	e7e3      	b.n	8006edc <_scanf_float+0x188>
 8006f14:	f1ba 0f02 	cmp.w	sl, #2
 8006f18:	d055      	beq.n	8006fc6 <_scanf_float+0x272>
 8006f1a:	2d01      	cmp	r5, #1
 8006f1c:	d002      	beq.n	8006f24 <_scanf_float+0x1d0>
 8006f1e:	2d04      	cmp	r5, #4
 8006f20:	f47f af48 	bne.w	8006db4 <_scanf_float+0x60>
 8006f24:	3501      	adds	r5, #1
 8006f26:	b2ed      	uxtb	r5, r5
 8006f28:	e7d8      	b.n	8006edc <_scanf_float+0x188>
 8006f2a:	f1ba 0f01 	cmp.w	sl, #1
 8006f2e:	f47f af41 	bne.w	8006db4 <_scanf_float+0x60>
 8006f32:	f04f 0a02 	mov.w	sl, #2
 8006f36:	e7d1      	b.n	8006edc <_scanf_float+0x188>
 8006f38:	b97d      	cbnz	r5, 8006f5a <_scanf_float+0x206>
 8006f3a:	f1b9 0f00 	cmp.w	r9, #0
 8006f3e:	f47f af3c 	bne.w	8006dba <_scanf_float+0x66>
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f4c:	f47f af39 	bne.w	8006dc2 <_scanf_float+0x6e>
 8006f50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	2501      	movs	r5, #1
 8006f58:	e7c0      	b.n	8006edc <_scanf_float+0x188>
 8006f5a:	2d03      	cmp	r5, #3
 8006f5c:	d0e2      	beq.n	8006f24 <_scanf_float+0x1d0>
 8006f5e:	2d05      	cmp	r5, #5
 8006f60:	e7de      	b.n	8006f20 <_scanf_float+0x1cc>
 8006f62:	2d02      	cmp	r5, #2
 8006f64:	f47f af26 	bne.w	8006db4 <_scanf_float+0x60>
 8006f68:	2503      	movs	r5, #3
 8006f6a:	e7b7      	b.n	8006edc <_scanf_float+0x188>
 8006f6c:	2d06      	cmp	r5, #6
 8006f6e:	f47f af21 	bne.w	8006db4 <_scanf_float+0x60>
 8006f72:	2507      	movs	r5, #7
 8006f74:	e7b2      	b.n	8006edc <_scanf_float+0x188>
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	0591      	lsls	r1, r2, #22
 8006f7a:	f57f af1b 	bpl.w	8006db4 <_scanf_float+0x60>
 8006f7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006f82:	6022      	str	r2, [r4, #0]
 8006f84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f88:	e7a8      	b.n	8006edc <_scanf_float+0x188>
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006f90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006f94:	d006      	beq.n	8006fa4 <_scanf_float+0x250>
 8006f96:	0550      	lsls	r0, r2, #21
 8006f98:	f57f af0c 	bpl.w	8006db4 <_scanf_float+0x60>
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	f43f af0f 	beq.w	8006dc2 <_scanf_float+0x6e>
 8006fa4:	0591      	lsls	r1, r2, #22
 8006fa6:	bf58      	it	pl
 8006fa8:	9901      	ldrpl	r1, [sp, #4]
 8006faa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fae:	bf58      	it	pl
 8006fb0:	eba9 0101 	subpl.w	r1, r9, r1
 8006fb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006fb8:	bf58      	it	pl
 8006fba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	f04f 0900 	mov.w	r9, #0
 8006fc4:	e78a      	b.n	8006edc <_scanf_float+0x188>
 8006fc6:	f04f 0a03 	mov.w	sl, #3
 8006fca:	e787      	b.n	8006edc <_scanf_float+0x188>
 8006fcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4798      	blx	r3
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f43f aedf 	beq.w	8006d9a <_scanf_float+0x46>
 8006fdc:	e6ea      	b.n	8006db4 <_scanf_float+0x60>
 8006fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fe6:	463a      	mov	r2, r7
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4798      	blx	r3
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	e6ec      	b.n	8006dce <_scanf_float+0x7a>
 8006ff4:	1e6b      	subs	r3, r5, #1
 8006ff6:	2b06      	cmp	r3, #6
 8006ff8:	d825      	bhi.n	8007046 <_scanf_float+0x2f2>
 8006ffa:	2d02      	cmp	r5, #2
 8006ffc:	d836      	bhi.n	800706c <_scanf_float+0x318>
 8006ffe:	455e      	cmp	r6, fp
 8007000:	f67f aee8 	bls.w	8006dd4 <_scanf_float+0x80>
 8007004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007008:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800700c:	463a      	mov	r2, r7
 800700e:	4640      	mov	r0, r8
 8007010:	4798      	blx	r3
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	3b01      	subs	r3, #1
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	e7f1      	b.n	8006ffe <_scanf_float+0x2aa>
 800701a:	9802      	ldr	r0, [sp, #8]
 800701c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007020:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007024:	9002      	str	r0, [sp, #8]
 8007026:	463a      	mov	r2, r7
 8007028:	4640      	mov	r0, r8
 800702a:	4798      	blx	r3
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	3b01      	subs	r3, #1
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007036:	fa5f fa8a 	uxtb.w	sl, sl
 800703a:	f1ba 0f02 	cmp.w	sl, #2
 800703e:	d1ec      	bne.n	800701a <_scanf_float+0x2c6>
 8007040:	3d03      	subs	r5, #3
 8007042:	b2ed      	uxtb	r5, r5
 8007044:	1b76      	subs	r6, r6, r5
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	05da      	lsls	r2, r3, #23
 800704a:	d52f      	bpl.n	80070ac <_scanf_float+0x358>
 800704c:	055b      	lsls	r3, r3, #21
 800704e:	d510      	bpl.n	8007072 <_scanf_float+0x31e>
 8007050:	455e      	cmp	r6, fp
 8007052:	f67f aebf 	bls.w	8006dd4 <_scanf_float+0x80>
 8007056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800705a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800705e:	463a      	mov	r2, r7
 8007060:	4640      	mov	r0, r8
 8007062:	4798      	blx	r3
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	3b01      	subs	r3, #1
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	e7f1      	b.n	8007050 <_scanf_float+0x2fc>
 800706c:	46aa      	mov	sl, r5
 800706e:	9602      	str	r6, [sp, #8]
 8007070:	e7df      	b.n	8007032 <_scanf_float+0x2de>
 8007072:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	2965      	cmp	r1, #101	; 0x65
 800707a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800707e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	d00c      	beq.n	80070a0 <_scanf_float+0x34c>
 8007086:	2945      	cmp	r1, #69	; 0x45
 8007088:	d00a      	beq.n	80070a0 <_scanf_float+0x34c>
 800708a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800708e:	463a      	mov	r2, r7
 8007090:	4640      	mov	r0, r8
 8007092:	4798      	blx	r3
 8007094:	6923      	ldr	r3, [r4, #16]
 8007096:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800709a:	3b01      	subs	r3, #1
 800709c:	1eb5      	subs	r5, r6, #2
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a4:	463a      	mov	r2, r7
 80070a6:	4640      	mov	r0, r8
 80070a8:	4798      	blx	r3
 80070aa:	462e      	mov	r6, r5
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	f015 0510 	ands.w	r5, r5, #16
 80070b2:	d159      	bne.n	8007168 <_scanf_float+0x414>
 80070b4:	7035      	strb	r5, [r6, #0]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c0:	d11b      	bne.n	80070fa <_scanf_float+0x3a6>
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	454b      	cmp	r3, r9
 80070c6:	eba3 0209 	sub.w	r2, r3, r9
 80070ca:	d123      	bne.n	8007114 <_scanf_float+0x3c0>
 80070cc:	2200      	movs	r2, #0
 80070ce:	4659      	mov	r1, fp
 80070d0:	4640      	mov	r0, r8
 80070d2:	f000 fe97 	bl	8007e04 <_strtod_r>
 80070d6:	6822      	ldr	r2, [r4, #0]
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	f012 0f02 	tst.w	r2, #2
 80070de:	ec57 6b10 	vmov	r6, r7, d0
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	d021      	beq.n	800712a <_scanf_float+0x3d6>
 80070e6:	9903      	ldr	r1, [sp, #12]
 80070e8:	1d1a      	adds	r2, r3, #4
 80070ea:	600a      	str	r2, [r1, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	e9c3 6700 	strd	r6, r7, [r3]
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60e3      	str	r3, [r4, #12]
 80070f8:	e66d      	b.n	8006dd6 <_scanf_float+0x82>
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0e5      	beq.n	80070cc <_scanf_float+0x378>
 8007100:	9905      	ldr	r1, [sp, #20]
 8007102:	230a      	movs	r3, #10
 8007104:	462a      	mov	r2, r5
 8007106:	3101      	adds	r1, #1
 8007108:	4640      	mov	r0, r8
 800710a:	f000 ff03 	bl	8007f14 <_strtol_r>
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	9e05      	ldr	r6, [sp, #20]
 8007112:	1ac2      	subs	r2, r0, r3
 8007114:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007118:	429e      	cmp	r6, r3
 800711a:	bf28      	it	cs
 800711c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007120:	4912      	ldr	r1, [pc, #72]	; (800716c <_scanf_float+0x418>)
 8007122:	4630      	mov	r0, r6
 8007124:	f000 f82c 	bl	8007180 <siprintf>
 8007128:	e7d0      	b.n	80070cc <_scanf_float+0x378>
 800712a:	9903      	ldr	r1, [sp, #12]
 800712c:	f012 0f04 	tst.w	r2, #4
 8007130:	f103 0204 	add.w	r2, r3, #4
 8007134:	600a      	str	r2, [r1, #0]
 8007136:	d1d9      	bne.n	80070ec <_scanf_float+0x398>
 8007138:	f8d3 8000 	ldr.w	r8, [r3]
 800713c:	ee10 2a10 	vmov	r2, s0
 8007140:	ee10 0a10 	vmov	r0, s0
 8007144:	463b      	mov	r3, r7
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 fcf8 	bl	8000b3c <__aeabi_dcmpun>
 800714c:	b128      	cbz	r0, 800715a <_scanf_float+0x406>
 800714e:	4808      	ldr	r0, [pc, #32]	; (8007170 <_scanf_float+0x41c>)
 8007150:	f000 f810 	bl	8007174 <nanf>
 8007154:	ed88 0a00 	vstr	s0, [r8]
 8007158:	e7cb      	b.n	80070f2 <_scanf_float+0x39e>
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 fd4b 	bl	8000bf8 <__aeabi_d2f>
 8007162:	f8c8 0000 	str.w	r0, [r8]
 8007166:	e7c4      	b.n	80070f2 <_scanf_float+0x39e>
 8007168:	2500      	movs	r5, #0
 800716a:	e634      	b.n	8006dd6 <_scanf_float+0x82>
 800716c:	0800ae70 	.word	0x0800ae70
 8007170:	0800b278 	.word	0x0800b278

08007174 <nanf>:
 8007174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800717c <nanf+0x8>
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	7fc00000 	.word	0x7fc00000

08007180 <siprintf>:
 8007180:	b40e      	push	{r1, r2, r3}
 8007182:	b500      	push	{lr}
 8007184:	b09c      	sub	sp, #112	; 0x70
 8007186:	ab1d      	add	r3, sp, #116	; 0x74
 8007188:	9002      	str	r0, [sp, #8]
 800718a:	9006      	str	r0, [sp, #24]
 800718c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007190:	4809      	ldr	r0, [pc, #36]	; (80071b8 <siprintf+0x38>)
 8007192:	9107      	str	r1, [sp, #28]
 8007194:	9104      	str	r1, [sp, #16]
 8007196:	4909      	ldr	r1, [pc, #36]	; (80071bc <siprintf+0x3c>)
 8007198:	f853 2b04 	ldr.w	r2, [r3], #4
 800719c:	9105      	str	r1, [sp, #20]
 800719e:	6800      	ldr	r0, [r0, #0]
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	a902      	add	r1, sp, #8
 80071a4:	f002 fee2 	bl	8009f6c <_svfiprintf_r>
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	b01c      	add	sp, #112	; 0x70
 80071b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b4:	b003      	add	sp, #12
 80071b6:	4770      	bx	lr
 80071b8:	20000010 	.word	0x20000010
 80071bc:	ffff0208 	.word	0xffff0208

080071c0 <sulp>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	460d      	mov	r5, r1
 80071c6:	ec45 4b10 	vmov	d0, r4, r5
 80071ca:	4616      	mov	r6, r2
 80071cc:	f002 fc2c 	bl	8009a28 <__ulp>
 80071d0:	ec51 0b10 	vmov	r0, r1, d0
 80071d4:	b17e      	cbz	r6, 80071f6 <sulp+0x36>
 80071d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80071da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dd09      	ble.n	80071f6 <sulp+0x36>
 80071e2:	051b      	lsls	r3, r3, #20
 80071e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071e8:	2400      	movs	r4, #0
 80071ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f7f9 fa09 	bl	8000608 <__aeabi_dmul>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}

080071f8 <_strtod_l>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	ed2d 8b02 	vpush	{d8}
 8007200:	b09d      	sub	sp, #116	; 0x74
 8007202:	461f      	mov	r7, r3
 8007204:	2300      	movs	r3, #0
 8007206:	9318      	str	r3, [sp, #96]	; 0x60
 8007208:	4ba2      	ldr	r3, [pc, #648]	; (8007494 <_strtod_l+0x29c>)
 800720a:	9213      	str	r2, [sp, #76]	; 0x4c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	4604      	mov	r4, r0
 8007212:	4618      	mov	r0, r3
 8007214:	4688      	mov	r8, r1
 8007216:	f7f8 ffe3 	bl	80001e0 <strlen>
 800721a:	f04f 0a00 	mov.w	sl, #0
 800721e:	4605      	mov	r5, r0
 8007220:	f04f 0b00 	mov.w	fp, #0
 8007224:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	2a2b      	cmp	r2, #43	; 0x2b
 800722e:	d04e      	beq.n	80072ce <_strtod_l+0xd6>
 8007230:	d83b      	bhi.n	80072aa <_strtod_l+0xb2>
 8007232:	2a0d      	cmp	r2, #13
 8007234:	d834      	bhi.n	80072a0 <_strtod_l+0xa8>
 8007236:	2a08      	cmp	r2, #8
 8007238:	d834      	bhi.n	80072a4 <_strtod_l+0xac>
 800723a:	2a00      	cmp	r2, #0
 800723c:	d03e      	beq.n	80072bc <_strtod_l+0xc4>
 800723e:	2300      	movs	r3, #0
 8007240:	930a      	str	r3, [sp, #40]	; 0x28
 8007242:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007244:	7833      	ldrb	r3, [r6, #0]
 8007246:	2b30      	cmp	r3, #48	; 0x30
 8007248:	f040 80b0 	bne.w	80073ac <_strtod_l+0x1b4>
 800724c:	7873      	ldrb	r3, [r6, #1]
 800724e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007252:	2b58      	cmp	r3, #88	; 0x58
 8007254:	d168      	bne.n	8007328 <_strtod_l+0x130>
 8007256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	ab18      	add	r3, sp, #96	; 0x60
 800725c:	9702      	str	r7, [sp, #8]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4a8d      	ldr	r2, [pc, #564]	; (8007498 <_strtod_l+0x2a0>)
 8007262:	ab19      	add	r3, sp, #100	; 0x64
 8007264:	a917      	add	r1, sp, #92	; 0x5c
 8007266:	4620      	mov	r0, r4
 8007268:	f001 fd38 	bl	8008cdc <__gethex>
 800726c:	f010 0707 	ands.w	r7, r0, #7
 8007270:	4605      	mov	r5, r0
 8007272:	d005      	beq.n	8007280 <_strtod_l+0x88>
 8007274:	2f06      	cmp	r7, #6
 8007276:	d12c      	bne.n	80072d2 <_strtod_l+0xda>
 8007278:	3601      	adds	r6, #1
 800727a:	2300      	movs	r3, #0
 800727c:	9617      	str	r6, [sp, #92]	; 0x5c
 800727e:	930a      	str	r3, [sp, #40]	; 0x28
 8007280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 8590 	bne.w	8007da8 <_strtod_l+0xbb0>
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	b1eb      	cbz	r3, 80072c8 <_strtod_l+0xd0>
 800728c:	4652      	mov	r2, sl
 800728e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007292:	ec43 2b10 	vmov	d0, r2, r3
 8007296:	b01d      	add	sp, #116	; 0x74
 8007298:	ecbd 8b02 	vpop	{d8}
 800729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a0:	2a20      	cmp	r2, #32
 80072a2:	d1cc      	bne.n	800723e <_strtod_l+0x46>
 80072a4:	3301      	adds	r3, #1
 80072a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80072a8:	e7be      	b.n	8007228 <_strtod_l+0x30>
 80072aa:	2a2d      	cmp	r2, #45	; 0x2d
 80072ac:	d1c7      	bne.n	800723e <_strtod_l+0x46>
 80072ae:	2201      	movs	r2, #1
 80072b0:	920a      	str	r2, [sp, #40]	; 0x28
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1c2      	bne.n	8007242 <_strtod_l+0x4a>
 80072bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f040 856e 	bne.w	8007da4 <_strtod_l+0xbac>
 80072c8:	4652      	mov	r2, sl
 80072ca:	465b      	mov	r3, fp
 80072cc:	e7e1      	b.n	8007292 <_strtod_l+0x9a>
 80072ce:	2200      	movs	r2, #0
 80072d0:	e7ee      	b.n	80072b0 <_strtod_l+0xb8>
 80072d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072d4:	b13a      	cbz	r2, 80072e6 <_strtod_l+0xee>
 80072d6:	2135      	movs	r1, #53	; 0x35
 80072d8:	a81a      	add	r0, sp, #104	; 0x68
 80072da:	f002 fcb0 	bl	8009c3e <__copybits>
 80072de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072e0:	4620      	mov	r0, r4
 80072e2:	f002 f86f 	bl	80093c4 <_Bfree>
 80072e6:	3f01      	subs	r7, #1
 80072e8:	2f04      	cmp	r7, #4
 80072ea:	d806      	bhi.n	80072fa <_strtod_l+0x102>
 80072ec:	e8df f007 	tbb	[pc, r7]
 80072f0:	1714030a 	.word	0x1714030a
 80072f4:	0a          	.byte	0x0a
 80072f5:	00          	.byte	0x00
 80072f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80072fa:	0728      	lsls	r0, r5, #28
 80072fc:	d5c0      	bpl.n	8007280 <_strtod_l+0x88>
 80072fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007302:	e7bd      	b.n	8007280 <_strtod_l+0x88>
 8007304:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007308:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800730a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800730e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007312:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007316:	e7f0      	b.n	80072fa <_strtod_l+0x102>
 8007318:	f8df b180 	ldr.w	fp, [pc, #384]	; 800749c <_strtod_l+0x2a4>
 800731c:	e7ed      	b.n	80072fa <_strtod_l+0x102>
 800731e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007322:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007326:	e7e8      	b.n	80072fa <_strtod_l+0x102>
 8007328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	9217      	str	r2, [sp, #92]	; 0x5c
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d0f9      	beq.n	8007328 <_strtod_l+0x130>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0a3      	beq.n	8007280 <_strtod_l+0x88>
 8007338:	2301      	movs	r3, #1
 800733a:	f04f 0900 	mov.w	r9, #0
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	f8cd 901c 	str.w	r9, [sp, #28]
 8007348:	464f      	mov	r7, r9
 800734a:	220a      	movs	r2, #10
 800734c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800734e:	7806      	ldrb	r6, [r0, #0]
 8007350:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007354:	b2d9      	uxtb	r1, r3
 8007356:	2909      	cmp	r1, #9
 8007358:	d92a      	bls.n	80073b0 <_strtod_l+0x1b8>
 800735a:	9905      	ldr	r1, [sp, #20]
 800735c:	462a      	mov	r2, r5
 800735e:	f002 ff1f 	bl	800a1a0 <strncmp>
 8007362:	b398      	cbz	r0, 80073cc <_strtod_l+0x1d4>
 8007364:	2000      	movs	r0, #0
 8007366:	4632      	mov	r2, r6
 8007368:	463d      	mov	r5, r7
 800736a:	9005      	str	r0, [sp, #20]
 800736c:	4603      	mov	r3, r0
 800736e:	2a65      	cmp	r2, #101	; 0x65
 8007370:	d001      	beq.n	8007376 <_strtod_l+0x17e>
 8007372:	2a45      	cmp	r2, #69	; 0x45
 8007374:	d118      	bne.n	80073a8 <_strtod_l+0x1b0>
 8007376:	b91d      	cbnz	r5, 8007380 <_strtod_l+0x188>
 8007378:	9a04      	ldr	r2, [sp, #16]
 800737a:	4302      	orrs	r2, r0
 800737c:	d09e      	beq.n	80072bc <_strtod_l+0xc4>
 800737e:	2500      	movs	r5, #0
 8007380:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007384:	f108 0201 	add.w	r2, r8, #1
 8007388:	9217      	str	r2, [sp, #92]	; 0x5c
 800738a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800738e:	2a2b      	cmp	r2, #43	; 0x2b
 8007390:	d075      	beq.n	800747e <_strtod_l+0x286>
 8007392:	2a2d      	cmp	r2, #45	; 0x2d
 8007394:	d07b      	beq.n	800748e <_strtod_l+0x296>
 8007396:	f04f 0c00 	mov.w	ip, #0
 800739a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800739e:	2909      	cmp	r1, #9
 80073a0:	f240 8082 	bls.w	80074a8 <_strtod_l+0x2b0>
 80073a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073a8:	2600      	movs	r6, #0
 80073aa:	e09d      	b.n	80074e8 <_strtod_l+0x2f0>
 80073ac:	2300      	movs	r3, #0
 80073ae:	e7c4      	b.n	800733a <_strtod_l+0x142>
 80073b0:	2f08      	cmp	r7, #8
 80073b2:	bfd8      	it	le
 80073b4:	9907      	ldrle	r1, [sp, #28]
 80073b6:	f100 0001 	add.w	r0, r0, #1
 80073ba:	bfda      	itte	le
 80073bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80073c0:	9307      	strle	r3, [sp, #28]
 80073c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80073c6:	3701      	adds	r7, #1
 80073c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80073ca:	e7bf      	b.n	800734c <_strtod_l+0x154>
 80073cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ce:	195a      	adds	r2, r3, r5
 80073d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80073d2:	5d5a      	ldrb	r2, [r3, r5]
 80073d4:	2f00      	cmp	r7, #0
 80073d6:	d037      	beq.n	8007448 <_strtod_l+0x250>
 80073d8:	9005      	str	r0, [sp, #20]
 80073da:	463d      	mov	r5, r7
 80073dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	d912      	bls.n	800740a <_strtod_l+0x212>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e7c2      	b.n	800736e <_strtod_l+0x176>
 80073e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80073ee:	785a      	ldrb	r2, [r3, #1]
 80073f0:	3001      	adds	r0, #1
 80073f2:	2a30      	cmp	r2, #48	; 0x30
 80073f4:	d0f8      	beq.n	80073e8 <_strtod_l+0x1f0>
 80073f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	f200 84d9 	bhi.w	8007db2 <_strtod_l+0xbba>
 8007400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007402:	9005      	str	r0, [sp, #20]
 8007404:	2000      	movs	r0, #0
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	4605      	mov	r5, r0
 800740a:	3a30      	subs	r2, #48	; 0x30
 800740c:	f100 0301 	add.w	r3, r0, #1
 8007410:	d014      	beq.n	800743c <_strtod_l+0x244>
 8007412:	9905      	ldr	r1, [sp, #20]
 8007414:	4419      	add	r1, r3
 8007416:	9105      	str	r1, [sp, #20]
 8007418:	462b      	mov	r3, r5
 800741a:	eb00 0e05 	add.w	lr, r0, r5
 800741e:	210a      	movs	r1, #10
 8007420:	4573      	cmp	r3, lr
 8007422:	d113      	bne.n	800744c <_strtod_l+0x254>
 8007424:	182b      	adds	r3, r5, r0
 8007426:	2b08      	cmp	r3, #8
 8007428:	f105 0501 	add.w	r5, r5, #1
 800742c:	4405      	add	r5, r0
 800742e:	dc1c      	bgt.n	800746a <_strtod_l+0x272>
 8007430:	9907      	ldr	r1, [sp, #28]
 8007432:	230a      	movs	r3, #10
 8007434:	fb03 2301 	mla	r3, r3, r1, r2
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	2300      	movs	r3, #0
 800743c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800743e:	1c51      	adds	r1, r2, #1
 8007440:	9117      	str	r1, [sp, #92]	; 0x5c
 8007442:	7852      	ldrb	r2, [r2, #1]
 8007444:	4618      	mov	r0, r3
 8007446:	e7c9      	b.n	80073dc <_strtod_l+0x1e4>
 8007448:	4638      	mov	r0, r7
 800744a:	e7d2      	b.n	80073f2 <_strtod_l+0x1fa>
 800744c:	2b08      	cmp	r3, #8
 800744e:	dc04      	bgt.n	800745a <_strtod_l+0x262>
 8007450:	9e07      	ldr	r6, [sp, #28]
 8007452:	434e      	muls	r6, r1
 8007454:	9607      	str	r6, [sp, #28]
 8007456:	3301      	adds	r3, #1
 8007458:	e7e2      	b.n	8007420 <_strtod_l+0x228>
 800745a:	f103 0c01 	add.w	ip, r3, #1
 800745e:	f1bc 0f10 	cmp.w	ip, #16
 8007462:	bfd8      	it	le
 8007464:	fb01 f909 	mulle.w	r9, r1, r9
 8007468:	e7f5      	b.n	8007456 <_strtod_l+0x25e>
 800746a:	2d10      	cmp	r5, #16
 800746c:	bfdc      	itt	le
 800746e:	230a      	movle	r3, #10
 8007470:	fb03 2909 	mlale	r9, r3, r9, r2
 8007474:	e7e1      	b.n	800743a <_strtod_l+0x242>
 8007476:	2300      	movs	r3, #0
 8007478:	9305      	str	r3, [sp, #20]
 800747a:	2301      	movs	r3, #1
 800747c:	e77c      	b.n	8007378 <_strtod_l+0x180>
 800747e:	f04f 0c00 	mov.w	ip, #0
 8007482:	f108 0202 	add.w	r2, r8, #2
 8007486:	9217      	str	r2, [sp, #92]	; 0x5c
 8007488:	f898 2002 	ldrb.w	r2, [r8, #2]
 800748c:	e785      	b.n	800739a <_strtod_l+0x1a2>
 800748e:	f04f 0c01 	mov.w	ip, #1
 8007492:	e7f6      	b.n	8007482 <_strtod_l+0x28a>
 8007494:	0800b0c0 	.word	0x0800b0c0
 8007498:	0800ae78 	.word	0x0800ae78
 800749c:	7ff00000 	.word	0x7ff00000
 80074a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074a2:	1c51      	adds	r1, r2, #1
 80074a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80074a6:	7852      	ldrb	r2, [r2, #1]
 80074a8:	2a30      	cmp	r2, #48	; 0x30
 80074aa:	d0f9      	beq.n	80074a0 <_strtod_l+0x2a8>
 80074ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80074b0:	2908      	cmp	r1, #8
 80074b2:	f63f af79 	bhi.w	80073a8 <_strtod_l+0x1b0>
 80074b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074bc:	9206      	str	r2, [sp, #24]
 80074be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074c0:	1c51      	adds	r1, r2, #1
 80074c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80074c4:	7852      	ldrb	r2, [r2, #1]
 80074c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80074ca:	2e09      	cmp	r6, #9
 80074cc:	d937      	bls.n	800753e <_strtod_l+0x346>
 80074ce:	9e06      	ldr	r6, [sp, #24]
 80074d0:	1b89      	subs	r1, r1, r6
 80074d2:	2908      	cmp	r1, #8
 80074d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80074d8:	dc02      	bgt.n	80074e0 <_strtod_l+0x2e8>
 80074da:	4576      	cmp	r6, lr
 80074dc:	bfa8      	it	ge
 80074de:	4676      	movge	r6, lr
 80074e0:	f1bc 0f00 	cmp.w	ip, #0
 80074e4:	d000      	beq.n	80074e8 <_strtod_l+0x2f0>
 80074e6:	4276      	negs	r6, r6
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	d14d      	bne.n	8007588 <_strtod_l+0x390>
 80074ec:	9904      	ldr	r1, [sp, #16]
 80074ee:	4301      	orrs	r1, r0
 80074f0:	f47f aec6 	bne.w	8007280 <_strtod_l+0x88>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f47f aee1 	bne.w	80072bc <_strtod_l+0xc4>
 80074fa:	2a69      	cmp	r2, #105	; 0x69
 80074fc:	d027      	beq.n	800754e <_strtod_l+0x356>
 80074fe:	dc24      	bgt.n	800754a <_strtod_l+0x352>
 8007500:	2a49      	cmp	r2, #73	; 0x49
 8007502:	d024      	beq.n	800754e <_strtod_l+0x356>
 8007504:	2a4e      	cmp	r2, #78	; 0x4e
 8007506:	f47f aed9 	bne.w	80072bc <_strtod_l+0xc4>
 800750a:	499f      	ldr	r1, [pc, #636]	; (8007788 <_strtod_l+0x590>)
 800750c:	a817      	add	r0, sp, #92	; 0x5c
 800750e:	f001 fe3d 	bl	800918c <__match>
 8007512:	2800      	cmp	r0, #0
 8007514:	f43f aed2 	beq.w	80072bc <_strtod_l+0xc4>
 8007518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b28      	cmp	r3, #40	; 0x28
 800751e:	d12d      	bne.n	800757c <_strtod_l+0x384>
 8007520:	499a      	ldr	r1, [pc, #616]	; (800778c <_strtod_l+0x594>)
 8007522:	aa1a      	add	r2, sp, #104	; 0x68
 8007524:	a817      	add	r0, sp, #92	; 0x5c
 8007526:	f001 fe45 	bl	80091b4 <__hexnan>
 800752a:	2805      	cmp	r0, #5
 800752c:	d126      	bne.n	800757c <_strtod_l+0x384>
 800752e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007530:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007534:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007538:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800753c:	e6a0      	b.n	8007280 <_strtod_l+0x88>
 800753e:	210a      	movs	r1, #10
 8007540:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007544:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007548:	e7b9      	b.n	80074be <_strtod_l+0x2c6>
 800754a:	2a6e      	cmp	r2, #110	; 0x6e
 800754c:	e7db      	b.n	8007506 <_strtod_l+0x30e>
 800754e:	4990      	ldr	r1, [pc, #576]	; (8007790 <_strtod_l+0x598>)
 8007550:	a817      	add	r0, sp, #92	; 0x5c
 8007552:	f001 fe1b 	bl	800918c <__match>
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f aeb0 	beq.w	80072bc <_strtod_l+0xc4>
 800755c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800755e:	498d      	ldr	r1, [pc, #564]	; (8007794 <_strtod_l+0x59c>)
 8007560:	3b01      	subs	r3, #1
 8007562:	a817      	add	r0, sp, #92	; 0x5c
 8007564:	9317      	str	r3, [sp, #92]	; 0x5c
 8007566:	f001 fe11 	bl	800918c <__match>
 800756a:	b910      	cbnz	r0, 8007572 <_strtod_l+0x37a>
 800756c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800756e:	3301      	adds	r3, #1
 8007570:	9317      	str	r3, [sp, #92]	; 0x5c
 8007572:	f8df b230 	ldr.w	fp, [pc, #560]	; 80077a4 <_strtod_l+0x5ac>
 8007576:	f04f 0a00 	mov.w	sl, #0
 800757a:	e681      	b.n	8007280 <_strtod_l+0x88>
 800757c:	4886      	ldr	r0, [pc, #536]	; (8007798 <_strtod_l+0x5a0>)
 800757e:	f002 fdf7 	bl	800a170 <nan>
 8007582:	ec5b ab10 	vmov	sl, fp, d0
 8007586:	e67b      	b.n	8007280 <_strtod_l+0x88>
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	9807      	ldr	r0, [sp, #28]
 800758c:	1af3      	subs	r3, r6, r3
 800758e:	2f00      	cmp	r7, #0
 8007590:	bf08      	it	eq
 8007592:	462f      	moveq	r7, r5
 8007594:	2d10      	cmp	r5, #16
 8007596:	9306      	str	r3, [sp, #24]
 8007598:	46a8      	mov	r8, r5
 800759a:	bfa8      	it	ge
 800759c:	f04f 0810 	movge.w	r8, #16
 80075a0:	f7f8 ffb8 	bl	8000514 <__aeabi_ui2d>
 80075a4:	2d09      	cmp	r5, #9
 80075a6:	4682      	mov	sl, r0
 80075a8:	468b      	mov	fp, r1
 80075aa:	dd13      	ble.n	80075d4 <_strtod_l+0x3dc>
 80075ac:	4b7b      	ldr	r3, [pc, #492]	; (800779c <_strtod_l+0x5a4>)
 80075ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4682      	mov	sl, r0
 80075bc:	4648      	mov	r0, r9
 80075be:	468b      	mov	fp, r1
 80075c0:	f7f8 ffa8 	bl	8000514 <__aeabi_ui2d>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4650      	mov	r0, sl
 80075ca:	4659      	mov	r1, fp
 80075cc:	f7f8 fe66 	bl	800029c <__adddf3>
 80075d0:	4682      	mov	sl, r0
 80075d2:	468b      	mov	fp, r1
 80075d4:	2d0f      	cmp	r5, #15
 80075d6:	dc38      	bgt.n	800764a <_strtod_l+0x452>
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f43f ae50 	beq.w	8007280 <_strtod_l+0x88>
 80075e0:	dd24      	ble.n	800762c <_strtod_l+0x434>
 80075e2:	2b16      	cmp	r3, #22
 80075e4:	dc0b      	bgt.n	80075fe <_strtod_l+0x406>
 80075e6:	496d      	ldr	r1, [pc, #436]	; (800779c <_strtod_l+0x5a4>)
 80075e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f0:	4652      	mov	r2, sl
 80075f2:	465b      	mov	r3, fp
 80075f4:	f7f9 f808 	bl	8000608 <__aeabi_dmul>
 80075f8:	4682      	mov	sl, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	e640      	b.n	8007280 <_strtod_l+0x88>
 80075fe:	9a06      	ldr	r2, [sp, #24]
 8007600:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007604:	4293      	cmp	r3, r2
 8007606:	db20      	blt.n	800764a <_strtod_l+0x452>
 8007608:	4c64      	ldr	r4, [pc, #400]	; (800779c <_strtod_l+0x5a4>)
 800760a:	f1c5 050f 	rsb	r5, r5, #15
 800760e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007612:	4652      	mov	r2, sl
 8007614:	465b      	mov	r3, fp
 8007616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761a:	f7f8 fff5 	bl	8000608 <__aeabi_dmul>
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	1b5d      	subs	r5, r3, r5
 8007622:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007626:	e9d4 2300 	ldrd	r2, r3, [r4]
 800762a:	e7e3      	b.n	80075f4 <_strtod_l+0x3fc>
 800762c:	9b06      	ldr	r3, [sp, #24]
 800762e:	3316      	adds	r3, #22
 8007630:	db0b      	blt.n	800764a <_strtod_l+0x452>
 8007632:	9b05      	ldr	r3, [sp, #20]
 8007634:	1b9e      	subs	r6, r3, r6
 8007636:	4b59      	ldr	r3, [pc, #356]	; (800779c <_strtod_l+0x5a4>)
 8007638:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800763c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007640:	4650      	mov	r0, sl
 8007642:	4659      	mov	r1, fp
 8007644:	f7f9 f90a 	bl	800085c <__aeabi_ddiv>
 8007648:	e7d6      	b.n	80075f8 <_strtod_l+0x400>
 800764a:	9b06      	ldr	r3, [sp, #24]
 800764c:	eba5 0808 	sub.w	r8, r5, r8
 8007650:	4498      	add	r8, r3
 8007652:	f1b8 0f00 	cmp.w	r8, #0
 8007656:	dd74      	ble.n	8007742 <_strtod_l+0x54a>
 8007658:	f018 030f 	ands.w	r3, r8, #15
 800765c:	d00a      	beq.n	8007674 <_strtod_l+0x47c>
 800765e:	494f      	ldr	r1, [pc, #316]	; (800779c <_strtod_l+0x5a4>)
 8007660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800766c:	f7f8 ffcc 	bl	8000608 <__aeabi_dmul>
 8007670:	4682      	mov	sl, r0
 8007672:	468b      	mov	fp, r1
 8007674:	f038 080f 	bics.w	r8, r8, #15
 8007678:	d04f      	beq.n	800771a <_strtod_l+0x522>
 800767a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800767e:	dd22      	ble.n	80076c6 <_strtod_l+0x4ce>
 8007680:	2500      	movs	r5, #0
 8007682:	462e      	mov	r6, r5
 8007684:	9507      	str	r5, [sp, #28]
 8007686:	9505      	str	r5, [sp, #20]
 8007688:	2322      	movs	r3, #34	; 0x22
 800768a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80077a4 <_strtod_l+0x5ac>
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	f04f 0a00 	mov.w	sl, #0
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f43f adf2 	beq.w	8007280 <_strtod_l+0x88>
 800769c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800769e:	4620      	mov	r0, r4
 80076a0:	f001 fe90 	bl	80093c4 <_Bfree>
 80076a4:	9905      	ldr	r1, [sp, #20]
 80076a6:	4620      	mov	r0, r4
 80076a8:	f001 fe8c 	bl	80093c4 <_Bfree>
 80076ac:	4631      	mov	r1, r6
 80076ae:	4620      	mov	r0, r4
 80076b0:	f001 fe88 	bl	80093c4 <_Bfree>
 80076b4:	9907      	ldr	r1, [sp, #28]
 80076b6:	4620      	mov	r0, r4
 80076b8:	f001 fe84 	bl	80093c4 <_Bfree>
 80076bc:	4629      	mov	r1, r5
 80076be:	4620      	mov	r0, r4
 80076c0:	f001 fe80 	bl	80093c4 <_Bfree>
 80076c4:	e5dc      	b.n	8007280 <_strtod_l+0x88>
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <_strtod_l+0x5a8>)
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	2300      	movs	r3, #0
 80076cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80076d0:	4650      	mov	r0, sl
 80076d2:	4659      	mov	r1, fp
 80076d4:	4699      	mov	r9, r3
 80076d6:	f1b8 0f01 	cmp.w	r8, #1
 80076da:	dc21      	bgt.n	8007720 <_strtod_l+0x528>
 80076dc:	b10b      	cbz	r3, 80076e2 <_strtod_l+0x4ea>
 80076de:	4682      	mov	sl, r0
 80076e0:	468b      	mov	fp, r1
 80076e2:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <_strtod_l+0x5a8>)
 80076e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80076e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80076ec:	4652      	mov	r2, sl
 80076ee:	465b      	mov	r3, fp
 80076f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80076f4:	f7f8 ff88 	bl	8000608 <__aeabi_dmul>
 80076f8:	4b2a      	ldr	r3, [pc, #168]	; (80077a4 <_strtod_l+0x5ac>)
 80076fa:	460a      	mov	r2, r1
 80076fc:	400b      	ands	r3, r1
 80076fe:	492a      	ldr	r1, [pc, #168]	; (80077a8 <_strtod_l+0x5b0>)
 8007700:	428b      	cmp	r3, r1
 8007702:	4682      	mov	sl, r0
 8007704:	d8bc      	bhi.n	8007680 <_strtod_l+0x488>
 8007706:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800770a:	428b      	cmp	r3, r1
 800770c:	bf86      	itte	hi
 800770e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80077ac <_strtod_l+0x5b4>
 8007712:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007716:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800771a:	2300      	movs	r3, #0
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	e084      	b.n	800782a <_strtod_l+0x632>
 8007720:	f018 0f01 	tst.w	r8, #1
 8007724:	d005      	beq.n	8007732 <_strtod_l+0x53a>
 8007726:	9b04      	ldr	r3, [sp, #16]
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f7f8 ff6c 	bl	8000608 <__aeabi_dmul>
 8007730:	2301      	movs	r3, #1
 8007732:	9a04      	ldr	r2, [sp, #16]
 8007734:	3208      	adds	r2, #8
 8007736:	f109 0901 	add.w	r9, r9, #1
 800773a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800773e:	9204      	str	r2, [sp, #16]
 8007740:	e7c9      	b.n	80076d6 <_strtod_l+0x4de>
 8007742:	d0ea      	beq.n	800771a <_strtod_l+0x522>
 8007744:	f1c8 0800 	rsb	r8, r8, #0
 8007748:	f018 020f 	ands.w	r2, r8, #15
 800774c:	d00a      	beq.n	8007764 <_strtod_l+0x56c>
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <_strtod_l+0x5a4>)
 8007750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007754:	4650      	mov	r0, sl
 8007756:	4659      	mov	r1, fp
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f9 f87e 	bl	800085c <__aeabi_ddiv>
 8007760:	4682      	mov	sl, r0
 8007762:	468b      	mov	fp, r1
 8007764:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007768:	d0d7      	beq.n	800771a <_strtod_l+0x522>
 800776a:	f1b8 0f1f 	cmp.w	r8, #31
 800776e:	dd1f      	ble.n	80077b0 <_strtod_l+0x5b8>
 8007770:	2500      	movs	r5, #0
 8007772:	462e      	mov	r6, r5
 8007774:	9507      	str	r5, [sp, #28]
 8007776:	9505      	str	r5, [sp, #20]
 8007778:	2322      	movs	r3, #34	; 0x22
 800777a:	f04f 0a00 	mov.w	sl, #0
 800777e:	f04f 0b00 	mov.w	fp, #0
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	e786      	b.n	8007694 <_strtod_l+0x49c>
 8007786:	bf00      	nop
 8007788:	0800ae49 	.word	0x0800ae49
 800778c:	0800ae8c 	.word	0x0800ae8c
 8007790:	0800ae41 	.word	0x0800ae41
 8007794:	0800afcc 	.word	0x0800afcc
 8007798:	0800b278 	.word	0x0800b278
 800779c:	0800b158 	.word	0x0800b158
 80077a0:	0800b130 	.word	0x0800b130
 80077a4:	7ff00000 	.word	0x7ff00000
 80077a8:	7ca00000 	.word	0x7ca00000
 80077ac:	7fefffff 	.word	0x7fefffff
 80077b0:	f018 0310 	ands.w	r3, r8, #16
 80077b4:	bf18      	it	ne
 80077b6:	236a      	movne	r3, #106	; 0x6a
 80077b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007b68 <_strtod_l+0x970>
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	4650      	mov	r0, sl
 80077c0:	4659      	mov	r1, fp
 80077c2:	2300      	movs	r3, #0
 80077c4:	f018 0f01 	tst.w	r8, #1
 80077c8:	d004      	beq.n	80077d4 <_strtod_l+0x5dc>
 80077ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077ce:	f7f8 ff1b 	bl	8000608 <__aeabi_dmul>
 80077d2:	2301      	movs	r3, #1
 80077d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80077d8:	f109 0908 	add.w	r9, r9, #8
 80077dc:	d1f2      	bne.n	80077c4 <_strtod_l+0x5cc>
 80077de:	b10b      	cbz	r3, 80077e4 <_strtod_l+0x5ec>
 80077e0:	4682      	mov	sl, r0
 80077e2:	468b      	mov	fp, r1
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	b1c3      	cbz	r3, 800781a <_strtod_l+0x622>
 80077e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80077ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	4659      	mov	r1, fp
 80077f4:	dd11      	ble.n	800781a <_strtod_l+0x622>
 80077f6:	2b1f      	cmp	r3, #31
 80077f8:	f340 8124 	ble.w	8007a44 <_strtod_l+0x84c>
 80077fc:	2b34      	cmp	r3, #52	; 0x34
 80077fe:	bfde      	ittt	le
 8007800:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007804:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007808:	fa03 f202 	lslle.w	r2, r3, r2
 800780c:	f04f 0a00 	mov.w	sl, #0
 8007810:	bfcc      	ite	gt
 8007812:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007816:	ea02 0b01 	andle.w	fp, r2, r1
 800781a:	2200      	movs	r2, #0
 800781c:	2300      	movs	r3, #0
 800781e:	4650      	mov	r0, sl
 8007820:	4659      	mov	r1, fp
 8007822:	f7f9 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 8007826:	2800      	cmp	r0, #0
 8007828:	d1a2      	bne.n	8007770 <_strtod_l+0x578>
 800782a:	9b07      	ldr	r3, [sp, #28]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	9908      	ldr	r1, [sp, #32]
 8007830:	462b      	mov	r3, r5
 8007832:	463a      	mov	r2, r7
 8007834:	4620      	mov	r0, r4
 8007836:	f001 fe2d 	bl	8009494 <__s2b>
 800783a:	9007      	str	r0, [sp, #28]
 800783c:	2800      	cmp	r0, #0
 800783e:	f43f af1f 	beq.w	8007680 <_strtod_l+0x488>
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	1b9e      	subs	r6, r3, r6
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	bfb4      	ite	lt
 800784c:	4633      	movlt	r3, r6
 800784e:	2300      	movge	r3, #0
 8007850:	930c      	str	r3, [sp, #48]	; 0x30
 8007852:	9b06      	ldr	r3, [sp, #24]
 8007854:	2500      	movs	r5, #0
 8007856:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800785a:	9312      	str	r3, [sp, #72]	; 0x48
 800785c:	462e      	mov	r6, r5
 800785e:	9b07      	ldr	r3, [sp, #28]
 8007860:	4620      	mov	r0, r4
 8007862:	6859      	ldr	r1, [r3, #4]
 8007864:	f001 fd6e 	bl	8009344 <_Balloc>
 8007868:	9005      	str	r0, [sp, #20]
 800786a:	2800      	cmp	r0, #0
 800786c:	f43f af0c 	beq.w	8007688 <_strtod_l+0x490>
 8007870:	9b07      	ldr	r3, [sp, #28]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	3202      	adds	r2, #2
 8007876:	f103 010c 	add.w	r1, r3, #12
 800787a:	0092      	lsls	r2, r2, #2
 800787c:	300c      	adds	r0, #12
 800787e:	f001 fd53 	bl	8009328 <memcpy>
 8007882:	ec4b ab10 	vmov	d0, sl, fp
 8007886:	aa1a      	add	r2, sp, #104	; 0x68
 8007888:	a919      	add	r1, sp, #100	; 0x64
 800788a:	4620      	mov	r0, r4
 800788c:	f002 f948 	bl	8009b20 <__d2b>
 8007890:	ec4b ab18 	vmov	d8, sl, fp
 8007894:	9018      	str	r0, [sp, #96]	; 0x60
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f aef6 	beq.w	8007688 <_strtod_l+0x490>
 800789c:	2101      	movs	r1, #1
 800789e:	4620      	mov	r0, r4
 80078a0:	f001 fe92 	bl	80095c8 <__i2b>
 80078a4:	4606      	mov	r6, r0
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f43f aeee 	beq.w	8007688 <_strtod_l+0x490>
 80078ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078ae:	9904      	ldr	r1, [sp, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bfab      	itete	ge
 80078b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80078b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80078b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80078ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80078be:	bfac      	ite	ge
 80078c0:	eb03 0902 	addge.w	r9, r3, r2
 80078c4:	1ad7      	sublt	r7, r2, r3
 80078c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078c8:	eba3 0801 	sub.w	r8, r3, r1
 80078cc:	4490      	add	r8, r2
 80078ce:	4ba1      	ldr	r3, [pc, #644]	; (8007b54 <_strtod_l+0x95c>)
 80078d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80078d4:	4598      	cmp	r8, r3
 80078d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078da:	f280 80c7 	bge.w	8007a6c <_strtod_l+0x874>
 80078de:	eba3 0308 	sub.w	r3, r3, r8
 80078e2:	2b1f      	cmp	r3, #31
 80078e4:	eba2 0203 	sub.w	r2, r2, r3
 80078e8:	f04f 0101 	mov.w	r1, #1
 80078ec:	f300 80b1 	bgt.w	8007a52 <_strtod_l+0x85a>
 80078f0:	fa01 f303 	lsl.w	r3, r1, r3
 80078f4:	930d      	str	r3, [sp, #52]	; 0x34
 80078f6:	2300      	movs	r3, #0
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	eb09 0802 	add.w	r8, r9, r2
 80078fe:	9b04      	ldr	r3, [sp, #16]
 8007900:	45c1      	cmp	r9, r8
 8007902:	4417      	add	r7, r2
 8007904:	441f      	add	r7, r3
 8007906:	464b      	mov	r3, r9
 8007908:	bfa8      	it	ge
 800790a:	4643      	movge	r3, r8
 800790c:	42bb      	cmp	r3, r7
 800790e:	bfa8      	it	ge
 8007910:	463b      	movge	r3, r7
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfc2      	ittt	gt
 8007916:	eba8 0803 	subgt.w	r8, r8, r3
 800791a:	1aff      	subgt	r7, r7, r3
 800791c:	eba9 0903 	subgt.w	r9, r9, r3
 8007920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007922:	2b00      	cmp	r3, #0
 8007924:	dd17      	ble.n	8007956 <_strtod_l+0x75e>
 8007926:	4631      	mov	r1, r6
 8007928:	461a      	mov	r2, r3
 800792a:	4620      	mov	r0, r4
 800792c:	f001 ff0c 	bl	8009748 <__pow5mult>
 8007930:	4606      	mov	r6, r0
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f aea8 	beq.w	8007688 <_strtod_l+0x490>
 8007938:	4601      	mov	r1, r0
 800793a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800793c:	4620      	mov	r0, r4
 800793e:	f001 fe59 	bl	80095f4 <__multiply>
 8007942:	900b      	str	r0, [sp, #44]	; 0x2c
 8007944:	2800      	cmp	r0, #0
 8007946:	f43f ae9f 	beq.w	8007688 <_strtod_l+0x490>
 800794a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800794c:	4620      	mov	r0, r4
 800794e:	f001 fd39 	bl	80093c4 <_Bfree>
 8007952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007954:	9318      	str	r3, [sp, #96]	; 0x60
 8007956:	f1b8 0f00 	cmp.w	r8, #0
 800795a:	f300 808c 	bgt.w	8007a76 <_strtod_l+0x87e>
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	dd08      	ble.n	8007976 <_strtod_l+0x77e>
 8007964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007966:	9905      	ldr	r1, [sp, #20]
 8007968:	4620      	mov	r0, r4
 800796a:	f001 feed 	bl	8009748 <__pow5mult>
 800796e:	9005      	str	r0, [sp, #20]
 8007970:	2800      	cmp	r0, #0
 8007972:	f43f ae89 	beq.w	8007688 <_strtod_l+0x490>
 8007976:	2f00      	cmp	r7, #0
 8007978:	dd08      	ble.n	800798c <_strtod_l+0x794>
 800797a:	9905      	ldr	r1, [sp, #20]
 800797c:	463a      	mov	r2, r7
 800797e:	4620      	mov	r0, r4
 8007980:	f001 ff3c 	bl	80097fc <__lshift>
 8007984:	9005      	str	r0, [sp, #20]
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f ae7e 	beq.w	8007688 <_strtod_l+0x490>
 800798c:	f1b9 0f00 	cmp.w	r9, #0
 8007990:	dd08      	ble.n	80079a4 <_strtod_l+0x7ac>
 8007992:	4631      	mov	r1, r6
 8007994:	464a      	mov	r2, r9
 8007996:	4620      	mov	r0, r4
 8007998:	f001 ff30 	bl	80097fc <__lshift>
 800799c:	4606      	mov	r6, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	f43f ae72 	beq.w	8007688 <_strtod_l+0x490>
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079a8:	4620      	mov	r0, r4
 80079aa:	f001 ffb3 	bl	8009914 <__mdiff>
 80079ae:	4605      	mov	r5, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f43f ae69 	beq.w	8007688 <_strtod_l+0x490>
 80079b6:	68c3      	ldr	r3, [r0, #12]
 80079b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ba:	2300      	movs	r3, #0
 80079bc:	60c3      	str	r3, [r0, #12]
 80079be:	4631      	mov	r1, r6
 80079c0:	f001 ff8c 	bl	80098dc <__mcmp>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	da60      	bge.n	8007a8a <_strtod_l+0x892>
 80079c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ca:	ea53 030a 	orrs.w	r3, r3, sl
 80079ce:	f040 8082 	bne.w	8007ad6 <_strtod_l+0x8de>
 80079d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d17d      	bne.n	8007ad6 <_strtod_l+0x8de>
 80079da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079de:	0d1b      	lsrs	r3, r3, #20
 80079e0:	051b      	lsls	r3, r3, #20
 80079e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079e6:	d976      	bls.n	8007ad6 <_strtod_l+0x8de>
 80079e8:	696b      	ldr	r3, [r5, #20]
 80079ea:	b913      	cbnz	r3, 80079f2 <_strtod_l+0x7fa>
 80079ec:	692b      	ldr	r3, [r5, #16]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	dd71      	ble.n	8007ad6 <_strtod_l+0x8de>
 80079f2:	4629      	mov	r1, r5
 80079f4:	2201      	movs	r2, #1
 80079f6:	4620      	mov	r0, r4
 80079f8:	f001 ff00 	bl	80097fc <__lshift>
 80079fc:	4631      	mov	r1, r6
 80079fe:	4605      	mov	r5, r0
 8007a00:	f001 ff6c 	bl	80098dc <__mcmp>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	dd66      	ble.n	8007ad6 <_strtod_l+0x8de>
 8007a08:	9904      	ldr	r1, [sp, #16]
 8007a0a:	4a53      	ldr	r2, [pc, #332]	; (8007b58 <_strtod_l+0x960>)
 8007a0c:	465b      	mov	r3, fp
 8007a0e:	2900      	cmp	r1, #0
 8007a10:	f000 8081 	beq.w	8007b16 <_strtod_l+0x91e>
 8007a14:	ea02 010b 	and.w	r1, r2, fp
 8007a18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a1c:	dc7b      	bgt.n	8007b16 <_strtod_l+0x91e>
 8007a1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a22:	f77f aea9 	ble.w	8007778 <_strtod_l+0x580>
 8007a26:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <_strtod_l+0x964>)
 8007a28:	4650      	mov	r0, sl
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f7f8 fdeb 	bl	8000608 <__aeabi_dmul>
 8007a32:	460b      	mov	r3, r1
 8007a34:	4303      	orrs	r3, r0
 8007a36:	bf08      	it	eq
 8007a38:	2322      	moveq	r3, #34	; 0x22
 8007a3a:	4682      	mov	sl, r0
 8007a3c:	468b      	mov	fp, r1
 8007a3e:	bf08      	it	eq
 8007a40:	6023      	streq	r3, [r4, #0]
 8007a42:	e62b      	b.n	800769c <_strtod_l+0x4a4>
 8007a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	ea03 0a0a 	and.w	sl, r3, sl
 8007a50:	e6e3      	b.n	800781a <_strtod_l+0x622>
 8007a52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007a56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007a5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007a5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007a62:	fa01 f308 	lsl.w	r3, r1, r8
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	910d      	str	r1, [sp, #52]	; 0x34
 8007a6a:	e746      	b.n	80078fa <_strtod_l+0x702>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	2301      	movs	r3, #1
 8007a72:	930d      	str	r3, [sp, #52]	; 0x34
 8007a74:	e741      	b.n	80078fa <_strtod_l+0x702>
 8007a76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a78:	4642      	mov	r2, r8
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f001 febe 	bl	80097fc <__lshift>
 8007a80:	9018      	str	r0, [sp, #96]	; 0x60
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f47f af6b 	bne.w	800795e <_strtod_l+0x766>
 8007a88:	e5fe      	b.n	8007688 <_strtod_l+0x490>
 8007a8a:	465f      	mov	r7, fp
 8007a8c:	d16e      	bne.n	8007b6c <_strtod_l+0x974>
 8007a8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a94:	b342      	cbz	r2, 8007ae8 <_strtod_l+0x8f0>
 8007a96:	4a32      	ldr	r2, [pc, #200]	; (8007b60 <_strtod_l+0x968>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d128      	bne.n	8007aee <_strtod_l+0x8f6>
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	4651      	mov	r1, sl
 8007aa0:	b1eb      	cbz	r3, 8007ade <_strtod_l+0x8e6>
 8007aa2:	4b2d      	ldr	r3, [pc, #180]	; (8007b58 <_strtod_l+0x960>)
 8007aa4:	403b      	ands	r3, r7
 8007aa6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aae:	d819      	bhi.n	8007ae4 <_strtod_l+0x8ec>
 8007ab0:	0d1b      	lsrs	r3, r3, #20
 8007ab2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	4299      	cmp	r1, r3
 8007abc:	d117      	bne.n	8007aee <_strtod_l+0x8f6>
 8007abe:	4b29      	ldr	r3, [pc, #164]	; (8007b64 <_strtod_l+0x96c>)
 8007ac0:	429f      	cmp	r7, r3
 8007ac2:	d102      	bne.n	8007aca <_strtod_l+0x8d2>
 8007ac4:	3101      	adds	r1, #1
 8007ac6:	f43f addf 	beq.w	8007688 <_strtod_l+0x490>
 8007aca:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <_strtod_l+0x960>)
 8007acc:	403b      	ands	r3, r7
 8007ace:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007ad2:	f04f 0a00 	mov.w	sl, #0
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1a4      	bne.n	8007a26 <_strtod_l+0x82e>
 8007adc:	e5de      	b.n	800769c <_strtod_l+0x4a4>
 8007ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ae2:	e7ea      	b.n	8007aba <_strtod_l+0x8c2>
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	e7e8      	b.n	8007aba <_strtod_l+0x8c2>
 8007ae8:	ea53 030a 	orrs.w	r3, r3, sl
 8007aec:	d08c      	beq.n	8007a08 <_strtod_l+0x810>
 8007aee:	9b08      	ldr	r3, [sp, #32]
 8007af0:	b1db      	cbz	r3, 8007b2a <_strtod_l+0x932>
 8007af2:	423b      	tst	r3, r7
 8007af4:	d0ef      	beq.n	8007ad6 <_strtod_l+0x8de>
 8007af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af8:	9a04      	ldr	r2, [sp, #16]
 8007afa:	4650      	mov	r0, sl
 8007afc:	4659      	mov	r1, fp
 8007afe:	b1c3      	cbz	r3, 8007b32 <_strtod_l+0x93a>
 8007b00:	f7ff fb5e 	bl	80071c0 <sulp>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	ec51 0b18 	vmov	r0, r1, d8
 8007b0c:	f7f8 fbc6 	bl	800029c <__adddf3>
 8007b10:	4682      	mov	sl, r0
 8007b12:	468b      	mov	fp, r1
 8007b14:	e7df      	b.n	8007ad6 <_strtod_l+0x8de>
 8007b16:	4013      	ands	r3, r2
 8007b18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b28:	e7d5      	b.n	8007ad6 <_strtod_l+0x8de>
 8007b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2c:	ea13 0f0a 	tst.w	r3, sl
 8007b30:	e7e0      	b.n	8007af4 <_strtod_l+0x8fc>
 8007b32:	f7ff fb45 	bl	80071c0 <sulp>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	ec51 0b18 	vmov	r0, r1, d8
 8007b3e:	f7f8 fbab 	bl	8000298 <__aeabi_dsub>
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4682      	mov	sl, r0
 8007b48:	468b      	mov	fp, r1
 8007b4a:	f7f8 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d0c1      	beq.n	8007ad6 <_strtod_l+0x8de>
 8007b52:	e611      	b.n	8007778 <_strtod_l+0x580>
 8007b54:	fffffc02 	.word	0xfffffc02
 8007b58:	7ff00000 	.word	0x7ff00000
 8007b5c:	39500000 	.word	0x39500000
 8007b60:	000fffff 	.word	0x000fffff
 8007b64:	7fefffff 	.word	0x7fefffff
 8007b68:	0800aea0 	.word	0x0800aea0
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f002 f832 	bl	8009bd8 <__ratio>
 8007b74:	ec59 8b10 	vmov	r8, r9, d0
 8007b78:	ee10 0a10 	vmov	r0, s0
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ffbc 	bl	8000b00 <__aeabi_dcmple>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d07a      	beq.n	8007c82 <_strtod_l+0xa8a>
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d04a      	beq.n	8007c28 <_strtod_l+0xa30>
 8007b92:	4b95      	ldr	r3, [pc, #596]	; (8007de8 <_strtod_l+0xbf0>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007de8 <_strtod_l+0xbf0>
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	4b92      	ldr	r3, [pc, #584]	; (8007dec <_strtod_l+0xbf4>)
 8007ba4:	403b      	ands	r3, r7
 8007ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007baa:	4b91      	ldr	r3, [pc, #580]	; (8007df0 <_strtod_l+0xbf8>)
 8007bac:	429a      	cmp	r2, r3
 8007bae:	f040 80b0 	bne.w	8007d12 <_strtod_l+0xb1a>
 8007bb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bb6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007bba:	ec4b ab10 	vmov	d0, sl, fp
 8007bbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bc2:	f001 ff31 	bl	8009a28 <__ulp>
 8007bc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bca:	ec53 2b10 	vmov	r2, r3, d0
 8007bce:	f7f8 fd1b 	bl	8000608 <__aeabi_dmul>
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	465b      	mov	r3, fp
 8007bd6:	f7f8 fb61 	bl	800029c <__adddf3>
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4983      	ldr	r1, [pc, #524]	; (8007dec <_strtod_l+0xbf4>)
 8007bde:	4a85      	ldr	r2, [pc, #532]	; (8007df4 <_strtod_l+0xbfc>)
 8007be0:	4019      	ands	r1, r3
 8007be2:	4291      	cmp	r1, r2
 8007be4:	4682      	mov	sl, r0
 8007be6:	d960      	bls.n	8007caa <_strtod_l+0xab2>
 8007be8:	ee18 3a90 	vmov	r3, s17
 8007bec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d104      	bne.n	8007bfe <_strtod_l+0xa06>
 8007bf4:	ee18 3a10 	vmov	r3, s16
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	f43f ad45 	beq.w	8007688 <_strtod_l+0x490>
 8007bfe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007e00 <_strtod_l+0xc08>
 8007c02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 fbdb 	bl	80093c4 <_Bfree>
 8007c0e:	9905      	ldr	r1, [sp, #20]
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 fbd7 	bl	80093c4 <_Bfree>
 8007c16:	4631      	mov	r1, r6
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 fbd3 	bl	80093c4 <_Bfree>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fbcf 	bl	80093c4 <_Bfree>
 8007c26:	e61a      	b.n	800785e <_strtod_l+0x666>
 8007c28:	f1ba 0f00 	cmp.w	sl, #0
 8007c2c:	d11b      	bne.n	8007c66 <_strtod_l+0xa6e>
 8007c2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c32:	b9f3      	cbnz	r3, 8007c72 <_strtod_l+0xa7a>
 8007c34:	4b6c      	ldr	r3, [pc, #432]	; (8007de8 <_strtod_l+0xbf0>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 ff56 	bl	8000aec <__aeabi_dcmplt>
 8007c40:	b9d0      	cbnz	r0, 8007c78 <_strtod_l+0xa80>
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	4b6c      	ldr	r3, [pc, #432]	; (8007df8 <_strtod_l+0xc00>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f7f8 fcdd 	bl	8000608 <__aeabi_dmul>
 8007c4e:	4680      	mov	r8, r0
 8007c50:	4689      	mov	r9, r1
 8007c52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007c5a:	9315      	str	r3, [sp, #84]	; 0x54
 8007c5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c64:	e79d      	b.n	8007ba2 <_strtod_l+0x9aa>
 8007c66:	f1ba 0f01 	cmp.w	sl, #1
 8007c6a:	d102      	bne.n	8007c72 <_strtod_l+0xa7a>
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	f43f ad83 	beq.w	8007778 <_strtod_l+0x580>
 8007c72:	4b62      	ldr	r3, [pc, #392]	; (8007dfc <_strtod_l+0xc04>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	e78e      	b.n	8007b96 <_strtod_l+0x99e>
 8007c78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007df8 <_strtod_l+0xc00>
 8007c7c:	f04f 0800 	mov.w	r8, #0
 8007c80:	e7e7      	b.n	8007c52 <_strtod_l+0xa5a>
 8007c82:	4b5d      	ldr	r3, [pc, #372]	; (8007df8 <_strtod_l+0xc00>)
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f7f8 fcbd 	bl	8000608 <__aeabi_dmul>
 8007c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c90:	4680      	mov	r8, r0
 8007c92:	4689      	mov	r9, r1
 8007c94:	b933      	cbnz	r3, 8007ca4 <_strtod_l+0xaac>
 8007c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c9a:	900e      	str	r0, [sp, #56]	; 0x38
 8007c9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ca2:	e7dd      	b.n	8007c60 <_strtod_l+0xa68>
 8007ca4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ca8:	e7f9      	b.n	8007c9e <_strtod_l+0xaa6>
 8007caa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007cae:	9b04      	ldr	r3, [sp, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1a8      	bne.n	8007c06 <_strtod_l+0xa0e>
 8007cb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cba:	0d1b      	lsrs	r3, r3, #20
 8007cbc:	051b      	lsls	r3, r3, #20
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d1a1      	bne.n	8007c06 <_strtod_l+0xa0e>
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f9 f84f 	bl	8000d68 <__aeabi_d2lz>
 8007cca:	f7f8 fc6f 	bl	80005ac <__aeabi_l2d>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	f7f8 fadf 	bl	8000298 <__aeabi_dsub>
 8007cda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ce0:	ea43 030a 	orr.w	r3, r3, sl
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	d055      	beq.n	8007d98 <_strtod_l+0xba0>
 8007cec:	a336      	add	r3, pc, #216	; (adr r3, 8007dc8 <_strtod_l+0xbd0>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fefb 	bl	8000aec <__aeabi_dcmplt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	f47f acd0 	bne.w	800769c <_strtod_l+0x4a4>
 8007cfc:	a334      	add	r3, pc, #208	; (adr r3, 8007dd0 <_strtod_l+0xbd8>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f43f af7b 	beq.w	8007c06 <_strtod_l+0xa0e>
 8007d10:	e4c4      	b.n	800769c <_strtod_l+0x4a4>
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	b333      	cbz	r3, 8007d64 <_strtod_l+0xb6c>
 8007d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d1c:	d822      	bhi.n	8007d64 <_strtod_l+0xb6c>
 8007d1e:	a32e      	add	r3, pc, #184	; (adr r3, 8007dd8 <_strtod_l+0xbe0>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	4640      	mov	r0, r8
 8007d26:	4649      	mov	r1, r9
 8007d28:	f7f8 feea 	bl	8000b00 <__aeabi_dcmple>
 8007d2c:	b1a0      	cbz	r0, 8007d58 <_strtod_l+0xb60>
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	f7f8 ff41 	bl	8000bb8 <__aeabi_d2uiz>
 8007d36:	2801      	cmp	r0, #1
 8007d38:	bf38      	it	cc
 8007d3a:	2001      	movcc	r0, #1
 8007d3c:	f7f8 fbea 	bl	8000514 <__aeabi_ui2d>
 8007d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d42:	4680      	mov	r8, r0
 8007d44:	4689      	mov	r9, r1
 8007d46:	bb23      	cbnz	r3, 8007d92 <_strtod_l+0xb9a>
 8007d48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d4c:	9010      	str	r0, [sp, #64]	; 0x40
 8007d4e:	9311      	str	r3, [sp, #68]	; 0x44
 8007d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	9309      	str	r3, [sp, #36]	; 0x24
 8007d64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d68:	eeb0 0a48 	vmov.f32	s0, s16
 8007d6c:	eef0 0a68 	vmov.f32	s1, s17
 8007d70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d74:	f001 fe58 	bl	8009a28 <__ulp>
 8007d78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d7c:	ec53 2b10 	vmov	r2, r3, d0
 8007d80:	f7f8 fc42 	bl	8000608 <__aeabi_dmul>
 8007d84:	ec53 2b18 	vmov	r2, r3, d8
 8007d88:	f7f8 fa88 	bl	800029c <__adddf3>
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	468b      	mov	fp, r1
 8007d90:	e78d      	b.n	8007cae <_strtod_l+0xab6>
 8007d92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007d96:	e7db      	b.n	8007d50 <_strtod_l+0xb58>
 8007d98:	a311      	add	r3, pc, #68	; (adr r3, 8007de0 <_strtod_l+0xbe8>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fea5 	bl	8000aec <__aeabi_dcmplt>
 8007da2:	e7b2      	b.n	8007d0a <_strtod_l+0xb12>
 8007da4:	2300      	movs	r3, #0
 8007da6:	930a      	str	r3, [sp, #40]	; 0x28
 8007da8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007daa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	f7ff ba6b 	b.w	8007288 <_strtod_l+0x90>
 8007db2:	2a65      	cmp	r2, #101	; 0x65
 8007db4:	f43f ab5f 	beq.w	8007476 <_strtod_l+0x27e>
 8007db8:	2a45      	cmp	r2, #69	; 0x45
 8007dba:	f43f ab5c 	beq.w	8007476 <_strtod_l+0x27e>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f7ff bb94 	b.w	80074ec <_strtod_l+0x2f4>
 8007dc4:	f3af 8000 	nop.w
 8007dc8:	94a03595 	.word	0x94a03595
 8007dcc:	3fdfffff 	.word	0x3fdfffff
 8007dd0:	35afe535 	.word	0x35afe535
 8007dd4:	3fe00000 	.word	0x3fe00000
 8007dd8:	ffc00000 	.word	0xffc00000
 8007ddc:	41dfffff 	.word	0x41dfffff
 8007de0:	94a03595 	.word	0x94a03595
 8007de4:	3fcfffff 	.word	0x3fcfffff
 8007de8:	3ff00000 	.word	0x3ff00000
 8007dec:	7ff00000 	.word	0x7ff00000
 8007df0:	7fe00000 	.word	0x7fe00000
 8007df4:	7c9fffff 	.word	0x7c9fffff
 8007df8:	3fe00000 	.word	0x3fe00000
 8007dfc:	bff00000 	.word	0xbff00000
 8007e00:	7fefffff 	.word	0x7fefffff

08007e04 <_strtod_r>:
 8007e04:	4b01      	ldr	r3, [pc, #4]	; (8007e0c <_strtod_r+0x8>)
 8007e06:	f7ff b9f7 	b.w	80071f8 <_strtod_l>
 8007e0a:	bf00      	nop
 8007e0c:	20000078 	.word	0x20000078

08007e10 <_strtol_l.constprop.0>:
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e16:	d001      	beq.n	8007e1c <_strtol_l.constprop.0+0xc>
 8007e18:	2b24      	cmp	r3, #36	; 0x24
 8007e1a:	d906      	bls.n	8007e2a <_strtol_l.constprop.0+0x1a>
 8007e1c:	f7fe fafe 	bl	800641c <__errno>
 8007e20:	2316      	movs	r3, #22
 8007e22:	6003      	str	r3, [r0, #0]
 8007e24:	2000      	movs	r0, #0
 8007e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f10 <_strtol_l.constprop.0+0x100>
 8007e2e:	460d      	mov	r5, r1
 8007e30:	462e      	mov	r6, r5
 8007e32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e36:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007e3a:	f017 0708 	ands.w	r7, r7, #8
 8007e3e:	d1f7      	bne.n	8007e30 <_strtol_l.constprop.0+0x20>
 8007e40:	2c2d      	cmp	r4, #45	; 0x2d
 8007e42:	d132      	bne.n	8007eaa <_strtol_l.constprop.0+0x9a>
 8007e44:	782c      	ldrb	r4, [r5, #0]
 8007e46:	2701      	movs	r7, #1
 8007e48:	1cb5      	adds	r5, r6, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d05b      	beq.n	8007f06 <_strtol_l.constprop.0+0xf6>
 8007e4e:	2b10      	cmp	r3, #16
 8007e50:	d109      	bne.n	8007e66 <_strtol_l.constprop.0+0x56>
 8007e52:	2c30      	cmp	r4, #48	; 0x30
 8007e54:	d107      	bne.n	8007e66 <_strtol_l.constprop.0+0x56>
 8007e56:	782c      	ldrb	r4, [r5, #0]
 8007e58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e5c:	2c58      	cmp	r4, #88	; 0x58
 8007e5e:	d14d      	bne.n	8007efc <_strtol_l.constprop.0+0xec>
 8007e60:	786c      	ldrb	r4, [r5, #1]
 8007e62:	2310      	movs	r3, #16
 8007e64:	3502      	adds	r5, #2
 8007e66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007e6e:	f04f 0c00 	mov.w	ip, #0
 8007e72:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e76:	4666      	mov	r6, ip
 8007e78:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007e80:	f1be 0f09 	cmp.w	lr, #9
 8007e84:	d816      	bhi.n	8007eb4 <_strtol_l.constprop.0+0xa4>
 8007e86:	4674      	mov	r4, lr
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	dd24      	ble.n	8007ed6 <_strtol_l.constprop.0+0xc6>
 8007e8c:	f1bc 0f00 	cmp.w	ip, #0
 8007e90:	db1e      	blt.n	8007ed0 <_strtol_l.constprop.0+0xc0>
 8007e92:	45b1      	cmp	r9, r6
 8007e94:	d31c      	bcc.n	8007ed0 <_strtol_l.constprop.0+0xc0>
 8007e96:	d101      	bne.n	8007e9c <_strtol_l.constprop.0+0x8c>
 8007e98:	45a2      	cmp	sl, r4
 8007e9a:	db19      	blt.n	8007ed0 <_strtol_l.constprop.0+0xc0>
 8007e9c:	fb06 4603 	mla	r6, r6, r3, r4
 8007ea0:	f04f 0c01 	mov.w	ip, #1
 8007ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ea8:	e7e8      	b.n	8007e7c <_strtol_l.constprop.0+0x6c>
 8007eaa:	2c2b      	cmp	r4, #43	; 0x2b
 8007eac:	bf04      	itt	eq
 8007eae:	782c      	ldrbeq	r4, [r5, #0]
 8007eb0:	1cb5      	addeq	r5, r6, #2
 8007eb2:	e7ca      	b.n	8007e4a <_strtol_l.constprop.0+0x3a>
 8007eb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007eb8:	f1be 0f19 	cmp.w	lr, #25
 8007ebc:	d801      	bhi.n	8007ec2 <_strtol_l.constprop.0+0xb2>
 8007ebe:	3c37      	subs	r4, #55	; 0x37
 8007ec0:	e7e2      	b.n	8007e88 <_strtol_l.constprop.0+0x78>
 8007ec2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007ec6:	f1be 0f19 	cmp.w	lr, #25
 8007eca:	d804      	bhi.n	8007ed6 <_strtol_l.constprop.0+0xc6>
 8007ecc:	3c57      	subs	r4, #87	; 0x57
 8007ece:	e7db      	b.n	8007e88 <_strtol_l.constprop.0+0x78>
 8007ed0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007ed4:	e7e6      	b.n	8007ea4 <_strtol_l.constprop.0+0x94>
 8007ed6:	f1bc 0f00 	cmp.w	ip, #0
 8007eda:	da05      	bge.n	8007ee8 <_strtol_l.constprop.0+0xd8>
 8007edc:	2322      	movs	r3, #34	; 0x22
 8007ede:	6003      	str	r3, [r0, #0]
 8007ee0:	4646      	mov	r6, r8
 8007ee2:	b942      	cbnz	r2, 8007ef6 <_strtol_l.constprop.0+0xe6>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	e79e      	b.n	8007e26 <_strtol_l.constprop.0+0x16>
 8007ee8:	b107      	cbz	r7, 8007eec <_strtol_l.constprop.0+0xdc>
 8007eea:	4276      	negs	r6, r6
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	d0f9      	beq.n	8007ee4 <_strtol_l.constprop.0+0xd4>
 8007ef0:	f1bc 0f00 	cmp.w	ip, #0
 8007ef4:	d000      	beq.n	8007ef8 <_strtol_l.constprop.0+0xe8>
 8007ef6:	1e69      	subs	r1, r5, #1
 8007ef8:	6011      	str	r1, [r2, #0]
 8007efa:	e7f3      	b.n	8007ee4 <_strtol_l.constprop.0+0xd4>
 8007efc:	2430      	movs	r4, #48	; 0x30
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1b1      	bne.n	8007e66 <_strtol_l.constprop.0+0x56>
 8007f02:	2308      	movs	r3, #8
 8007f04:	e7af      	b.n	8007e66 <_strtol_l.constprop.0+0x56>
 8007f06:	2c30      	cmp	r4, #48	; 0x30
 8007f08:	d0a5      	beq.n	8007e56 <_strtol_l.constprop.0+0x46>
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	e7ab      	b.n	8007e66 <_strtol_l.constprop.0+0x56>
 8007f0e:	bf00      	nop
 8007f10:	0800aec9 	.word	0x0800aec9

08007f14 <_strtol_r>:
 8007f14:	f7ff bf7c 	b.w	8007e10 <_strtol_l.constprop.0>

08007f18 <quorem>:
 8007f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	6903      	ldr	r3, [r0, #16]
 8007f1e:	690c      	ldr	r4, [r1, #16]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	4607      	mov	r7, r0
 8007f24:	f2c0 8081 	blt.w	800802a <quorem+0x112>
 8007f28:	3c01      	subs	r4, #1
 8007f2a:	f101 0814 	add.w	r8, r1, #20
 8007f2e:	f100 0514 	add.w	r5, r0, #20
 8007f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f40:	3301      	adds	r3, #1
 8007f42:	429a      	cmp	r2, r3
 8007f44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f50:	d331      	bcc.n	8007fb6 <quorem+0x9e>
 8007f52:	f04f 0e00 	mov.w	lr, #0
 8007f56:	4640      	mov	r0, r8
 8007f58:	46ac      	mov	ip, r5
 8007f5a:	46f2      	mov	sl, lr
 8007f5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f60:	b293      	uxth	r3, r2
 8007f62:	fb06 e303 	mla	r3, r6, r3, lr
 8007f66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007f70:	f8dc a000 	ldr.w	sl, [ip]
 8007f74:	0c12      	lsrs	r2, r2, #16
 8007f76:	fa13 f38a 	uxtah	r3, r3, sl
 8007f7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	9b00      	ldr	r3, [sp, #0]
 8007f82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f86:	b292      	uxth	r2, r2
 8007f88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f94:	4581      	cmp	r9, r0
 8007f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fa2:	d2db      	bcs.n	8007f5c <quorem+0x44>
 8007fa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fa8:	b92b      	cbnz	r3, 8007fb6 <quorem+0x9e>
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	d32e      	bcc.n	8008012 <quorem+0xfa>
 8007fb4:	613c      	str	r4, [r7, #16]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f001 fc90 	bl	80098dc <__mcmp>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	db24      	blt.n	800800a <quorem+0xf2>
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f04f 0c00 	mov.w	ip, #0
 8007fc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8007fd0:	b293      	uxth	r3, r2
 8007fd2:	ebac 0303 	sub.w	r3, ip, r3
 8007fd6:	0c12      	lsrs	r2, r2, #16
 8007fd8:	fa13 f38e 	uxtah	r3, r3, lr
 8007fdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fea:	45c1      	cmp	r9, r8
 8007fec:	f840 3b04 	str.w	r3, [r0], #4
 8007ff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ff4:	d2e8      	bcs.n	8007fc8 <quorem+0xb0>
 8007ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffe:	b922      	cbnz	r2, 800800a <quorem+0xf2>
 8008000:	3b04      	subs	r3, #4
 8008002:	429d      	cmp	r5, r3
 8008004:	461a      	mov	r2, r3
 8008006:	d30a      	bcc.n	800801e <quorem+0x106>
 8008008:	613c      	str	r4, [r7, #16]
 800800a:	4630      	mov	r0, r6
 800800c:	b003      	add	sp, #12
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	3b04      	subs	r3, #4
 8008016:	2a00      	cmp	r2, #0
 8008018:	d1cc      	bne.n	8007fb4 <quorem+0x9c>
 800801a:	3c01      	subs	r4, #1
 800801c:	e7c7      	b.n	8007fae <quorem+0x96>
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	3b04      	subs	r3, #4
 8008022:	2a00      	cmp	r2, #0
 8008024:	d1f0      	bne.n	8008008 <quorem+0xf0>
 8008026:	3c01      	subs	r4, #1
 8008028:	e7eb      	b.n	8008002 <quorem+0xea>
 800802a:	2000      	movs	r0, #0
 800802c:	e7ee      	b.n	800800c <quorem+0xf4>
	...

08008030 <_dtoa_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ed2d 8b04 	vpush	{d8-d9}
 8008038:	ec57 6b10 	vmov	r6, r7, d0
 800803c:	b093      	sub	sp, #76	; 0x4c
 800803e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008044:	9106      	str	r1, [sp, #24]
 8008046:	ee10 aa10 	vmov	sl, s0
 800804a:	4604      	mov	r4, r0
 800804c:	9209      	str	r2, [sp, #36]	; 0x24
 800804e:	930c      	str	r3, [sp, #48]	; 0x30
 8008050:	46bb      	mov	fp, r7
 8008052:	b975      	cbnz	r5, 8008072 <_dtoa_r+0x42>
 8008054:	2010      	movs	r0, #16
 8008056:	f001 f94d 	bl	80092f4 <malloc>
 800805a:	4602      	mov	r2, r0
 800805c:	6260      	str	r0, [r4, #36]	; 0x24
 800805e:	b920      	cbnz	r0, 800806a <_dtoa_r+0x3a>
 8008060:	4ba7      	ldr	r3, [pc, #668]	; (8008300 <_dtoa_r+0x2d0>)
 8008062:	21ea      	movs	r1, #234	; 0xea
 8008064:	48a7      	ldr	r0, [pc, #668]	; (8008304 <_dtoa_r+0x2d4>)
 8008066:	f002 f8bd 	bl	800a1e4 <__assert_func>
 800806a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800806e:	6005      	str	r5, [r0, #0]
 8008070:	60c5      	str	r5, [r0, #12]
 8008072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008074:	6819      	ldr	r1, [r3, #0]
 8008076:	b151      	cbz	r1, 800808e <_dtoa_r+0x5e>
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	604a      	str	r2, [r1, #4]
 800807c:	2301      	movs	r3, #1
 800807e:	4093      	lsls	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
 8008082:	4620      	mov	r0, r4
 8008084:	f001 f99e 	bl	80093c4 <_Bfree>
 8008088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	1e3b      	subs	r3, r7, #0
 8008090:	bfaa      	itet	ge
 8008092:	2300      	movge	r3, #0
 8008094:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008098:	f8c8 3000 	strge.w	r3, [r8]
 800809c:	4b9a      	ldr	r3, [pc, #616]	; (8008308 <_dtoa_r+0x2d8>)
 800809e:	bfbc      	itt	lt
 80080a0:	2201      	movlt	r2, #1
 80080a2:	f8c8 2000 	strlt.w	r2, [r8]
 80080a6:	ea33 030b 	bics.w	r3, r3, fp
 80080aa:	d11b      	bne.n	80080e4 <_dtoa_r+0xb4>
 80080ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080b8:	4333      	orrs	r3, r6
 80080ba:	f000 8592 	beq.w	8008be2 <_dtoa_r+0xbb2>
 80080be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080c0:	b963      	cbnz	r3, 80080dc <_dtoa_r+0xac>
 80080c2:	4b92      	ldr	r3, [pc, #584]	; (800830c <_dtoa_r+0x2dc>)
 80080c4:	e022      	b.n	800810c <_dtoa_r+0xdc>
 80080c6:	4b92      	ldr	r3, [pc, #584]	; (8008310 <_dtoa_r+0x2e0>)
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	3308      	adds	r3, #8
 80080cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	9801      	ldr	r0, [sp, #4]
 80080d2:	b013      	add	sp, #76	; 0x4c
 80080d4:	ecbd 8b04 	vpop	{d8-d9}
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	4b8b      	ldr	r3, [pc, #556]	; (800830c <_dtoa_r+0x2dc>)
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	3303      	adds	r3, #3
 80080e2:	e7f3      	b.n	80080cc <_dtoa_r+0x9c>
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 fcf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80080f0:	ec4b ab19 	vmov	d9, sl, fp
 80080f4:	4680      	mov	r8, r0
 80080f6:	b158      	cbz	r0, 8008110 <_dtoa_r+0xe0>
 80080f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080fa:	2301      	movs	r3, #1
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 856b 	beq.w	8008bdc <_dtoa_r+0xbac>
 8008106:	4883      	ldr	r0, [pc, #524]	; (8008314 <_dtoa_r+0x2e4>)
 8008108:	6018      	str	r0, [r3, #0]
 800810a:	1e43      	subs	r3, r0, #1
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	e7df      	b.n	80080d0 <_dtoa_r+0xa0>
 8008110:	ec4b ab10 	vmov	d0, sl, fp
 8008114:	aa10      	add	r2, sp, #64	; 0x40
 8008116:	a911      	add	r1, sp, #68	; 0x44
 8008118:	4620      	mov	r0, r4
 800811a:	f001 fd01 	bl	8009b20 <__d2b>
 800811e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008122:	ee08 0a10 	vmov	s16, r0
 8008126:	2d00      	cmp	r5, #0
 8008128:	f000 8084 	beq.w	8008234 <_dtoa_r+0x204>
 800812c:	ee19 3a90 	vmov	r3, s19
 8008130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008134:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008138:	4656      	mov	r6, sl
 800813a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800813e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008142:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008146:	4b74      	ldr	r3, [pc, #464]	; (8008318 <_dtoa_r+0x2e8>)
 8008148:	2200      	movs	r2, #0
 800814a:	4630      	mov	r0, r6
 800814c:	4639      	mov	r1, r7
 800814e:	f7f8 f8a3 	bl	8000298 <__aeabi_dsub>
 8008152:	a365      	add	r3, pc, #404	; (adr r3, 80082e8 <_dtoa_r+0x2b8>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 fa56 	bl	8000608 <__aeabi_dmul>
 800815c:	a364      	add	r3, pc, #400	; (adr r3, 80082f0 <_dtoa_r+0x2c0>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f89b 	bl	800029c <__adddf3>
 8008166:	4606      	mov	r6, r0
 8008168:	4628      	mov	r0, r5
 800816a:	460f      	mov	r7, r1
 800816c:	f7f8 f9e2 	bl	8000534 <__aeabi_i2d>
 8008170:	a361      	add	r3, pc, #388	; (adr r3, 80082f8 <_dtoa_r+0x2c8>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 fa47 	bl	8000608 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4630      	mov	r0, r6
 8008180:	4639      	mov	r1, r7
 8008182:	f7f8 f88b 	bl	800029c <__adddf3>
 8008186:	4606      	mov	r6, r0
 8008188:	460f      	mov	r7, r1
 800818a:	f7f8 fced 	bl	8000b68 <__aeabi_d2iz>
 800818e:	2200      	movs	r2, #0
 8008190:	9000      	str	r0, [sp, #0]
 8008192:	2300      	movs	r3, #0
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f7f8 fca8 	bl	8000aec <__aeabi_dcmplt>
 800819c:	b150      	cbz	r0, 80081b4 <_dtoa_r+0x184>
 800819e:	9800      	ldr	r0, [sp, #0]
 80081a0:	f7f8 f9c8 	bl	8000534 <__aeabi_i2d>
 80081a4:	4632      	mov	r2, r6
 80081a6:	463b      	mov	r3, r7
 80081a8:	f7f8 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ac:	b910      	cbnz	r0, 80081b4 <_dtoa_r+0x184>
 80081ae:	9b00      	ldr	r3, [sp, #0]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	2b16      	cmp	r3, #22
 80081b8:	d85a      	bhi.n	8008270 <_dtoa_r+0x240>
 80081ba:	9a00      	ldr	r2, [sp, #0]
 80081bc:	4b57      	ldr	r3, [pc, #348]	; (800831c <_dtoa_r+0x2ec>)
 80081be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	ec51 0b19 	vmov	r0, r1, d9
 80081ca:	f7f8 fc8f 	bl	8000aec <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d050      	beq.n	8008274 <_dtoa_r+0x244>
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	2300      	movs	r3, #0
 80081da:	930b      	str	r3, [sp, #44]	; 0x2c
 80081dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081de:	1b5d      	subs	r5, r3, r5
 80081e0:	1e6b      	subs	r3, r5, #1
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	bf45      	ittet	mi
 80081e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80081ea:	9304      	strmi	r3, [sp, #16]
 80081ec:	2300      	movpl	r3, #0
 80081ee:	2300      	movmi	r3, #0
 80081f0:	bf4c      	ite	mi
 80081f2:	9305      	strmi	r3, [sp, #20]
 80081f4:	9304      	strpl	r3, [sp, #16]
 80081f6:	9b00      	ldr	r3, [sp, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	db3d      	blt.n	8008278 <_dtoa_r+0x248>
 80081fc:	9b05      	ldr	r3, [sp, #20]
 80081fe:	9a00      	ldr	r2, [sp, #0]
 8008200:	920a      	str	r2, [sp, #40]	; 0x28
 8008202:	4413      	add	r3, r2
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	2300      	movs	r3, #0
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b09      	cmp	r3, #9
 800820e:	f200 8089 	bhi.w	8008324 <_dtoa_r+0x2f4>
 8008212:	2b05      	cmp	r3, #5
 8008214:	bfc4      	itt	gt
 8008216:	3b04      	subgt	r3, #4
 8008218:	9306      	strgt	r3, [sp, #24]
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	f1a3 0302 	sub.w	r3, r3, #2
 8008220:	bfcc      	ite	gt
 8008222:	2500      	movgt	r5, #0
 8008224:	2501      	movle	r5, #1
 8008226:	2b03      	cmp	r3, #3
 8008228:	f200 8087 	bhi.w	800833a <_dtoa_r+0x30a>
 800822c:	e8df f003 	tbb	[pc, r3]
 8008230:	59383a2d 	.word	0x59383a2d
 8008234:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008238:	441d      	add	r5, r3
 800823a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800823e:	2b20      	cmp	r3, #32
 8008240:	bfc1      	itttt	gt
 8008242:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008246:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800824a:	fa0b f303 	lslgt.w	r3, fp, r3
 800824e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008252:	bfda      	itte	le
 8008254:	f1c3 0320 	rsble	r3, r3, #32
 8008258:	fa06 f003 	lslle.w	r0, r6, r3
 800825c:	4318      	orrgt	r0, r3
 800825e:	f7f8 f959 	bl	8000514 <__aeabi_ui2d>
 8008262:	2301      	movs	r3, #1
 8008264:	4606      	mov	r6, r0
 8008266:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800826a:	3d01      	subs	r5, #1
 800826c:	930e      	str	r3, [sp, #56]	; 0x38
 800826e:	e76a      	b.n	8008146 <_dtoa_r+0x116>
 8008270:	2301      	movs	r3, #1
 8008272:	e7b2      	b.n	80081da <_dtoa_r+0x1aa>
 8008274:	900b      	str	r0, [sp, #44]	; 0x2c
 8008276:	e7b1      	b.n	80081dc <_dtoa_r+0x1ac>
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	9a00      	ldr	r2, [sp, #0]
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	4253      	negs	r3, r2
 8008282:	9307      	str	r3, [sp, #28]
 8008284:	2300      	movs	r3, #0
 8008286:	930a      	str	r3, [sp, #40]	; 0x28
 8008288:	e7bf      	b.n	800820a <_dtoa_r+0x1da>
 800828a:	2300      	movs	r3, #0
 800828c:	9308      	str	r3, [sp, #32]
 800828e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc55      	bgt.n	8008340 <_dtoa_r+0x310>
 8008294:	2301      	movs	r3, #1
 8008296:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800829a:	461a      	mov	r2, r3
 800829c:	9209      	str	r2, [sp, #36]	; 0x24
 800829e:	e00c      	b.n	80082ba <_dtoa_r+0x28a>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e7f3      	b.n	800828c <_dtoa_r+0x25c>
 80082a4:	2300      	movs	r3, #0
 80082a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	4413      	add	r3, r2
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	3301      	adds	r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	bfb8      	it	lt
 80082b8:	2301      	movlt	r3, #1
 80082ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082bc:	2200      	movs	r2, #0
 80082be:	6042      	str	r2, [r0, #4]
 80082c0:	2204      	movs	r2, #4
 80082c2:	f102 0614 	add.w	r6, r2, #20
 80082c6:	429e      	cmp	r6, r3
 80082c8:	6841      	ldr	r1, [r0, #4]
 80082ca:	d93d      	bls.n	8008348 <_dtoa_r+0x318>
 80082cc:	4620      	mov	r0, r4
 80082ce:	f001 f839 	bl	8009344 <_Balloc>
 80082d2:	9001      	str	r0, [sp, #4]
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d13b      	bne.n	8008350 <_dtoa_r+0x320>
 80082d8:	4b11      	ldr	r3, [pc, #68]	; (8008320 <_dtoa_r+0x2f0>)
 80082da:	4602      	mov	r2, r0
 80082dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082e0:	e6c0      	b.n	8008064 <_dtoa_r+0x34>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7df      	b.n	80082a6 <_dtoa_r+0x276>
 80082e6:	bf00      	nop
 80082e8:	636f4361 	.word	0x636f4361
 80082ec:	3fd287a7 	.word	0x3fd287a7
 80082f0:	8b60c8b3 	.word	0x8b60c8b3
 80082f4:	3fc68a28 	.word	0x3fc68a28
 80082f8:	509f79fb 	.word	0x509f79fb
 80082fc:	3fd34413 	.word	0x3fd34413
 8008300:	0800afd6 	.word	0x0800afd6
 8008304:	0800afed 	.word	0x0800afed
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	0800afd2 	.word	0x0800afd2
 8008310:	0800afc9 	.word	0x0800afc9
 8008314:	0800ae4d 	.word	0x0800ae4d
 8008318:	3ff80000 	.word	0x3ff80000
 800831c:	0800b158 	.word	0x0800b158
 8008320:	0800b048 	.word	0x0800b048
 8008324:	2501      	movs	r5, #1
 8008326:	2300      	movs	r3, #0
 8008328:	9306      	str	r3, [sp, #24]
 800832a:	9508      	str	r5, [sp, #32]
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008330:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008334:	2200      	movs	r2, #0
 8008336:	2312      	movs	r3, #18
 8008338:	e7b0      	b.n	800829c <_dtoa_r+0x26c>
 800833a:	2301      	movs	r3, #1
 800833c:	9308      	str	r3, [sp, #32]
 800833e:	e7f5      	b.n	800832c <_dtoa_r+0x2fc>
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008346:	e7b8      	b.n	80082ba <_dtoa_r+0x28a>
 8008348:	3101      	adds	r1, #1
 800834a:	6041      	str	r1, [r0, #4]
 800834c:	0052      	lsls	r2, r2, #1
 800834e:	e7b8      	b.n	80082c2 <_dtoa_r+0x292>
 8008350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008352:	9a01      	ldr	r2, [sp, #4]
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	2b0e      	cmp	r3, #14
 800835a:	f200 809d 	bhi.w	8008498 <_dtoa_r+0x468>
 800835e:	2d00      	cmp	r5, #0
 8008360:	f000 809a 	beq.w	8008498 <_dtoa_r+0x468>
 8008364:	9b00      	ldr	r3, [sp, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd32      	ble.n	80083d0 <_dtoa_r+0x3a0>
 800836a:	4ab7      	ldr	r2, [pc, #732]	; (8008648 <_dtoa_r+0x618>)
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008378:	9b00      	ldr	r3, [sp, #0]
 800837a:	05d8      	lsls	r0, r3, #23
 800837c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008380:	d516      	bpl.n	80083b0 <_dtoa_r+0x380>
 8008382:	4bb2      	ldr	r3, [pc, #712]	; (800864c <_dtoa_r+0x61c>)
 8008384:	ec51 0b19 	vmov	r0, r1, d9
 8008388:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800838c:	f7f8 fa66 	bl	800085c <__aeabi_ddiv>
 8008390:	f007 070f 	and.w	r7, r7, #15
 8008394:	4682      	mov	sl, r0
 8008396:	468b      	mov	fp, r1
 8008398:	2503      	movs	r5, #3
 800839a:	4eac      	ldr	r6, [pc, #688]	; (800864c <_dtoa_r+0x61c>)
 800839c:	b957      	cbnz	r7, 80083b4 <_dtoa_r+0x384>
 800839e:	4642      	mov	r2, r8
 80083a0:	464b      	mov	r3, r9
 80083a2:	4650      	mov	r0, sl
 80083a4:	4659      	mov	r1, fp
 80083a6:	f7f8 fa59 	bl	800085c <__aeabi_ddiv>
 80083aa:	4682      	mov	sl, r0
 80083ac:	468b      	mov	fp, r1
 80083ae:	e028      	b.n	8008402 <_dtoa_r+0x3d2>
 80083b0:	2502      	movs	r5, #2
 80083b2:	e7f2      	b.n	800839a <_dtoa_r+0x36a>
 80083b4:	07f9      	lsls	r1, r7, #31
 80083b6:	d508      	bpl.n	80083ca <_dtoa_r+0x39a>
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083c0:	f7f8 f922 	bl	8000608 <__aeabi_dmul>
 80083c4:	3501      	adds	r5, #1
 80083c6:	4680      	mov	r8, r0
 80083c8:	4689      	mov	r9, r1
 80083ca:	107f      	asrs	r7, r7, #1
 80083cc:	3608      	adds	r6, #8
 80083ce:	e7e5      	b.n	800839c <_dtoa_r+0x36c>
 80083d0:	f000 809b 	beq.w	800850a <_dtoa_r+0x4da>
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	4f9d      	ldr	r7, [pc, #628]	; (800864c <_dtoa_r+0x61c>)
 80083d8:	425e      	negs	r6, r3
 80083da:	4b9b      	ldr	r3, [pc, #620]	; (8008648 <_dtoa_r+0x618>)
 80083dc:	f006 020f 	and.w	r2, r6, #15
 80083e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	ec51 0b19 	vmov	r0, r1, d9
 80083ec:	f7f8 f90c 	bl	8000608 <__aeabi_dmul>
 80083f0:	1136      	asrs	r6, r6, #4
 80083f2:	4682      	mov	sl, r0
 80083f4:	468b      	mov	fp, r1
 80083f6:	2300      	movs	r3, #0
 80083f8:	2502      	movs	r5, #2
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d17a      	bne.n	80084f4 <_dtoa_r+0x4c4>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1d3      	bne.n	80083aa <_dtoa_r+0x37a>
 8008402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 8082 	beq.w	800850e <_dtoa_r+0x4de>
 800840a:	4b91      	ldr	r3, [pc, #580]	; (8008650 <_dtoa_r+0x620>)
 800840c:	2200      	movs	r2, #0
 800840e:	4650      	mov	r0, sl
 8008410:	4659      	mov	r1, fp
 8008412:	f7f8 fb6b 	bl	8000aec <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	d079      	beq.n	800850e <_dtoa_r+0x4de>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d076      	beq.n	800850e <_dtoa_r+0x4de>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd36      	ble.n	8008494 <_dtoa_r+0x464>
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	4650      	mov	r0, sl
 800842a:	4659      	mov	r1, fp
 800842c:	1e5f      	subs	r7, r3, #1
 800842e:	2200      	movs	r2, #0
 8008430:	4b88      	ldr	r3, [pc, #544]	; (8008654 <_dtoa_r+0x624>)
 8008432:	f7f8 f8e9 	bl	8000608 <__aeabi_dmul>
 8008436:	9e02      	ldr	r6, [sp, #8]
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	3501      	adds	r5, #1
 800843e:	4628      	mov	r0, r5
 8008440:	f7f8 f878 	bl	8000534 <__aeabi_i2d>
 8008444:	4652      	mov	r2, sl
 8008446:	465b      	mov	r3, fp
 8008448:	f7f8 f8de 	bl	8000608 <__aeabi_dmul>
 800844c:	4b82      	ldr	r3, [pc, #520]	; (8008658 <_dtoa_r+0x628>)
 800844e:	2200      	movs	r2, #0
 8008450:	f7f7 ff24 	bl	800029c <__adddf3>
 8008454:	46d0      	mov	r8, sl
 8008456:	46d9      	mov	r9, fp
 8008458:	4682      	mov	sl, r0
 800845a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800845e:	2e00      	cmp	r6, #0
 8008460:	d158      	bne.n	8008514 <_dtoa_r+0x4e4>
 8008462:	4b7e      	ldr	r3, [pc, #504]	; (800865c <_dtoa_r+0x62c>)
 8008464:	2200      	movs	r2, #0
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f7 ff15 	bl	8000298 <__aeabi_dsub>
 800846e:	4652      	mov	r2, sl
 8008470:	465b      	mov	r3, fp
 8008472:	4680      	mov	r8, r0
 8008474:	4689      	mov	r9, r1
 8008476:	f7f8 fb57 	bl	8000b28 <__aeabi_dcmpgt>
 800847a:	2800      	cmp	r0, #0
 800847c:	f040 8295 	bne.w	80089aa <_dtoa_r+0x97a>
 8008480:	4652      	mov	r2, sl
 8008482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008486:	4640      	mov	r0, r8
 8008488:	4649      	mov	r1, r9
 800848a:	f7f8 fb2f 	bl	8000aec <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	f040 8289 	bne.w	80089a6 <_dtoa_r+0x976>
 8008494:	ec5b ab19 	vmov	sl, fp, d9
 8008498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800849a:	2b00      	cmp	r3, #0
 800849c:	f2c0 8148 	blt.w	8008730 <_dtoa_r+0x700>
 80084a0:	9a00      	ldr	r2, [sp, #0]
 80084a2:	2a0e      	cmp	r2, #14
 80084a4:	f300 8144 	bgt.w	8008730 <_dtoa_r+0x700>
 80084a8:	4b67      	ldr	r3, [pc, #412]	; (8008648 <_dtoa_r+0x618>)
 80084aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f280 80d5 	bge.w	8008664 <_dtoa_r+0x634>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f300 80d1 	bgt.w	8008664 <_dtoa_r+0x634>
 80084c2:	f040 826f 	bne.w	80089a4 <_dtoa_r+0x974>
 80084c6:	4b65      	ldr	r3, [pc, #404]	; (800865c <_dtoa_r+0x62c>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f8 f89b 	bl	8000608 <__aeabi_dmul>
 80084d2:	4652      	mov	r2, sl
 80084d4:	465b      	mov	r3, fp
 80084d6:	f7f8 fb1d 	bl	8000b14 <__aeabi_dcmpge>
 80084da:	9e03      	ldr	r6, [sp, #12]
 80084dc:	4637      	mov	r7, r6
 80084de:	2800      	cmp	r0, #0
 80084e0:	f040 8245 	bne.w	800896e <_dtoa_r+0x93e>
 80084e4:	9d01      	ldr	r5, [sp, #4]
 80084e6:	2331      	movs	r3, #49	; 0x31
 80084e8:	f805 3b01 	strb.w	r3, [r5], #1
 80084ec:	9b00      	ldr	r3, [sp, #0]
 80084ee:	3301      	adds	r3, #1
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	e240      	b.n	8008976 <_dtoa_r+0x946>
 80084f4:	07f2      	lsls	r2, r6, #31
 80084f6:	d505      	bpl.n	8008504 <_dtoa_r+0x4d4>
 80084f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084fc:	f7f8 f884 	bl	8000608 <__aeabi_dmul>
 8008500:	3501      	adds	r5, #1
 8008502:	2301      	movs	r3, #1
 8008504:	1076      	asrs	r6, r6, #1
 8008506:	3708      	adds	r7, #8
 8008508:	e777      	b.n	80083fa <_dtoa_r+0x3ca>
 800850a:	2502      	movs	r5, #2
 800850c:	e779      	b.n	8008402 <_dtoa_r+0x3d2>
 800850e:	9f00      	ldr	r7, [sp, #0]
 8008510:	9e03      	ldr	r6, [sp, #12]
 8008512:	e794      	b.n	800843e <_dtoa_r+0x40e>
 8008514:	9901      	ldr	r1, [sp, #4]
 8008516:	4b4c      	ldr	r3, [pc, #304]	; (8008648 <_dtoa_r+0x618>)
 8008518:	4431      	add	r1, r6
 800851a:	910d      	str	r1, [sp, #52]	; 0x34
 800851c:	9908      	ldr	r1, [sp, #32]
 800851e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008526:	2900      	cmp	r1, #0
 8008528:	d043      	beq.n	80085b2 <_dtoa_r+0x582>
 800852a:	494d      	ldr	r1, [pc, #308]	; (8008660 <_dtoa_r+0x630>)
 800852c:	2000      	movs	r0, #0
 800852e:	f7f8 f995 	bl	800085c <__aeabi_ddiv>
 8008532:	4652      	mov	r2, sl
 8008534:	465b      	mov	r3, fp
 8008536:	f7f7 feaf 	bl	8000298 <__aeabi_dsub>
 800853a:	9d01      	ldr	r5, [sp, #4]
 800853c:	4682      	mov	sl, r0
 800853e:	468b      	mov	fp, r1
 8008540:	4649      	mov	r1, r9
 8008542:	4640      	mov	r0, r8
 8008544:	f7f8 fb10 	bl	8000b68 <__aeabi_d2iz>
 8008548:	4606      	mov	r6, r0
 800854a:	f7f7 fff3 	bl	8000534 <__aeabi_i2d>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f7 fe9f 	bl	8000298 <__aeabi_dsub>
 800855a:	3630      	adds	r6, #48	; 0x30
 800855c:	f805 6b01 	strb.w	r6, [r5], #1
 8008560:	4652      	mov	r2, sl
 8008562:	465b      	mov	r3, fp
 8008564:	4680      	mov	r8, r0
 8008566:	4689      	mov	r9, r1
 8008568:	f7f8 fac0 	bl	8000aec <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	d163      	bne.n	8008638 <_dtoa_r+0x608>
 8008570:	4642      	mov	r2, r8
 8008572:	464b      	mov	r3, r9
 8008574:	4936      	ldr	r1, [pc, #216]	; (8008650 <_dtoa_r+0x620>)
 8008576:	2000      	movs	r0, #0
 8008578:	f7f7 fe8e 	bl	8000298 <__aeabi_dsub>
 800857c:	4652      	mov	r2, sl
 800857e:	465b      	mov	r3, fp
 8008580:	f7f8 fab4 	bl	8000aec <__aeabi_dcmplt>
 8008584:	2800      	cmp	r0, #0
 8008586:	f040 80b5 	bne.w	80086f4 <_dtoa_r+0x6c4>
 800858a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800858c:	429d      	cmp	r5, r3
 800858e:	d081      	beq.n	8008494 <_dtoa_r+0x464>
 8008590:	4b30      	ldr	r3, [pc, #192]	; (8008654 <_dtoa_r+0x624>)
 8008592:	2200      	movs	r2, #0
 8008594:	4650      	mov	r0, sl
 8008596:	4659      	mov	r1, fp
 8008598:	f7f8 f836 	bl	8000608 <__aeabi_dmul>
 800859c:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <_dtoa_r+0x624>)
 800859e:	4682      	mov	sl, r0
 80085a0:	468b      	mov	fp, r1
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	2200      	movs	r2, #0
 80085a8:	f7f8 f82e 	bl	8000608 <__aeabi_dmul>
 80085ac:	4680      	mov	r8, r0
 80085ae:	4689      	mov	r9, r1
 80085b0:	e7c6      	b.n	8008540 <_dtoa_r+0x510>
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f8 f827 	bl	8000608 <__aeabi_dmul>
 80085ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	930f      	str	r3, [sp, #60]	; 0x3c
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	4649      	mov	r1, r9
 80085c6:	4640      	mov	r0, r8
 80085c8:	f7f8 face 	bl	8000b68 <__aeabi_d2iz>
 80085cc:	4606      	mov	r6, r0
 80085ce:	f7f7 ffb1 	bl	8000534 <__aeabi_i2d>
 80085d2:	3630      	adds	r6, #48	; 0x30
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f7 fe5c 	bl	8000298 <__aeabi_dsub>
 80085e0:	f805 6b01 	strb.w	r6, [r5], #1
 80085e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e6:	429d      	cmp	r5, r3
 80085e8:	4680      	mov	r8, r0
 80085ea:	4689      	mov	r9, r1
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	d124      	bne.n	800863c <_dtoa_r+0x60c>
 80085f2:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <_dtoa_r+0x630>)
 80085f4:	4650      	mov	r0, sl
 80085f6:	4659      	mov	r1, fp
 80085f8:	f7f7 fe50 	bl	800029c <__adddf3>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fa90 	bl	8000b28 <__aeabi_dcmpgt>
 8008608:	2800      	cmp	r0, #0
 800860a:	d173      	bne.n	80086f4 <_dtoa_r+0x6c4>
 800860c:	4652      	mov	r2, sl
 800860e:	465b      	mov	r3, fp
 8008610:	4913      	ldr	r1, [pc, #76]	; (8008660 <_dtoa_r+0x630>)
 8008612:	2000      	movs	r0, #0
 8008614:	f7f7 fe40 	bl	8000298 <__aeabi_dsub>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4640      	mov	r0, r8
 800861e:	4649      	mov	r1, r9
 8008620:	f7f8 fa64 	bl	8000aec <__aeabi_dcmplt>
 8008624:	2800      	cmp	r0, #0
 8008626:	f43f af35 	beq.w	8008494 <_dtoa_r+0x464>
 800862a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800862c:	1e6b      	subs	r3, r5, #1
 800862e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008630:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d0f8      	beq.n	800862a <_dtoa_r+0x5fa>
 8008638:	9700      	str	r7, [sp, #0]
 800863a:	e049      	b.n	80086d0 <_dtoa_r+0x6a0>
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <_dtoa_r+0x624>)
 800863e:	f7f7 ffe3 	bl	8000608 <__aeabi_dmul>
 8008642:	4680      	mov	r8, r0
 8008644:	4689      	mov	r9, r1
 8008646:	e7bd      	b.n	80085c4 <_dtoa_r+0x594>
 8008648:	0800b158 	.word	0x0800b158
 800864c:	0800b130 	.word	0x0800b130
 8008650:	3ff00000 	.word	0x3ff00000
 8008654:	40240000 	.word	0x40240000
 8008658:	401c0000 	.word	0x401c0000
 800865c:	40140000 	.word	0x40140000
 8008660:	3fe00000 	.word	0x3fe00000
 8008664:	9d01      	ldr	r5, [sp, #4]
 8008666:	4656      	mov	r6, sl
 8008668:	465f      	mov	r7, fp
 800866a:	4642      	mov	r2, r8
 800866c:	464b      	mov	r3, r9
 800866e:	4630      	mov	r0, r6
 8008670:	4639      	mov	r1, r7
 8008672:	f7f8 f8f3 	bl	800085c <__aeabi_ddiv>
 8008676:	f7f8 fa77 	bl	8000b68 <__aeabi_d2iz>
 800867a:	4682      	mov	sl, r0
 800867c:	f7f7 ff5a 	bl	8000534 <__aeabi_i2d>
 8008680:	4642      	mov	r2, r8
 8008682:	464b      	mov	r3, r9
 8008684:	f7f7 ffc0 	bl	8000608 <__aeabi_dmul>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4630      	mov	r0, r6
 800868e:	4639      	mov	r1, r7
 8008690:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008694:	f7f7 fe00 	bl	8000298 <__aeabi_dsub>
 8008698:	f805 6b01 	strb.w	r6, [r5], #1
 800869c:	9e01      	ldr	r6, [sp, #4]
 800869e:	9f03      	ldr	r7, [sp, #12]
 80086a0:	1bae      	subs	r6, r5, r6
 80086a2:	42b7      	cmp	r7, r6
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	d135      	bne.n	8008716 <_dtoa_r+0x6e6>
 80086aa:	f7f7 fdf7 	bl	800029c <__adddf3>
 80086ae:	4642      	mov	r2, r8
 80086b0:	464b      	mov	r3, r9
 80086b2:	4606      	mov	r6, r0
 80086b4:	460f      	mov	r7, r1
 80086b6:	f7f8 fa37 	bl	8000b28 <__aeabi_dcmpgt>
 80086ba:	b9d0      	cbnz	r0, 80086f2 <_dtoa_r+0x6c2>
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80086c8:	b110      	cbz	r0, 80086d0 <_dtoa_r+0x6a0>
 80086ca:	f01a 0f01 	tst.w	sl, #1
 80086ce:	d110      	bne.n	80086f2 <_dtoa_r+0x6c2>
 80086d0:	4620      	mov	r0, r4
 80086d2:	ee18 1a10 	vmov	r1, s16
 80086d6:	f000 fe75 	bl	80093c4 <_Bfree>
 80086da:	2300      	movs	r3, #0
 80086dc:	9800      	ldr	r0, [sp, #0]
 80086de:	702b      	strb	r3, [r5, #0]
 80086e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e2:	3001      	adds	r0, #1
 80086e4:	6018      	str	r0, [r3, #0]
 80086e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f43f acf1 	beq.w	80080d0 <_dtoa_r+0xa0>
 80086ee:	601d      	str	r5, [r3, #0]
 80086f0:	e4ee      	b.n	80080d0 <_dtoa_r+0xa0>
 80086f2:	9f00      	ldr	r7, [sp, #0]
 80086f4:	462b      	mov	r3, r5
 80086f6:	461d      	mov	r5, r3
 80086f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086fc:	2a39      	cmp	r2, #57	; 0x39
 80086fe:	d106      	bne.n	800870e <_dtoa_r+0x6de>
 8008700:	9a01      	ldr	r2, [sp, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d1f7      	bne.n	80086f6 <_dtoa_r+0x6c6>
 8008706:	9901      	ldr	r1, [sp, #4]
 8008708:	2230      	movs	r2, #48	; 0x30
 800870a:	3701      	adds	r7, #1
 800870c:	700a      	strb	r2, [r1, #0]
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	3201      	adds	r2, #1
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	e790      	b.n	8008638 <_dtoa_r+0x608>
 8008716:	4ba6      	ldr	r3, [pc, #664]	; (80089b0 <_dtoa_r+0x980>)
 8008718:	2200      	movs	r2, #0
 800871a:	f7f7 ff75 	bl	8000608 <__aeabi_dmul>
 800871e:	2200      	movs	r2, #0
 8008720:	2300      	movs	r3, #0
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	f7f8 f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800872a:	2800      	cmp	r0, #0
 800872c:	d09d      	beq.n	800866a <_dtoa_r+0x63a>
 800872e:	e7cf      	b.n	80086d0 <_dtoa_r+0x6a0>
 8008730:	9a08      	ldr	r2, [sp, #32]
 8008732:	2a00      	cmp	r2, #0
 8008734:	f000 80d7 	beq.w	80088e6 <_dtoa_r+0x8b6>
 8008738:	9a06      	ldr	r2, [sp, #24]
 800873a:	2a01      	cmp	r2, #1
 800873c:	f300 80ba 	bgt.w	80088b4 <_dtoa_r+0x884>
 8008740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008742:	2a00      	cmp	r2, #0
 8008744:	f000 80b2 	beq.w	80088ac <_dtoa_r+0x87c>
 8008748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800874c:	9e07      	ldr	r6, [sp, #28]
 800874e:	9d04      	ldr	r5, [sp, #16]
 8008750:	9a04      	ldr	r2, [sp, #16]
 8008752:	441a      	add	r2, r3
 8008754:	9204      	str	r2, [sp, #16]
 8008756:	9a05      	ldr	r2, [sp, #20]
 8008758:	2101      	movs	r1, #1
 800875a:	441a      	add	r2, r3
 800875c:	4620      	mov	r0, r4
 800875e:	9205      	str	r2, [sp, #20]
 8008760:	f000 ff32 	bl	80095c8 <__i2b>
 8008764:	4607      	mov	r7, r0
 8008766:	2d00      	cmp	r5, #0
 8008768:	dd0c      	ble.n	8008784 <_dtoa_r+0x754>
 800876a:	9b05      	ldr	r3, [sp, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	dd09      	ble.n	8008784 <_dtoa_r+0x754>
 8008770:	42ab      	cmp	r3, r5
 8008772:	9a04      	ldr	r2, [sp, #16]
 8008774:	bfa8      	it	ge
 8008776:	462b      	movge	r3, r5
 8008778:	1ad2      	subs	r2, r2, r3
 800877a:	9204      	str	r2, [sp, #16]
 800877c:	9a05      	ldr	r2, [sp, #20]
 800877e:	1aed      	subs	r5, r5, r3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	b31b      	cbz	r3, 80087d0 <_dtoa_r+0x7a0>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 80af 	beq.w	80088ee <_dtoa_r+0x8be>
 8008790:	2e00      	cmp	r6, #0
 8008792:	dd13      	ble.n	80087bc <_dtoa_r+0x78c>
 8008794:	4639      	mov	r1, r7
 8008796:	4632      	mov	r2, r6
 8008798:	4620      	mov	r0, r4
 800879a:	f000 ffd5 	bl	8009748 <__pow5mult>
 800879e:	ee18 2a10 	vmov	r2, s16
 80087a2:	4601      	mov	r1, r0
 80087a4:	4607      	mov	r7, r0
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 ff24 	bl	80095f4 <__multiply>
 80087ac:	ee18 1a10 	vmov	r1, s16
 80087b0:	4680      	mov	r8, r0
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fe06 	bl	80093c4 <_Bfree>
 80087b8:	ee08 8a10 	vmov	s16, r8
 80087bc:	9b07      	ldr	r3, [sp, #28]
 80087be:	1b9a      	subs	r2, r3, r6
 80087c0:	d006      	beq.n	80087d0 <_dtoa_r+0x7a0>
 80087c2:	ee18 1a10 	vmov	r1, s16
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 ffbe 	bl	8009748 <__pow5mult>
 80087cc:	ee08 0a10 	vmov	s16, r0
 80087d0:	2101      	movs	r1, #1
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 fef8 	bl	80095c8 <__i2b>
 80087d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	4606      	mov	r6, r0
 80087de:	f340 8088 	ble.w	80088f2 <_dtoa_r+0x8c2>
 80087e2:	461a      	mov	r2, r3
 80087e4:	4601      	mov	r1, r0
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 ffae 	bl	8009748 <__pow5mult>
 80087ec:	9b06      	ldr	r3, [sp, #24]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	4606      	mov	r6, r0
 80087f2:	f340 8081 	ble.w	80088f8 <_dtoa_r+0x8c8>
 80087f6:	f04f 0800 	mov.w	r8, #0
 80087fa:	6933      	ldr	r3, [r6, #16]
 80087fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008800:	6918      	ldr	r0, [r3, #16]
 8008802:	f000 fe91 	bl	8009528 <__hi0bits>
 8008806:	f1c0 0020 	rsb	r0, r0, #32
 800880a:	9b05      	ldr	r3, [sp, #20]
 800880c:	4418      	add	r0, r3
 800880e:	f010 001f 	ands.w	r0, r0, #31
 8008812:	f000 8092 	beq.w	800893a <_dtoa_r+0x90a>
 8008816:	f1c0 0320 	rsb	r3, r0, #32
 800881a:	2b04      	cmp	r3, #4
 800881c:	f340 808a 	ble.w	8008934 <_dtoa_r+0x904>
 8008820:	f1c0 001c 	rsb	r0, r0, #28
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	4403      	add	r3, r0
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	9b05      	ldr	r3, [sp, #20]
 800882c:	4403      	add	r3, r0
 800882e:	4405      	add	r5, r0
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd07      	ble.n	8008848 <_dtoa_r+0x818>
 8008838:	ee18 1a10 	vmov	r1, s16
 800883c:	461a      	mov	r2, r3
 800883e:	4620      	mov	r0, r4
 8008840:	f000 ffdc 	bl	80097fc <__lshift>
 8008844:	ee08 0a10 	vmov	s16, r0
 8008848:	9b05      	ldr	r3, [sp, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	dd05      	ble.n	800885a <_dtoa_r+0x82a>
 800884e:	4631      	mov	r1, r6
 8008850:	461a      	mov	r2, r3
 8008852:	4620      	mov	r0, r4
 8008854:	f000 ffd2 	bl	80097fc <__lshift>
 8008858:	4606      	mov	r6, r0
 800885a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d06e      	beq.n	800893e <_dtoa_r+0x90e>
 8008860:	ee18 0a10 	vmov	r0, s16
 8008864:	4631      	mov	r1, r6
 8008866:	f001 f839 	bl	80098dc <__mcmp>
 800886a:	2800      	cmp	r0, #0
 800886c:	da67      	bge.n	800893e <_dtoa_r+0x90e>
 800886e:	9b00      	ldr	r3, [sp, #0]
 8008870:	3b01      	subs	r3, #1
 8008872:	ee18 1a10 	vmov	r1, s16
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	220a      	movs	r2, #10
 800887a:	2300      	movs	r3, #0
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fdc3 	bl	8009408 <__multadd>
 8008882:	9b08      	ldr	r3, [sp, #32]
 8008884:	ee08 0a10 	vmov	s16, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 81b1 	beq.w	8008bf0 <_dtoa_r+0xbc0>
 800888e:	2300      	movs	r3, #0
 8008890:	4639      	mov	r1, r7
 8008892:	220a      	movs	r2, #10
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fdb7 	bl	8009408 <__multadd>
 800889a:	9b02      	ldr	r3, [sp, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	4607      	mov	r7, r0
 80088a0:	f300 808e 	bgt.w	80089c0 <_dtoa_r+0x990>
 80088a4:	9b06      	ldr	r3, [sp, #24]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	dc51      	bgt.n	800894e <_dtoa_r+0x91e>
 80088aa:	e089      	b.n	80089c0 <_dtoa_r+0x990>
 80088ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088b2:	e74b      	b.n	800874c <_dtoa_r+0x71c>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	1e5e      	subs	r6, r3, #1
 80088b8:	9b07      	ldr	r3, [sp, #28]
 80088ba:	42b3      	cmp	r3, r6
 80088bc:	bfbf      	itttt	lt
 80088be:	9b07      	ldrlt	r3, [sp, #28]
 80088c0:	9607      	strlt	r6, [sp, #28]
 80088c2:	1af2      	sublt	r2, r6, r3
 80088c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088c6:	bfb6      	itet	lt
 80088c8:	189b      	addlt	r3, r3, r2
 80088ca:	1b9e      	subge	r6, r3, r6
 80088cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	bfb8      	it	lt
 80088d2:	2600      	movlt	r6, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bfb7      	itett	lt
 80088d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80088dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80088e0:	1a9d      	sublt	r5, r3, r2
 80088e2:	2300      	movlt	r3, #0
 80088e4:	e734      	b.n	8008750 <_dtoa_r+0x720>
 80088e6:	9e07      	ldr	r6, [sp, #28]
 80088e8:	9d04      	ldr	r5, [sp, #16]
 80088ea:	9f08      	ldr	r7, [sp, #32]
 80088ec:	e73b      	b.n	8008766 <_dtoa_r+0x736>
 80088ee:	9a07      	ldr	r2, [sp, #28]
 80088f0:	e767      	b.n	80087c2 <_dtoa_r+0x792>
 80088f2:	9b06      	ldr	r3, [sp, #24]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	dc18      	bgt.n	800892a <_dtoa_r+0x8fa>
 80088f8:	f1ba 0f00 	cmp.w	sl, #0
 80088fc:	d115      	bne.n	800892a <_dtoa_r+0x8fa>
 80088fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008902:	b993      	cbnz	r3, 800892a <_dtoa_r+0x8fa>
 8008904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008908:	0d1b      	lsrs	r3, r3, #20
 800890a:	051b      	lsls	r3, r3, #20
 800890c:	b183      	cbz	r3, 8008930 <_dtoa_r+0x900>
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	9b05      	ldr	r3, [sp, #20]
 8008916:	3301      	adds	r3, #1
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	f04f 0801 	mov.w	r8, #1
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	2b00      	cmp	r3, #0
 8008922:	f47f af6a 	bne.w	80087fa <_dtoa_r+0x7ca>
 8008926:	2001      	movs	r0, #1
 8008928:	e76f      	b.n	800880a <_dtoa_r+0x7da>
 800892a:	f04f 0800 	mov.w	r8, #0
 800892e:	e7f6      	b.n	800891e <_dtoa_r+0x8ee>
 8008930:	4698      	mov	r8, r3
 8008932:	e7f4      	b.n	800891e <_dtoa_r+0x8ee>
 8008934:	f43f af7d 	beq.w	8008832 <_dtoa_r+0x802>
 8008938:	4618      	mov	r0, r3
 800893a:	301c      	adds	r0, #28
 800893c:	e772      	b.n	8008824 <_dtoa_r+0x7f4>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc37      	bgt.n	80089b4 <_dtoa_r+0x984>
 8008944:	9b06      	ldr	r3, [sp, #24]
 8008946:	2b02      	cmp	r3, #2
 8008948:	dd34      	ble.n	80089b4 <_dtoa_r+0x984>
 800894a:	9b03      	ldr	r3, [sp, #12]
 800894c:	9302      	str	r3, [sp, #8]
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	b96b      	cbnz	r3, 800896e <_dtoa_r+0x93e>
 8008952:	4631      	mov	r1, r6
 8008954:	2205      	movs	r2, #5
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fd56 	bl	8009408 <__multadd>
 800895c:	4601      	mov	r1, r0
 800895e:	4606      	mov	r6, r0
 8008960:	ee18 0a10 	vmov	r0, s16
 8008964:	f000 ffba 	bl	80098dc <__mcmp>
 8008968:	2800      	cmp	r0, #0
 800896a:	f73f adbb 	bgt.w	80084e4 <_dtoa_r+0x4b4>
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	9d01      	ldr	r5, [sp, #4]
 8008972:	43db      	mvns	r3, r3
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	4631      	mov	r1, r6
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fd21 	bl	80093c4 <_Bfree>
 8008982:	2f00      	cmp	r7, #0
 8008984:	f43f aea4 	beq.w	80086d0 <_dtoa_r+0x6a0>
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	d005      	beq.n	800899a <_dtoa_r+0x96a>
 800898e:	45b8      	cmp	r8, r7
 8008990:	d003      	beq.n	800899a <_dtoa_r+0x96a>
 8008992:	4641      	mov	r1, r8
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fd15 	bl	80093c4 <_Bfree>
 800899a:	4639      	mov	r1, r7
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fd11 	bl	80093c4 <_Bfree>
 80089a2:	e695      	b.n	80086d0 <_dtoa_r+0x6a0>
 80089a4:	2600      	movs	r6, #0
 80089a6:	4637      	mov	r7, r6
 80089a8:	e7e1      	b.n	800896e <_dtoa_r+0x93e>
 80089aa:	9700      	str	r7, [sp, #0]
 80089ac:	4637      	mov	r7, r6
 80089ae:	e599      	b.n	80084e4 <_dtoa_r+0x4b4>
 80089b0:	40240000 	.word	0x40240000
 80089b4:	9b08      	ldr	r3, [sp, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80ca 	beq.w	8008b50 <_dtoa_r+0xb20>
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	9302      	str	r3, [sp, #8]
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	dd05      	ble.n	80089d0 <_dtoa_r+0x9a0>
 80089c4:	4639      	mov	r1, r7
 80089c6:	462a      	mov	r2, r5
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 ff17 	bl	80097fc <__lshift>
 80089ce:	4607      	mov	r7, r0
 80089d0:	f1b8 0f00 	cmp.w	r8, #0
 80089d4:	d05b      	beq.n	8008a8e <_dtoa_r+0xa5e>
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fcb3 	bl	8009344 <_Balloc>
 80089de:	4605      	mov	r5, r0
 80089e0:	b928      	cbnz	r0, 80089ee <_dtoa_r+0x9be>
 80089e2:	4b87      	ldr	r3, [pc, #540]	; (8008c00 <_dtoa_r+0xbd0>)
 80089e4:	4602      	mov	r2, r0
 80089e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089ea:	f7ff bb3b 	b.w	8008064 <_dtoa_r+0x34>
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	3202      	adds	r2, #2
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	f107 010c 	add.w	r1, r7, #12
 80089f8:	300c      	adds	r0, #12
 80089fa:	f000 fc95 	bl	8009328 <memcpy>
 80089fe:	2201      	movs	r2, #1
 8008a00:	4629      	mov	r1, r5
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fefa 	bl	80097fc <__lshift>
 8008a08:	9b01      	ldr	r3, [sp, #4]
 8008a0a:	f103 0901 	add.w	r9, r3, #1
 8008a0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a12:	4413      	add	r3, r2
 8008a14:	9305      	str	r3, [sp, #20]
 8008a16:	f00a 0301 	and.w	r3, sl, #1
 8008a1a:	46b8      	mov	r8, r7
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	4607      	mov	r7, r0
 8008a20:	4631      	mov	r1, r6
 8008a22:	ee18 0a10 	vmov	r0, s16
 8008a26:	f7ff fa77 	bl	8007f18 <quorem>
 8008a2a:	4641      	mov	r1, r8
 8008a2c:	9002      	str	r0, [sp, #8]
 8008a2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a32:	ee18 0a10 	vmov	r0, s16
 8008a36:	f000 ff51 	bl	80098dc <__mcmp>
 8008a3a:	463a      	mov	r2, r7
 8008a3c:	9003      	str	r0, [sp, #12]
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 ff67 	bl	8009914 <__mdiff>
 8008a46:	68c2      	ldr	r2, [r0, #12]
 8008a48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	bb02      	cbnz	r2, 8008a92 <_dtoa_r+0xa62>
 8008a50:	4601      	mov	r1, r0
 8008a52:	ee18 0a10 	vmov	r0, s16
 8008a56:	f000 ff41 	bl	80098dc <__mcmp>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4620      	mov	r0, r4
 8008a60:	9207      	str	r2, [sp, #28]
 8008a62:	f000 fcaf 	bl	80093c4 <_Bfree>
 8008a66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a6a:	ea43 0102 	orr.w	r1, r3, r2
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	430b      	orrs	r3, r1
 8008a72:	464d      	mov	r5, r9
 8008a74:	d10f      	bne.n	8008a96 <_dtoa_r+0xa66>
 8008a76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a7a:	d02a      	beq.n	8008ad2 <_dtoa_r+0xaa2>
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dd02      	ble.n	8008a88 <_dtoa_r+0xa58>
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a88:	f88b a000 	strb.w	sl, [fp]
 8008a8c:	e775      	b.n	800897a <_dtoa_r+0x94a>
 8008a8e:	4638      	mov	r0, r7
 8008a90:	e7ba      	b.n	8008a08 <_dtoa_r+0x9d8>
 8008a92:	2201      	movs	r2, #1
 8008a94:	e7e2      	b.n	8008a5c <_dtoa_r+0xa2c>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	db04      	blt.n	8008aa6 <_dtoa_r+0xa76>
 8008a9c:	9906      	ldr	r1, [sp, #24]
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	9904      	ldr	r1, [sp, #16]
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	d122      	bne.n	8008aec <_dtoa_r+0xabc>
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	ddee      	ble.n	8008a88 <_dtoa_r+0xa58>
 8008aaa:	ee18 1a10 	vmov	r1, s16
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fea3 	bl	80097fc <__lshift>
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	ee08 0a10 	vmov	s16, r0
 8008abc:	f000 ff0e 	bl	80098dc <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	dc03      	bgt.n	8008acc <_dtoa_r+0xa9c>
 8008ac4:	d1e0      	bne.n	8008a88 <_dtoa_r+0xa58>
 8008ac6:	f01a 0f01 	tst.w	sl, #1
 8008aca:	d0dd      	beq.n	8008a88 <_dtoa_r+0xa58>
 8008acc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ad0:	d1d7      	bne.n	8008a82 <_dtoa_r+0xa52>
 8008ad2:	2339      	movs	r3, #57	; 0x39
 8008ad4:	f88b 3000 	strb.w	r3, [fp]
 8008ad8:	462b      	mov	r3, r5
 8008ada:	461d      	mov	r5, r3
 8008adc:	3b01      	subs	r3, #1
 8008ade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ae2:	2a39      	cmp	r2, #57	; 0x39
 8008ae4:	d071      	beq.n	8008bca <_dtoa_r+0xb9a>
 8008ae6:	3201      	adds	r2, #1
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e746      	b.n	800897a <_dtoa_r+0x94a>
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	dd07      	ble.n	8008b00 <_dtoa_r+0xad0>
 8008af0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008af4:	d0ed      	beq.n	8008ad2 <_dtoa_r+0xaa2>
 8008af6:	f10a 0301 	add.w	r3, sl, #1
 8008afa:	f88b 3000 	strb.w	r3, [fp]
 8008afe:	e73c      	b.n	800897a <_dtoa_r+0x94a>
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b06:	4599      	cmp	r9, r3
 8008b08:	d047      	beq.n	8008b9a <_dtoa_r+0xb6a>
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	2300      	movs	r3, #0
 8008b10:	220a      	movs	r2, #10
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 fc78 	bl	8009408 <__multadd>
 8008b18:	45b8      	cmp	r8, r7
 8008b1a:	ee08 0a10 	vmov	s16, r0
 8008b1e:	f04f 0300 	mov.w	r3, #0
 8008b22:	f04f 020a 	mov.w	r2, #10
 8008b26:	4641      	mov	r1, r8
 8008b28:	4620      	mov	r0, r4
 8008b2a:	d106      	bne.n	8008b3a <_dtoa_r+0xb0a>
 8008b2c:	f000 fc6c 	bl	8009408 <__multadd>
 8008b30:	4680      	mov	r8, r0
 8008b32:	4607      	mov	r7, r0
 8008b34:	f109 0901 	add.w	r9, r9, #1
 8008b38:	e772      	b.n	8008a20 <_dtoa_r+0x9f0>
 8008b3a:	f000 fc65 	bl	8009408 <__multadd>
 8008b3e:	4639      	mov	r1, r7
 8008b40:	4680      	mov	r8, r0
 8008b42:	2300      	movs	r3, #0
 8008b44:	220a      	movs	r2, #10
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fc5e 	bl	8009408 <__multadd>
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	e7f1      	b.n	8008b34 <_dtoa_r+0xb04>
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	9302      	str	r3, [sp, #8]
 8008b54:	9d01      	ldr	r5, [sp, #4]
 8008b56:	ee18 0a10 	vmov	r0, s16
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	f7ff f9dc 	bl	8007f18 <quorem>
 8008b60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	f805 ab01 	strb.w	sl, [r5], #1
 8008b6a:	1aea      	subs	r2, r5, r3
 8008b6c:	9b02      	ldr	r3, [sp, #8]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	dd09      	ble.n	8008b86 <_dtoa_r+0xb56>
 8008b72:	ee18 1a10 	vmov	r1, s16
 8008b76:	2300      	movs	r3, #0
 8008b78:	220a      	movs	r2, #10
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fc44 	bl	8009408 <__multadd>
 8008b80:	ee08 0a10 	vmov	s16, r0
 8008b84:	e7e7      	b.n	8008b56 <_dtoa_r+0xb26>
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bfc8      	it	gt
 8008b8c:	461d      	movgt	r5, r3
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	bfd8      	it	le
 8008b92:	2501      	movle	r5, #1
 8008b94:	441d      	add	r5, r3
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	ee18 1a10 	vmov	r1, s16
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fe2b 	bl	80097fc <__lshift>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	ee08 0a10 	vmov	s16, r0
 8008bac:	f000 fe96 	bl	80098dc <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	dc91      	bgt.n	8008ad8 <_dtoa_r+0xaa8>
 8008bb4:	d102      	bne.n	8008bbc <_dtoa_r+0xb8c>
 8008bb6:	f01a 0f01 	tst.w	sl, #1
 8008bba:	d18d      	bne.n	8008ad8 <_dtoa_r+0xaa8>
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc4:	2a30      	cmp	r2, #48	; 0x30
 8008bc6:	d0fa      	beq.n	8008bbe <_dtoa_r+0xb8e>
 8008bc8:	e6d7      	b.n	800897a <_dtoa_r+0x94a>
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d184      	bne.n	8008ada <_dtoa_r+0xaaa>
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	2331      	movs	r3, #49	; 0x31
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	e6ce      	b.n	800897a <_dtoa_r+0x94a>
 8008bdc:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <_dtoa_r+0xbd4>)
 8008bde:	f7ff ba95 	b.w	800810c <_dtoa_r+0xdc>
 8008be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f47f aa6e 	bne.w	80080c6 <_dtoa_r+0x96>
 8008bea:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <_dtoa_r+0xbd8>)
 8008bec:	f7ff ba8e 	b.w	800810c <_dtoa_r+0xdc>
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dcae      	bgt.n	8008b54 <_dtoa_r+0xb24>
 8008bf6:	9b06      	ldr	r3, [sp, #24]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	f73f aea8 	bgt.w	800894e <_dtoa_r+0x91e>
 8008bfe:	e7a9      	b.n	8008b54 <_dtoa_r+0xb24>
 8008c00:	0800b048 	.word	0x0800b048
 8008c04:	0800ae4c 	.word	0x0800ae4c
 8008c08:	0800afc9 	.word	0x0800afc9

08008c0c <rshift>:
 8008c0c:	6903      	ldr	r3, [r0, #16]
 8008c0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c16:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c1a:	f100 0414 	add.w	r4, r0, #20
 8008c1e:	dd45      	ble.n	8008cac <rshift+0xa0>
 8008c20:	f011 011f 	ands.w	r1, r1, #31
 8008c24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c2c:	d10c      	bne.n	8008c48 <rshift+0x3c>
 8008c2e:	f100 0710 	add.w	r7, r0, #16
 8008c32:	4629      	mov	r1, r5
 8008c34:	42b1      	cmp	r1, r6
 8008c36:	d334      	bcc.n	8008ca2 <rshift+0x96>
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	1eea      	subs	r2, r5, #3
 8008c3e:	4296      	cmp	r6, r2
 8008c40:	bf38      	it	cc
 8008c42:	2300      	movcc	r3, #0
 8008c44:	4423      	add	r3, r4
 8008c46:	e015      	b.n	8008c74 <rshift+0x68>
 8008c48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c4c:	f1c1 0820 	rsb	r8, r1, #32
 8008c50:	40cf      	lsrs	r7, r1
 8008c52:	f105 0e04 	add.w	lr, r5, #4
 8008c56:	46a1      	mov	r9, r4
 8008c58:	4576      	cmp	r6, lr
 8008c5a:	46f4      	mov	ip, lr
 8008c5c:	d815      	bhi.n	8008c8a <rshift+0x7e>
 8008c5e:	1a9a      	subs	r2, r3, r2
 8008c60:	0092      	lsls	r2, r2, #2
 8008c62:	3a04      	subs	r2, #4
 8008c64:	3501      	adds	r5, #1
 8008c66:	42ae      	cmp	r6, r5
 8008c68:	bf38      	it	cc
 8008c6a:	2200      	movcc	r2, #0
 8008c6c:	18a3      	adds	r3, r4, r2
 8008c6e:	50a7      	str	r7, [r4, r2]
 8008c70:	b107      	cbz	r7, 8008c74 <rshift+0x68>
 8008c72:	3304      	adds	r3, #4
 8008c74:	1b1a      	subs	r2, r3, r4
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c7c:	bf08      	it	eq
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	6102      	str	r2, [r0, #16]
 8008c82:	bf08      	it	eq
 8008c84:	6143      	streq	r3, [r0, #20]
 8008c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c8a:	f8dc c000 	ldr.w	ip, [ip]
 8008c8e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c92:	ea4c 0707 	orr.w	r7, ip, r7
 8008c96:	f849 7b04 	str.w	r7, [r9], #4
 8008c9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c9e:	40cf      	lsrs	r7, r1
 8008ca0:	e7da      	b.n	8008c58 <rshift+0x4c>
 8008ca2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ca6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008caa:	e7c3      	b.n	8008c34 <rshift+0x28>
 8008cac:	4623      	mov	r3, r4
 8008cae:	e7e1      	b.n	8008c74 <rshift+0x68>

08008cb0 <__hexdig_fun>:
 8008cb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	d802      	bhi.n	8008cbe <__hexdig_fun+0xe>
 8008cb8:	3820      	subs	r0, #32
 8008cba:	b2c0      	uxtb	r0, r0
 8008cbc:	4770      	bx	lr
 8008cbe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008cc2:	2b05      	cmp	r3, #5
 8008cc4:	d801      	bhi.n	8008cca <__hexdig_fun+0x1a>
 8008cc6:	3847      	subs	r0, #71	; 0x47
 8008cc8:	e7f7      	b.n	8008cba <__hexdig_fun+0xa>
 8008cca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d801      	bhi.n	8008cd6 <__hexdig_fun+0x26>
 8008cd2:	3827      	subs	r0, #39	; 0x27
 8008cd4:	e7f1      	b.n	8008cba <__hexdig_fun+0xa>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	4770      	bx	lr
	...

08008cdc <__gethex>:
 8008cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce0:	ed2d 8b02 	vpush	{d8}
 8008ce4:	b089      	sub	sp, #36	; 0x24
 8008ce6:	ee08 0a10 	vmov	s16, r0
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	4bb4      	ldr	r3, [pc, #720]	; (8008fc0 <__gethex+0x2e4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	468b      	mov	fp, r1
 8008cf6:	4690      	mov	r8, r2
 8008cf8:	f7f7 fa72 	bl	80001e0 <strlen>
 8008cfc:	9b01      	ldr	r3, [sp, #4]
 8008cfe:	f8db 2000 	ldr.w	r2, [fp]
 8008d02:	4403      	add	r3, r0
 8008d04:	4682      	mov	sl, r0
 8008d06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	1c93      	adds	r3, r2, #2
 8008d0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d16:	32fe      	adds	r2, #254	; 0xfe
 8008d18:	18d1      	adds	r1, r2, r3
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d20:	9100      	str	r1, [sp, #0]
 8008d22:	2830      	cmp	r0, #48	; 0x30
 8008d24:	d0f8      	beq.n	8008d18 <__gethex+0x3c>
 8008d26:	f7ff ffc3 	bl	8008cb0 <__hexdig_fun>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d13a      	bne.n	8008da6 <__gethex+0xca>
 8008d30:	9901      	ldr	r1, [sp, #4]
 8008d32:	4652      	mov	r2, sl
 8008d34:	4638      	mov	r0, r7
 8008d36:	f001 fa33 	bl	800a1a0 <strncmp>
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d168      	bne.n	8008e12 <__gethex+0x136>
 8008d40:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d44:	eb07 060a 	add.w	r6, r7, sl
 8008d48:	f7ff ffb2 	bl	8008cb0 <__hexdig_fun>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d062      	beq.n	8008e16 <__gethex+0x13a>
 8008d50:	4633      	mov	r3, r6
 8008d52:	7818      	ldrb	r0, [r3, #0]
 8008d54:	2830      	cmp	r0, #48	; 0x30
 8008d56:	461f      	mov	r7, r3
 8008d58:	f103 0301 	add.w	r3, r3, #1
 8008d5c:	d0f9      	beq.n	8008d52 <__gethex+0x76>
 8008d5e:	f7ff ffa7 	bl	8008cb0 <__hexdig_fun>
 8008d62:	2301      	movs	r3, #1
 8008d64:	fab0 f480 	clz	r4, r0
 8008d68:	0964      	lsrs	r4, r4, #5
 8008d6a:	4635      	mov	r5, r6
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	463a      	mov	r2, r7
 8008d70:	4616      	mov	r6, r2
 8008d72:	3201      	adds	r2, #1
 8008d74:	7830      	ldrb	r0, [r6, #0]
 8008d76:	f7ff ff9b 	bl	8008cb0 <__hexdig_fun>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1f8      	bne.n	8008d70 <__gethex+0x94>
 8008d7e:	9901      	ldr	r1, [sp, #4]
 8008d80:	4652      	mov	r2, sl
 8008d82:	4630      	mov	r0, r6
 8008d84:	f001 fa0c 	bl	800a1a0 <strncmp>
 8008d88:	b980      	cbnz	r0, 8008dac <__gethex+0xd0>
 8008d8a:	b94d      	cbnz	r5, 8008da0 <__gethex+0xc4>
 8008d8c:	eb06 050a 	add.w	r5, r6, sl
 8008d90:	462a      	mov	r2, r5
 8008d92:	4616      	mov	r6, r2
 8008d94:	3201      	adds	r2, #1
 8008d96:	7830      	ldrb	r0, [r6, #0]
 8008d98:	f7ff ff8a 	bl	8008cb0 <__hexdig_fun>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1f8      	bne.n	8008d92 <__gethex+0xb6>
 8008da0:	1bad      	subs	r5, r5, r6
 8008da2:	00ad      	lsls	r5, r5, #2
 8008da4:	e004      	b.n	8008db0 <__gethex+0xd4>
 8008da6:	2400      	movs	r4, #0
 8008da8:	4625      	mov	r5, r4
 8008daa:	e7e0      	b.n	8008d6e <__gethex+0x92>
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	d1f7      	bne.n	8008da0 <__gethex+0xc4>
 8008db0:	7833      	ldrb	r3, [r6, #0]
 8008db2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008db6:	2b50      	cmp	r3, #80	; 0x50
 8008db8:	d13b      	bne.n	8008e32 <__gethex+0x156>
 8008dba:	7873      	ldrb	r3, [r6, #1]
 8008dbc:	2b2b      	cmp	r3, #43	; 0x2b
 8008dbe:	d02c      	beq.n	8008e1a <__gethex+0x13e>
 8008dc0:	2b2d      	cmp	r3, #45	; 0x2d
 8008dc2:	d02e      	beq.n	8008e22 <__gethex+0x146>
 8008dc4:	1c71      	adds	r1, r6, #1
 8008dc6:	f04f 0900 	mov.w	r9, #0
 8008dca:	7808      	ldrb	r0, [r1, #0]
 8008dcc:	f7ff ff70 	bl	8008cb0 <__hexdig_fun>
 8008dd0:	1e43      	subs	r3, r0, #1
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b18      	cmp	r3, #24
 8008dd6:	d82c      	bhi.n	8008e32 <__gethex+0x156>
 8008dd8:	f1a0 0210 	sub.w	r2, r0, #16
 8008ddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008de0:	f7ff ff66 	bl	8008cb0 <__hexdig_fun>
 8008de4:	1e43      	subs	r3, r0, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b18      	cmp	r3, #24
 8008dea:	d91d      	bls.n	8008e28 <__gethex+0x14c>
 8008dec:	f1b9 0f00 	cmp.w	r9, #0
 8008df0:	d000      	beq.n	8008df4 <__gethex+0x118>
 8008df2:	4252      	negs	r2, r2
 8008df4:	4415      	add	r5, r2
 8008df6:	f8cb 1000 	str.w	r1, [fp]
 8008dfa:	b1e4      	cbz	r4, 8008e36 <__gethex+0x15a>
 8008dfc:	9b00      	ldr	r3, [sp, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bf14      	ite	ne
 8008e02:	2700      	movne	r7, #0
 8008e04:	2706      	moveq	r7, #6
 8008e06:	4638      	mov	r0, r7
 8008e08:	b009      	add	sp, #36	; 0x24
 8008e0a:	ecbd 8b02 	vpop	{d8}
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	463e      	mov	r6, r7
 8008e14:	4625      	mov	r5, r4
 8008e16:	2401      	movs	r4, #1
 8008e18:	e7ca      	b.n	8008db0 <__gethex+0xd4>
 8008e1a:	f04f 0900 	mov.w	r9, #0
 8008e1e:	1cb1      	adds	r1, r6, #2
 8008e20:	e7d3      	b.n	8008dca <__gethex+0xee>
 8008e22:	f04f 0901 	mov.w	r9, #1
 8008e26:	e7fa      	b.n	8008e1e <__gethex+0x142>
 8008e28:	230a      	movs	r3, #10
 8008e2a:	fb03 0202 	mla	r2, r3, r2, r0
 8008e2e:	3a10      	subs	r2, #16
 8008e30:	e7d4      	b.n	8008ddc <__gethex+0x100>
 8008e32:	4631      	mov	r1, r6
 8008e34:	e7df      	b.n	8008df6 <__gethex+0x11a>
 8008e36:	1bf3      	subs	r3, r6, r7
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	dc0b      	bgt.n	8008e58 <__gethex+0x17c>
 8008e40:	ee18 0a10 	vmov	r0, s16
 8008e44:	f000 fa7e 	bl	8009344 <_Balloc>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	b940      	cbnz	r0, 8008e5e <__gethex+0x182>
 8008e4c:	4b5d      	ldr	r3, [pc, #372]	; (8008fc4 <__gethex+0x2e8>)
 8008e4e:	4602      	mov	r2, r0
 8008e50:	21de      	movs	r1, #222	; 0xde
 8008e52:	485d      	ldr	r0, [pc, #372]	; (8008fc8 <__gethex+0x2ec>)
 8008e54:	f001 f9c6 	bl	800a1e4 <__assert_func>
 8008e58:	3101      	adds	r1, #1
 8008e5a:	105b      	asrs	r3, r3, #1
 8008e5c:	e7ee      	b.n	8008e3c <__gethex+0x160>
 8008e5e:	f100 0914 	add.w	r9, r0, #20
 8008e62:	f04f 0b00 	mov.w	fp, #0
 8008e66:	f1ca 0301 	rsb	r3, sl, #1
 8008e6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e6e:	f8cd b000 	str.w	fp, [sp]
 8008e72:	9306      	str	r3, [sp, #24]
 8008e74:	42b7      	cmp	r7, r6
 8008e76:	d340      	bcc.n	8008efa <__gethex+0x21e>
 8008e78:	9802      	ldr	r0, [sp, #8]
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	f840 3b04 	str.w	r3, [r0], #4
 8008e80:	eba0 0009 	sub.w	r0, r0, r9
 8008e84:	1080      	asrs	r0, r0, #2
 8008e86:	0146      	lsls	r6, r0, #5
 8008e88:	6120      	str	r0, [r4, #16]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fb4c 	bl	8009528 <__hi0bits>
 8008e90:	1a30      	subs	r0, r6, r0
 8008e92:	f8d8 6000 	ldr.w	r6, [r8]
 8008e96:	42b0      	cmp	r0, r6
 8008e98:	dd63      	ble.n	8008f62 <__gethex+0x286>
 8008e9a:	1b87      	subs	r7, r0, r6
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 fef0 	bl	8009c84 <__any_on>
 8008ea4:	4682      	mov	sl, r0
 8008ea6:	b1a8      	cbz	r0, 8008ed4 <__gethex+0x1f8>
 8008ea8:	1e7b      	subs	r3, r7, #1
 8008eaa:	1159      	asrs	r1, r3, #5
 8008eac:	f003 021f 	and.w	r2, r3, #31
 8008eb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008eb4:	f04f 0a01 	mov.w	sl, #1
 8008eb8:	fa0a f202 	lsl.w	r2, sl, r2
 8008ebc:	420a      	tst	r2, r1
 8008ebe:	d009      	beq.n	8008ed4 <__gethex+0x1f8>
 8008ec0:	4553      	cmp	r3, sl
 8008ec2:	dd05      	ble.n	8008ed0 <__gethex+0x1f4>
 8008ec4:	1eb9      	subs	r1, r7, #2
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fedc 	bl	8009c84 <__any_on>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d145      	bne.n	8008f5c <__gethex+0x280>
 8008ed0:	f04f 0a02 	mov.w	sl, #2
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f7ff fe98 	bl	8008c0c <rshift>
 8008edc:	443d      	add	r5, r7
 8008ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ee2:	42ab      	cmp	r3, r5
 8008ee4:	da4c      	bge.n	8008f80 <__gethex+0x2a4>
 8008ee6:	ee18 0a10 	vmov	r0, s16
 8008eea:	4621      	mov	r1, r4
 8008eec:	f000 fa6a 	bl	80093c4 <_Bfree>
 8008ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	27a3      	movs	r7, #163	; 0xa3
 8008ef8:	e785      	b.n	8008e06 <__gethex+0x12a>
 8008efa:	1e73      	subs	r3, r6, #1
 8008efc:	9a05      	ldr	r2, [sp, #20]
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d019      	beq.n	8008f3c <__gethex+0x260>
 8008f08:	f1bb 0f20 	cmp.w	fp, #32
 8008f0c:	d107      	bne.n	8008f1e <__gethex+0x242>
 8008f0e:	9b02      	ldr	r3, [sp, #8]
 8008f10:	9a00      	ldr	r2, [sp, #0]
 8008f12:	f843 2b04 	str.w	r2, [r3], #4
 8008f16:	9302      	str	r3, [sp, #8]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	469b      	mov	fp, r3
 8008f1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f22:	f7ff fec5 	bl	8008cb0 <__hexdig_fun>
 8008f26:	9b00      	ldr	r3, [sp, #0]
 8008f28:	f000 000f 	and.w	r0, r0, #15
 8008f2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f30:	4303      	orrs	r3, r0
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	f10b 0b04 	add.w	fp, fp, #4
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	e00d      	b.n	8008f58 <__gethex+0x27c>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	9a06      	ldr	r2, [sp, #24]
 8008f40:	4413      	add	r3, r2
 8008f42:	42bb      	cmp	r3, r7
 8008f44:	d3e0      	bcc.n	8008f08 <__gethex+0x22c>
 8008f46:	4618      	mov	r0, r3
 8008f48:	9901      	ldr	r1, [sp, #4]
 8008f4a:	9307      	str	r3, [sp, #28]
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	f001 f927 	bl	800a1a0 <strncmp>
 8008f52:	9b07      	ldr	r3, [sp, #28]
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d1d7      	bne.n	8008f08 <__gethex+0x22c>
 8008f58:	461e      	mov	r6, r3
 8008f5a:	e78b      	b.n	8008e74 <__gethex+0x198>
 8008f5c:	f04f 0a03 	mov.w	sl, #3
 8008f60:	e7b8      	b.n	8008ed4 <__gethex+0x1f8>
 8008f62:	da0a      	bge.n	8008f7a <__gethex+0x29e>
 8008f64:	1a37      	subs	r7, r6, r0
 8008f66:	4621      	mov	r1, r4
 8008f68:	ee18 0a10 	vmov	r0, s16
 8008f6c:	463a      	mov	r2, r7
 8008f6e:	f000 fc45 	bl	80097fc <__lshift>
 8008f72:	1bed      	subs	r5, r5, r7
 8008f74:	4604      	mov	r4, r0
 8008f76:	f100 0914 	add.w	r9, r0, #20
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	e7ae      	b.n	8008ede <__gethex+0x202>
 8008f80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f84:	42a8      	cmp	r0, r5
 8008f86:	dd72      	ble.n	800906e <__gethex+0x392>
 8008f88:	1b45      	subs	r5, r0, r5
 8008f8a:	42ae      	cmp	r6, r5
 8008f8c:	dc36      	bgt.n	8008ffc <__gethex+0x320>
 8008f8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d02a      	beq.n	8008fec <__gethex+0x310>
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d02c      	beq.n	8008ff4 <__gethex+0x318>
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d11c      	bne.n	8008fd8 <__gethex+0x2fc>
 8008f9e:	42ae      	cmp	r6, r5
 8008fa0:	d11a      	bne.n	8008fd8 <__gethex+0x2fc>
 8008fa2:	2e01      	cmp	r6, #1
 8008fa4:	d112      	bne.n	8008fcc <__gethex+0x2f0>
 8008fa6:	9a04      	ldr	r2, [sp, #16]
 8008fa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	6123      	str	r3, [r4, #16]
 8008fb2:	f8c9 3000 	str.w	r3, [r9]
 8008fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fb8:	2762      	movs	r7, #98	; 0x62
 8008fba:	601c      	str	r4, [r3, #0]
 8008fbc:	e723      	b.n	8008e06 <__gethex+0x12a>
 8008fbe:	bf00      	nop
 8008fc0:	0800b0c0 	.word	0x0800b0c0
 8008fc4:	0800b048 	.word	0x0800b048
 8008fc8:	0800b059 	.word	0x0800b059
 8008fcc:	1e71      	subs	r1, r6, #1
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 fe58 	bl	8009c84 <__any_on>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1e6      	bne.n	8008fa6 <__gethex+0x2ca>
 8008fd8:	ee18 0a10 	vmov	r0, s16
 8008fdc:	4621      	mov	r1, r4
 8008fde:	f000 f9f1 	bl	80093c4 <_Bfree>
 8008fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	2750      	movs	r7, #80	; 0x50
 8008fea:	e70c      	b.n	8008e06 <__gethex+0x12a>
 8008fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1f2      	bne.n	8008fd8 <__gethex+0x2fc>
 8008ff2:	e7d8      	b.n	8008fa6 <__gethex+0x2ca>
 8008ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1d5      	bne.n	8008fa6 <__gethex+0x2ca>
 8008ffa:	e7ed      	b.n	8008fd8 <__gethex+0x2fc>
 8008ffc:	1e6f      	subs	r7, r5, #1
 8008ffe:	f1ba 0f00 	cmp.w	sl, #0
 8009002:	d131      	bne.n	8009068 <__gethex+0x38c>
 8009004:	b127      	cbz	r7, 8009010 <__gethex+0x334>
 8009006:	4639      	mov	r1, r7
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fe3b 	bl	8009c84 <__any_on>
 800900e:	4682      	mov	sl, r0
 8009010:	117b      	asrs	r3, r7, #5
 8009012:	2101      	movs	r1, #1
 8009014:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009018:	f007 071f 	and.w	r7, r7, #31
 800901c:	fa01 f707 	lsl.w	r7, r1, r7
 8009020:	421f      	tst	r7, r3
 8009022:	4629      	mov	r1, r5
 8009024:	4620      	mov	r0, r4
 8009026:	bf18      	it	ne
 8009028:	f04a 0a02 	orrne.w	sl, sl, #2
 800902c:	1b76      	subs	r6, r6, r5
 800902e:	f7ff fded 	bl	8008c0c <rshift>
 8009032:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009036:	2702      	movs	r7, #2
 8009038:	f1ba 0f00 	cmp.w	sl, #0
 800903c:	d048      	beq.n	80090d0 <__gethex+0x3f4>
 800903e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009042:	2b02      	cmp	r3, #2
 8009044:	d015      	beq.n	8009072 <__gethex+0x396>
 8009046:	2b03      	cmp	r3, #3
 8009048:	d017      	beq.n	800907a <__gethex+0x39e>
 800904a:	2b01      	cmp	r3, #1
 800904c:	d109      	bne.n	8009062 <__gethex+0x386>
 800904e:	f01a 0f02 	tst.w	sl, #2
 8009052:	d006      	beq.n	8009062 <__gethex+0x386>
 8009054:	f8d9 0000 	ldr.w	r0, [r9]
 8009058:	ea4a 0a00 	orr.w	sl, sl, r0
 800905c:	f01a 0f01 	tst.w	sl, #1
 8009060:	d10e      	bne.n	8009080 <__gethex+0x3a4>
 8009062:	f047 0710 	orr.w	r7, r7, #16
 8009066:	e033      	b.n	80090d0 <__gethex+0x3f4>
 8009068:	f04f 0a01 	mov.w	sl, #1
 800906c:	e7d0      	b.n	8009010 <__gethex+0x334>
 800906e:	2701      	movs	r7, #1
 8009070:	e7e2      	b.n	8009038 <__gethex+0x35c>
 8009072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009074:	f1c3 0301 	rsb	r3, r3, #1
 8009078:	9315      	str	r3, [sp, #84]	; 0x54
 800907a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0f0      	beq.n	8009062 <__gethex+0x386>
 8009080:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009084:	f104 0314 	add.w	r3, r4, #20
 8009088:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800908c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009090:	f04f 0c00 	mov.w	ip, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f853 2b04 	ldr.w	r2, [r3], #4
 800909a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800909e:	d01c      	beq.n	80090da <__gethex+0x3fe>
 80090a0:	3201      	adds	r2, #1
 80090a2:	6002      	str	r2, [r0, #0]
 80090a4:	2f02      	cmp	r7, #2
 80090a6:	f104 0314 	add.w	r3, r4, #20
 80090aa:	d13f      	bne.n	800912c <__gethex+0x450>
 80090ac:	f8d8 2000 	ldr.w	r2, [r8]
 80090b0:	3a01      	subs	r2, #1
 80090b2:	42b2      	cmp	r2, r6
 80090b4:	d10a      	bne.n	80090cc <__gethex+0x3f0>
 80090b6:	1171      	asrs	r1, r6, #5
 80090b8:	2201      	movs	r2, #1
 80090ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090be:	f006 061f 	and.w	r6, r6, #31
 80090c2:	fa02 f606 	lsl.w	r6, r2, r6
 80090c6:	421e      	tst	r6, r3
 80090c8:	bf18      	it	ne
 80090ca:	4617      	movne	r7, r2
 80090cc:	f047 0720 	orr.w	r7, r7, #32
 80090d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090d2:	601c      	str	r4, [r3, #0]
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	601d      	str	r5, [r3, #0]
 80090d8:	e695      	b.n	8008e06 <__gethex+0x12a>
 80090da:	4299      	cmp	r1, r3
 80090dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80090e0:	d8d8      	bhi.n	8009094 <__gethex+0x3b8>
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	459b      	cmp	fp, r3
 80090e6:	db19      	blt.n	800911c <__gethex+0x440>
 80090e8:	6861      	ldr	r1, [r4, #4]
 80090ea:	ee18 0a10 	vmov	r0, s16
 80090ee:	3101      	adds	r1, #1
 80090f0:	f000 f928 	bl	8009344 <_Balloc>
 80090f4:	4681      	mov	r9, r0
 80090f6:	b918      	cbnz	r0, 8009100 <__gethex+0x424>
 80090f8:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <__gethex+0x488>)
 80090fa:	4602      	mov	r2, r0
 80090fc:	2184      	movs	r1, #132	; 0x84
 80090fe:	e6a8      	b.n	8008e52 <__gethex+0x176>
 8009100:	6922      	ldr	r2, [r4, #16]
 8009102:	3202      	adds	r2, #2
 8009104:	f104 010c 	add.w	r1, r4, #12
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	300c      	adds	r0, #12
 800910c:	f000 f90c 	bl	8009328 <memcpy>
 8009110:	4621      	mov	r1, r4
 8009112:	ee18 0a10 	vmov	r0, s16
 8009116:	f000 f955 	bl	80093c4 <_Bfree>
 800911a:	464c      	mov	r4, r9
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009124:	6122      	str	r2, [r4, #16]
 8009126:	2201      	movs	r2, #1
 8009128:	615a      	str	r2, [r3, #20]
 800912a:	e7bb      	b.n	80090a4 <__gethex+0x3c8>
 800912c:	6922      	ldr	r2, [r4, #16]
 800912e:	455a      	cmp	r2, fp
 8009130:	dd0b      	ble.n	800914a <__gethex+0x46e>
 8009132:	2101      	movs	r1, #1
 8009134:	4620      	mov	r0, r4
 8009136:	f7ff fd69 	bl	8008c0c <rshift>
 800913a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800913e:	3501      	adds	r5, #1
 8009140:	42ab      	cmp	r3, r5
 8009142:	f6ff aed0 	blt.w	8008ee6 <__gethex+0x20a>
 8009146:	2701      	movs	r7, #1
 8009148:	e7c0      	b.n	80090cc <__gethex+0x3f0>
 800914a:	f016 061f 	ands.w	r6, r6, #31
 800914e:	d0fa      	beq.n	8009146 <__gethex+0x46a>
 8009150:	4453      	add	r3, sl
 8009152:	f1c6 0620 	rsb	r6, r6, #32
 8009156:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800915a:	f000 f9e5 	bl	8009528 <__hi0bits>
 800915e:	42b0      	cmp	r0, r6
 8009160:	dbe7      	blt.n	8009132 <__gethex+0x456>
 8009162:	e7f0      	b.n	8009146 <__gethex+0x46a>
 8009164:	0800b048 	.word	0x0800b048

08009168 <L_shift>:
 8009168:	f1c2 0208 	rsb	r2, r2, #8
 800916c:	0092      	lsls	r2, r2, #2
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	f1c2 0620 	rsb	r6, r2, #32
 8009174:	6843      	ldr	r3, [r0, #4]
 8009176:	6804      	ldr	r4, [r0, #0]
 8009178:	fa03 f506 	lsl.w	r5, r3, r6
 800917c:	432c      	orrs	r4, r5
 800917e:	40d3      	lsrs	r3, r2
 8009180:	6004      	str	r4, [r0, #0]
 8009182:	f840 3f04 	str.w	r3, [r0, #4]!
 8009186:	4288      	cmp	r0, r1
 8009188:	d3f4      	bcc.n	8009174 <L_shift+0xc>
 800918a:	bd70      	pop	{r4, r5, r6, pc}

0800918c <__match>:
 800918c:	b530      	push	{r4, r5, lr}
 800918e:	6803      	ldr	r3, [r0, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009196:	b914      	cbnz	r4, 800919e <__match+0x12>
 8009198:	6003      	str	r3, [r0, #0]
 800919a:	2001      	movs	r0, #1
 800919c:	bd30      	pop	{r4, r5, pc}
 800919e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80091a6:	2d19      	cmp	r5, #25
 80091a8:	bf98      	it	ls
 80091aa:	3220      	addls	r2, #32
 80091ac:	42a2      	cmp	r2, r4
 80091ae:	d0f0      	beq.n	8009192 <__match+0x6>
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7f3      	b.n	800919c <__match+0x10>

080091b4 <__hexnan>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	680b      	ldr	r3, [r1, #0]
 80091ba:	115e      	asrs	r6, r3, #5
 80091bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091c0:	f013 031f 	ands.w	r3, r3, #31
 80091c4:	b087      	sub	sp, #28
 80091c6:	bf18      	it	ne
 80091c8:	3604      	addne	r6, #4
 80091ca:	2500      	movs	r5, #0
 80091cc:	1f37      	subs	r7, r6, #4
 80091ce:	4690      	mov	r8, r2
 80091d0:	6802      	ldr	r2, [r0, #0]
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	4682      	mov	sl, r0
 80091d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80091da:	46b9      	mov	r9, r7
 80091dc:	463c      	mov	r4, r7
 80091de:	9502      	str	r5, [sp, #8]
 80091e0:	46ab      	mov	fp, r5
 80091e2:	7851      	ldrb	r1, [r2, #1]
 80091e4:	1c53      	adds	r3, r2, #1
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	b341      	cbz	r1, 800923c <__hexnan+0x88>
 80091ea:	4608      	mov	r0, r1
 80091ec:	9205      	str	r2, [sp, #20]
 80091ee:	9104      	str	r1, [sp, #16]
 80091f0:	f7ff fd5e 	bl	8008cb0 <__hexdig_fun>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d14f      	bne.n	8009298 <__hexnan+0xe4>
 80091f8:	9904      	ldr	r1, [sp, #16]
 80091fa:	9a05      	ldr	r2, [sp, #20]
 80091fc:	2920      	cmp	r1, #32
 80091fe:	d818      	bhi.n	8009232 <__hexnan+0x7e>
 8009200:	9b02      	ldr	r3, [sp, #8]
 8009202:	459b      	cmp	fp, r3
 8009204:	dd13      	ble.n	800922e <__hexnan+0x7a>
 8009206:	454c      	cmp	r4, r9
 8009208:	d206      	bcs.n	8009218 <__hexnan+0x64>
 800920a:	2d07      	cmp	r5, #7
 800920c:	dc04      	bgt.n	8009218 <__hexnan+0x64>
 800920e:	462a      	mov	r2, r5
 8009210:	4649      	mov	r1, r9
 8009212:	4620      	mov	r0, r4
 8009214:	f7ff ffa8 	bl	8009168 <L_shift>
 8009218:	4544      	cmp	r4, r8
 800921a:	d950      	bls.n	80092be <__hexnan+0x10a>
 800921c:	2300      	movs	r3, #0
 800921e:	f1a4 0904 	sub.w	r9, r4, #4
 8009222:	f844 3c04 	str.w	r3, [r4, #-4]
 8009226:	f8cd b008 	str.w	fp, [sp, #8]
 800922a:	464c      	mov	r4, r9
 800922c:	461d      	mov	r5, r3
 800922e:	9a03      	ldr	r2, [sp, #12]
 8009230:	e7d7      	b.n	80091e2 <__hexnan+0x2e>
 8009232:	2929      	cmp	r1, #41	; 0x29
 8009234:	d156      	bne.n	80092e4 <__hexnan+0x130>
 8009236:	3202      	adds	r2, #2
 8009238:	f8ca 2000 	str.w	r2, [sl]
 800923c:	f1bb 0f00 	cmp.w	fp, #0
 8009240:	d050      	beq.n	80092e4 <__hexnan+0x130>
 8009242:	454c      	cmp	r4, r9
 8009244:	d206      	bcs.n	8009254 <__hexnan+0xa0>
 8009246:	2d07      	cmp	r5, #7
 8009248:	dc04      	bgt.n	8009254 <__hexnan+0xa0>
 800924a:	462a      	mov	r2, r5
 800924c:	4649      	mov	r1, r9
 800924e:	4620      	mov	r0, r4
 8009250:	f7ff ff8a 	bl	8009168 <L_shift>
 8009254:	4544      	cmp	r4, r8
 8009256:	d934      	bls.n	80092c2 <__hexnan+0x10e>
 8009258:	f1a8 0204 	sub.w	r2, r8, #4
 800925c:	4623      	mov	r3, r4
 800925e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009262:	f842 1f04 	str.w	r1, [r2, #4]!
 8009266:	429f      	cmp	r7, r3
 8009268:	d2f9      	bcs.n	800925e <__hexnan+0xaa>
 800926a:	1b3b      	subs	r3, r7, r4
 800926c:	f023 0303 	bic.w	r3, r3, #3
 8009270:	3304      	adds	r3, #4
 8009272:	3401      	adds	r4, #1
 8009274:	3e03      	subs	r6, #3
 8009276:	42b4      	cmp	r4, r6
 8009278:	bf88      	it	hi
 800927a:	2304      	movhi	r3, #4
 800927c:	4443      	add	r3, r8
 800927e:	2200      	movs	r2, #0
 8009280:	f843 2b04 	str.w	r2, [r3], #4
 8009284:	429f      	cmp	r7, r3
 8009286:	d2fb      	bcs.n	8009280 <__hexnan+0xcc>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	b91b      	cbnz	r3, 8009294 <__hexnan+0xe0>
 800928c:	4547      	cmp	r7, r8
 800928e:	d127      	bne.n	80092e0 <__hexnan+0x12c>
 8009290:	2301      	movs	r3, #1
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	2005      	movs	r0, #5
 8009296:	e026      	b.n	80092e6 <__hexnan+0x132>
 8009298:	3501      	adds	r5, #1
 800929a:	2d08      	cmp	r5, #8
 800929c:	f10b 0b01 	add.w	fp, fp, #1
 80092a0:	dd06      	ble.n	80092b0 <__hexnan+0xfc>
 80092a2:	4544      	cmp	r4, r8
 80092a4:	d9c3      	bls.n	800922e <__hexnan+0x7a>
 80092a6:	2300      	movs	r3, #0
 80092a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80092ac:	2501      	movs	r5, #1
 80092ae:	3c04      	subs	r4, #4
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	f000 000f 	and.w	r0, r0, #15
 80092b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	e7b7      	b.n	800922e <__hexnan+0x7a>
 80092be:	2508      	movs	r5, #8
 80092c0:	e7b5      	b.n	800922e <__hexnan+0x7a>
 80092c2:	9b01      	ldr	r3, [sp, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0df      	beq.n	8009288 <__hexnan+0xd4>
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092cc:	f1c3 0320 	rsb	r3, r3, #32
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092d8:	401a      	ands	r2, r3
 80092da:	f846 2c04 	str.w	r2, [r6, #-4]
 80092de:	e7d3      	b.n	8009288 <__hexnan+0xd4>
 80092e0:	3f04      	subs	r7, #4
 80092e2:	e7d1      	b.n	8009288 <__hexnan+0xd4>
 80092e4:	2004      	movs	r0, #4
 80092e6:	b007      	add	sp, #28
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092ec <_localeconv_r>:
 80092ec:	4800      	ldr	r0, [pc, #0]	; (80092f0 <_localeconv_r+0x4>)
 80092ee:	4770      	bx	lr
 80092f0:	20000168 	.word	0x20000168

080092f4 <malloc>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <malloc+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f000 bd67 	b.w	8009dcc <_malloc_r>
 80092fe:	bf00      	nop
 8009300:	20000010 	.word	0x20000010

08009304 <__ascii_mbtowc>:
 8009304:	b082      	sub	sp, #8
 8009306:	b901      	cbnz	r1, 800930a <__ascii_mbtowc+0x6>
 8009308:	a901      	add	r1, sp, #4
 800930a:	b142      	cbz	r2, 800931e <__ascii_mbtowc+0x1a>
 800930c:	b14b      	cbz	r3, 8009322 <__ascii_mbtowc+0x1e>
 800930e:	7813      	ldrb	r3, [r2, #0]
 8009310:	600b      	str	r3, [r1, #0]
 8009312:	7812      	ldrb	r2, [r2, #0]
 8009314:	1e10      	subs	r0, r2, #0
 8009316:	bf18      	it	ne
 8009318:	2001      	movne	r0, #1
 800931a:	b002      	add	sp, #8
 800931c:	4770      	bx	lr
 800931e:	4610      	mov	r0, r2
 8009320:	e7fb      	b.n	800931a <__ascii_mbtowc+0x16>
 8009322:	f06f 0001 	mvn.w	r0, #1
 8009326:	e7f8      	b.n	800931a <__ascii_mbtowc+0x16>

08009328 <memcpy>:
 8009328:	440a      	add	r2, r1
 800932a:	4291      	cmp	r1, r2
 800932c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009330:	d100      	bne.n	8009334 <memcpy+0xc>
 8009332:	4770      	bx	lr
 8009334:	b510      	push	{r4, lr}
 8009336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800933a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800933e:	4291      	cmp	r1, r2
 8009340:	d1f9      	bne.n	8009336 <memcpy+0xe>
 8009342:	bd10      	pop	{r4, pc}

08009344 <_Balloc>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009348:	4604      	mov	r4, r0
 800934a:	460d      	mov	r5, r1
 800934c:	b976      	cbnz	r6, 800936c <_Balloc+0x28>
 800934e:	2010      	movs	r0, #16
 8009350:	f7ff ffd0 	bl	80092f4 <malloc>
 8009354:	4602      	mov	r2, r0
 8009356:	6260      	str	r0, [r4, #36]	; 0x24
 8009358:	b920      	cbnz	r0, 8009364 <_Balloc+0x20>
 800935a:	4b18      	ldr	r3, [pc, #96]	; (80093bc <_Balloc+0x78>)
 800935c:	4818      	ldr	r0, [pc, #96]	; (80093c0 <_Balloc+0x7c>)
 800935e:	2166      	movs	r1, #102	; 0x66
 8009360:	f000 ff40 	bl	800a1e4 <__assert_func>
 8009364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009368:	6006      	str	r6, [r0, #0]
 800936a:	60c6      	str	r6, [r0, #12]
 800936c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800936e:	68f3      	ldr	r3, [r6, #12]
 8009370:	b183      	cbz	r3, 8009394 <_Balloc+0x50>
 8009372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800937a:	b9b8      	cbnz	r0, 80093ac <_Balloc+0x68>
 800937c:	2101      	movs	r1, #1
 800937e:	fa01 f605 	lsl.w	r6, r1, r5
 8009382:	1d72      	adds	r2, r6, #5
 8009384:	0092      	lsls	r2, r2, #2
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fc9d 	bl	8009cc6 <_calloc_r>
 800938c:	b160      	cbz	r0, 80093a8 <_Balloc+0x64>
 800938e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009392:	e00e      	b.n	80093b2 <_Balloc+0x6e>
 8009394:	2221      	movs	r2, #33	; 0x21
 8009396:	2104      	movs	r1, #4
 8009398:	4620      	mov	r0, r4
 800939a:	f000 fc94 	bl	8009cc6 <_calloc_r>
 800939e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a0:	60f0      	str	r0, [r6, #12]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e4      	bne.n	8009372 <_Balloc+0x2e>
 80093a8:	2000      	movs	r0, #0
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
 80093ac:	6802      	ldr	r2, [r0, #0]
 80093ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093b2:	2300      	movs	r3, #0
 80093b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093b8:	e7f7      	b.n	80093aa <_Balloc+0x66>
 80093ba:	bf00      	nop
 80093bc:	0800afd6 	.word	0x0800afd6
 80093c0:	0800b0d4 	.word	0x0800b0d4

080093c4 <_Bfree>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093c8:	4605      	mov	r5, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	b976      	cbnz	r6, 80093ec <_Bfree+0x28>
 80093ce:	2010      	movs	r0, #16
 80093d0:	f7ff ff90 	bl	80092f4 <malloc>
 80093d4:	4602      	mov	r2, r0
 80093d6:	6268      	str	r0, [r5, #36]	; 0x24
 80093d8:	b920      	cbnz	r0, 80093e4 <_Bfree+0x20>
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <_Bfree+0x3c>)
 80093dc:	4809      	ldr	r0, [pc, #36]	; (8009404 <_Bfree+0x40>)
 80093de:	218a      	movs	r1, #138	; 0x8a
 80093e0:	f000 ff00 	bl	800a1e4 <__assert_func>
 80093e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093e8:	6006      	str	r6, [r0, #0]
 80093ea:	60c6      	str	r6, [r0, #12]
 80093ec:	b13c      	cbz	r4, 80093fe <_Bfree+0x3a>
 80093ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093f0:	6862      	ldr	r2, [r4, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093f8:	6021      	str	r1, [r4, #0]
 80093fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	0800afd6 	.word	0x0800afd6
 8009404:	0800b0d4 	.word	0x0800b0d4

08009408 <__multadd>:
 8009408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940c:	690d      	ldr	r5, [r1, #16]
 800940e:	4607      	mov	r7, r0
 8009410:	460c      	mov	r4, r1
 8009412:	461e      	mov	r6, r3
 8009414:	f101 0c14 	add.w	ip, r1, #20
 8009418:	2000      	movs	r0, #0
 800941a:	f8dc 3000 	ldr.w	r3, [ip]
 800941e:	b299      	uxth	r1, r3
 8009420:	fb02 6101 	mla	r1, r2, r1, r6
 8009424:	0c1e      	lsrs	r6, r3, #16
 8009426:	0c0b      	lsrs	r3, r1, #16
 8009428:	fb02 3306 	mla	r3, r2, r6, r3
 800942c:	b289      	uxth	r1, r1
 800942e:	3001      	adds	r0, #1
 8009430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009434:	4285      	cmp	r5, r0
 8009436:	f84c 1b04 	str.w	r1, [ip], #4
 800943a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800943e:	dcec      	bgt.n	800941a <__multadd+0x12>
 8009440:	b30e      	cbz	r6, 8009486 <__multadd+0x7e>
 8009442:	68a3      	ldr	r3, [r4, #8]
 8009444:	42ab      	cmp	r3, r5
 8009446:	dc19      	bgt.n	800947c <__multadd+0x74>
 8009448:	6861      	ldr	r1, [r4, #4]
 800944a:	4638      	mov	r0, r7
 800944c:	3101      	adds	r1, #1
 800944e:	f7ff ff79 	bl	8009344 <_Balloc>
 8009452:	4680      	mov	r8, r0
 8009454:	b928      	cbnz	r0, 8009462 <__multadd+0x5a>
 8009456:	4602      	mov	r2, r0
 8009458:	4b0c      	ldr	r3, [pc, #48]	; (800948c <__multadd+0x84>)
 800945a:	480d      	ldr	r0, [pc, #52]	; (8009490 <__multadd+0x88>)
 800945c:	21b5      	movs	r1, #181	; 0xb5
 800945e:	f000 fec1 	bl	800a1e4 <__assert_func>
 8009462:	6922      	ldr	r2, [r4, #16]
 8009464:	3202      	adds	r2, #2
 8009466:	f104 010c 	add.w	r1, r4, #12
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	300c      	adds	r0, #12
 800946e:	f7ff ff5b 	bl	8009328 <memcpy>
 8009472:	4621      	mov	r1, r4
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff ffa5 	bl	80093c4 <_Bfree>
 800947a:	4644      	mov	r4, r8
 800947c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009480:	3501      	adds	r5, #1
 8009482:	615e      	str	r6, [r3, #20]
 8009484:	6125      	str	r5, [r4, #16]
 8009486:	4620      	mov	r0, r4
 8009488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948c:	0800b048 	.word	0x0800b048
 8009490:	0800b0d4 	.word	0x0800b0d4

08009494 <__s2b>:
 8009494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009498:	460c      	mov	r4, r1
 800949a:	4615      	mov	r5, r2
 800949c:	461f      	mov	r7, r3
 800949e:	2209      	movs	r2, #9
 80094a0:	3308      	adds	r3, #8
 80094a2:	4606      	mov	r6, r0
 80094a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094a8:	2100      	movs	r1, #0
 80094aa:	2201      	movs	r2, #1
 80094ac:	429a      	cmp	r2, r3
 80094ae:	db09      	blt.n	80094c4 <__s2b+0x30>
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7ff ff47 	bl	8009344 <_Balloc>
 80094b6:	b940      	cbnz	r0, 80094ca <__s2b+0x36>
 80094b8:	4602      	mov	r2, r0
 80094ba:	4b19      	ldr	r3, [pc, #100]	; (8009520 <__s2b+0x8c>)
 80094bc:	4819      	ldr	r0, [pc, #100]	; (8009524 <__s2b+0x90>)
 80094be:	21ce      	movs	r1, #206	; 0xce
 80094c0:	f000 fe90 	bl	800a1e4 <__assert_func>
 80094c4:	0052      	lsls	r2, r2, #1
 80094c6:	3101      	adds	r1, #1
 80094c8:	e7f0      	b.n	80094ac <__s2b+0x18>
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	6143      	str	r3, [r0, #20]
 80094ce:	2d09      	cmp	r5, #9
 80094d0:	f04f 0301 	mov.w	r3, #1
 80094d4:	6103      	str	r3, [r0, #16]
 80094d6:	dd16      	ble.n	8009506 <__s2b+0x72>
 80094d8:	f104 0909 	add.w	r9, r4, #9
 80094dc:	46c8      	mov	r8, r9
 80094de:	442c      	add	r4, r5
 80094e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094e4:	4601      	mov	r1, r0
 80094e6:	3b30      	subs	r3, #48	; 0x30
 80094e8:	220a      	movs	r2, #10
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7ff ff8c 	bl	8009408 <__multadd>
 80094f0:	45a0      	cmp	r8, r4
 80094f2:	d1f5      	bne.n	80094e0 <__s2b+0x4c>
 80094f4:	f1a5 0408 	sub.w	r4, r5, #8
 80094f8:	444c      	add	r4, r9
 80094fa:	1b2d      	subs	r5, r5, r4
 80094fc:	1963      	adds	r3, r4, r5
 80094fe:	42bb      	cmp	r3, r7
 8009500:	db04      	blt.n	800950c <__s2b+0x78>
 8009502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009506:	340a      	adds	r4, #10
 8009508:	2509      	movs	r5, #9
 800950a:	e7f6      	b.n	80094fa <__s2b+0x66>
 800950c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009510:	4601      	mov	r1, r0
 8009512:	3b30      	subs	r3, #48	; 0x30
 8009514:	220a      	movs	r2, #10
 8009516:	4630      	mov	r0, r6
 8009518:	f7ff ff76 	bl	8009408 <__multadd>
 800951c:	e7ee      	b.n	80094fc <__s2b+0x68>
 800951e:	bf00      	nop
 8009520:	0800b048 	.word	0x0800b048
 8009524:	0800b0d4 	.word	0x0800b0d4

08009528 <__hi0bits>:
 8009528:	0c03      	lsrs	r3, r0, #16
 800952a:	041b      	lsls	r3, r3, #16
 800952c:	b9d3      	cbnz	r3, 8009564 <__hi0bits+0x3c>
 800952e:	0400      	lsls	r0, r0, #16
 8009530:	2310      	movs	r3, #16
 8009532:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009536:	bf04      	itt	eq
 8009538:	0200      	lsleq	r0, r0, #8
 800953a:	3308      	addeq	r3, #8
 800953c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009540:	bf04      	itt	eq
 8009542:	0100      	lsleq	r0, r0, #4
 8009544:	3304      	addeq	r3, #4
 8009546:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800954a:	bf04      	itt	eq
 800954c:	0080      	lsleq	r0, r0, #2
 800954e:	3302      	addeq	r3, #2
 8009550:	2800      	cmp	r0, #0
 8009552:	db05      	blt.n	8009560 <__hi0bits+0x38>
 8009554:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009558:	f103 0301 	add.w	r3, r3, #1
 800955c:	bf08      	it	eq
 800955e:	2320      	moveq	r3, #32
 8009560:	4618      	mov	r0, r3
 8009562:	4770      	bx	lr
 8009564:	2300      	movs	r3, #0
 8009566:	e7e4      	b.n	8009532 <__hi0bits+0xa>

08009568 <__lo0bits>:
 8009568:	6803      	ldr	r3, [r0, #0]
 800956a:	f013 0207 	ands.w	r2, r3, #7
 800956e:	4601      	mov	r1, r0
 8009570:	d00b      	beq.n	800958a <__lo0bits+0x22>
 8009572:	07da      	lsls	r2, r3, #31
 8009574:	d423      	bmi.n	80095be <__lo0bits+0x56>
 8009576:	0798      	lsls	r0, r3, #30
 8009578:	bf49      	itett	mi
 800957a:	085b      	lsrmi	r3, r3, #1
 800957c:	089b      	lsrpl	r3, r3, #2
 800957e:	2001      	movmi	r0, #1
 8009580:	600b      	strmi	r3, [r1, #0]
 8009582:	bf5c      	itt	pl
 8009584:	600b      	strpl	r3, [r1, #0]
 8009586:	2002      	movpl	r0, #2
 8009588:	4770      	bx	lr
 800958a:	b298      	uxth	r0, r3
 800958c:	b9a8      	cbnz	r0, 80095ba <__lo0bits+0x52>
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	2010      	movs	r0, #16
 8009592:	b2da      	uxtb	r2, r3
 8009594:	b90a      	cbnz	r2, 800959a <__lo0bits+0x32>
 8009596:	3008      	adds	r0, #8
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	071a      	lsls	r2, r3, #28
 800959c:	bf04      	itt	eq
 800959e:	091b      	lsreq	r3, r3, #4
 80095a0:	3004      	addeq	r0, #4
 80095a2:	079a      	lsls	r2, r3, #30
 80095a4:	bf04      	itt	eq
 80095a6:	089b      	lsreq	r3, r3, #2
 80095a8:	3002      	addeq	r0, #2
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d403      	bmi.n	80095b6 <__lo0bits+0x4e>
 80095ae:	085b      	lsrs	r3, r3, #1
 80095b0:	f100 0001 	add.w	r0, r0, #1
 80095b4:	d005      	beq.n	80095c2 <__lo0bits+0x5a>
 80095b6:	600b      	str	r3, [r1, #0]
 80095b8:	4770      	bx	lr
 80095ba:	4610      	mov	r0, r2
 80095bc:	e7e9      	b.n	8009592 <__lo0bits+0x2a>
 80095be:	2000      	movs	r0, #0
 80095c0:	4770      	bx	lr
 80095c2:	2020      	movs	r0, #32
 80095c4:	4770      	bx	lr
	...

080095c8 <__i2b>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	460c      	mov	r4, r1
 80095cc:	2101      	movs	r1, #1
 80095ce:	f7ff feb9 	bl	8009344 <_Balloc>
 80095d2:	4602      	mov	r2, r0
 80095d4:	b928      	cbnz	r0, 80095e2 <__i2b+0x1a>
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <__i2b+0x24>)
 80095d8:	4805      	ldr	r0, [pc, #20]	; (80095f0 <__i2b+0x28>)
 80095da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095de:	f000 fe01 	bl	800a1e4 <__assert_func>
 80095e2:	2301      	movs	r3, #1
 80095e4:	6144      	str	r4, [r0, #20]
 80095e6:	6103      	str	r3, [r0, #16]
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	bf00      	nop
 80095ec:	0800b048 	.word	0x0800b048
 80095f0:	0800b0d4 	.word	0x0800b0d4

080095f4 <__multiply>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	4691      	mov	r9, r2
 80095fa:	690a      	ldr	r2, [r1, #16]
 80095fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009600:	429a      	cmp	r2, r3
 8009602:	bfb8      	it	lt
 8009604:	460b      	movlt	r3, r1
 8009606:	460c      	mov	r4, r1
 8009608:	bfbc      	itt	lt
 800960a:	464c      	movlt	r4, r9
 800960c:	4699      	movlt	r9, r3
 800960e:	6927      	ldr	r7, [r4, #16]
 8009610:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009614:	68a3      	ldr	r3, [r4, #8]
 8009616:	6861      	ldr	r1, [r4, #4]
 8009618:	eb07 060a 	add.w	r6, r7, sl
 800961c:	42b3      	cmp	r3, r6
 800961e:	b085      	sub	sp, #20
 8009620:	bfb8      	it	lt
 8009622:	3101      	addlt	r1, #1
 8009624:	f7ff fe8e 	bl	8009344 <_Balloc>
 8009628:	b930      	cbnz	r0, 8009638 <__multiply+0x44>
 800962a:	4602      	mov	r2, r0
 800962c:	4b44      	ldr	r3, [pc, #272]	; (8009740 <__multiply+0x14c>)
 800962e:	4845      	ldr	r0, [pc, #276]	; (8009744 <__multiply+0x150>)
 8009630:	f240 115d 	movw	r1, #349	; 0x15d
 8009634:	f000 fdd6 	bl	800a1e4 <__assert_func>
 8009638:	f100 0514 	add.w	r5, r0, #20
 800963c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009640:	462b      	mov	r3, r5
 8009642:	2200      	movs	r2, #0
 8009644:	4543      	cmp	r3, r8
 8009646:	d321      	bcc.n	800968c <__multiply+0x98>
 8009648:	f104 0314 	add.w	r3, r4, #20
 800964c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009650:	f109 0314 	add.w	r3, r9, #20
 8009654:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009658:	9202      	str	r2, [sp, #8]
 800965a:	1b3a      	subs	r2, r7, r4
 800965c:	3a15      	subs	r2, #21
 800965e:	f022 0203 	bic.w	r2, r2, #3
 8009662:	3204      	adds	r2, #4
 8009664:	f104 0115 	add.w	r1, r4, #21
 8009668:	428f      	cmp	r7, r1
 800966a:	bf38      	it	cc
 800966c:	2204      	movcc	r2, #4
 800966e:	9201      	str	r2, [sp, #4]
 8009670:	9a02      	ldr	r2, [sp, #8]
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d80c      	bhi.n	8009692 <__multiply+0x9e>
 8009678:	2e00      	cmp	r6, #0
 800967a:	dd03      	ble.n	8009684 <__multiply+0x90>
 800967c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009680:	2b00      	cmp	r3, #0
 8009682:	d05a      	beq.n	800973a <__multiply+0x146>
 8009684:	6106      	str	r6, [r0, #16]
 8009686:	b005      	add	sp, #20
 8009688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968c:	f843 2b04 	str.w	r2, [r3], #4
 8009690:	e7d8      	b.n	8009644 <__multiply+0x50>
 8009692:	f8b3 a000 	ldrh.w	sl, [r3]
 8009696:	f1ba 0f00 	cmp.w	sl, #0
 800969a:	d024      	beq.n	80096e6 <__multiply+0xf2>
 800969c:	f104 0e14 	add.w	lr, r4, #20
 80096a0:	46a9      	mov	r9, r5
 80096a2:	f04f 0c00 	mov.w	ip, #0
 80096a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096aa:	f8d9 1000 	ldr.w	r1, [r9]
 80096ae:	fa1f fb82 	uxth.w	fp, r2
 80096b2:	b289      	uxth	r1, r1
 80096b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80096b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096bc:	f8d9 2000 	ldr.w	r2, [r9]
 80096c0:	4461      	add	r1, ip
 80096c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80096ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096ce:	b289      	uxth	r1, r1
 80096d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096d4:	4577      	cmp	r7, lr
 80096d6:	f849 1b04 	str.w	r1, [r9], #4
 80096da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096de:	d8e2      	bhi.n	80096a6 <__multiply+0xb2>
 80096e0:	9a01      	ldr	r2, [sp, #4]
 80096e2:	f845 c002 	str.w	ip, [r5, r2]
 80096e6:	9a03      	ldr	r2, [sp, #12]
 80096e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096ec:	3304      	adds	r3, #4
 80096ee:	f1b9 0f00 	cmp.w	r9, #0
 80096f2:	d020      	beq.n	8009736 <__multiply+0x142>
 80096f4:	6829      	ldr	r1, [r5, #0]
 80096f6:	f104 0c14 	add.w	ip, r4, #20
 80096fa:	46ae      	mov	lr, r5
 80096fc:	f04f 0a00 	mov.w	sl, #0
 8009700:	f8bc b000 	ldrh.w	fp, [ip]
 8009704:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009708:	fb09 220b 	mla	r2, r9, fp, r2
 800970c:	4492      	add	sl, r2
 800970e:	b289      	uxth	r1, r1
 8009710:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009714:	f84e 1b04 	str.w	r1, [lr], #4
 8009718:	f85c 2b04 	ldr.w	r2, [ip], #4
 800971c:	f8be 1000 	ldrh.w	r1, [lr]
 8009720:	0c12      	lsrs	r2, r2, #16
 8009722:	fb09 1102 	mla	r1, r9, r2, r1
 8009726:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800972a:	4567      	cmp	r7, ip
 800972c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009730:	d8e6      	bhi.n	8009700 <__multiply+0x10c>
 8009732:	9a01      	ldr	r2, [sp, #4]
 8009734:	50a9      	str	r1, [r5, r2]
 8009736:	3504      	adds	r5, #4
 8009738:	e79a      	b.n	8009670 <__multiply+0x7c>
 800973a:	3e01      	subs	r6, #1
 800973c:	e79c      	b.n	8009678 <__multiply+0x84>
 800973e:	bf00      	nop
 8009740:	0800b048 	.word	0x0800b048
 8009744:	0800b0d4 	.word	0x0800b0d4

08009748 <__pow5mult>:
 8009748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800974c:	4615      	mov	r5, r2
 800974e:	f012 0203 	ands.w	r2, r2, #3
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	d007      	beq.n	8009768 <__pow5mult+0x20>
 8009758:	4c25      	ldr	r4, [pc, #148]	; (80097f0 <__pow5mult+0xa8>)
 800975a:	3a01      	subs	r2, #1
 800975c:	2300      	movs	r3, #0
 800975e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009762:	f7ff fe51 	bl	8009408 <__multadd>
 8009766:	4607      	mov	r7, r0
 8009768:	10ad      	asrs	r5, r5, #2
 800976a:	d03d      	beq.n	80097e8 <__pow5mult+0xa0>
 800976c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800976e:	b97c      	cbnz	r4, 8009790 <__pow5mult+0x48>
 8009770:	2010      	movs	r0, #16
 8009772:	f7ff fdbf 	bl	80092f4 <malloc>
 8009776:	4602      	mov	r2, r0
 8009778:	6270      	str	r0, [r6, #36]	; 0x24
 800977a:	b928      	cbnz	r0, 8009788 <__pow5mult+0x40>
 800977c:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <__pow5mult+0xac>)
 800977e:	481e      	ldr	r0, [pc, #120]	; (80097f8 <__pow5mult+0xb0>)
 8009780:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009784:	f000 fd2e 	bl	800a1e4 <__assert_func>
 8009788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800978c:	6004      	str	r4, [r0, #0]
 800978e:	60c4      	str	r4, [r0, #12]
 8009790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009798:	b94c      	cbnz	r4, 80097ae <__pow5mult+0x66>
 800979a:	f240 2171 	movw	r1, #625	; 0x271
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ff12 	bl	80095c8 <__i2b>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80097aa:	4604      	mov	r4, r0
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	f04f 0900 	mov.w	r9, #0
 80097b2:	07eb      	lsls	r3, r5, #31
 80097b4:	d50a      	bpl.n	80097cc <__pow5mult+0x84>
 80097b6:	4639      	mov	r1, r7
 80097b8:	4622      	mov	r2, r4
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ff1a 	bl	80095f4 <__multiply>
 80097c0:	4639      	mov	r1, r7
 80097c2:	4680      	mov	r8, r0
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7ff fdfd 	bl	80093c4 <_Bfree>
 80097ca:	4647      	mov	r7, r8
 80097cc:	106d      	asrs	r5, r5, #1
 80097ce:	d00b      	beq.n	80097e8 <__pow5mult+0xa0>
 80097d0:	6820      	ldr	r0, [r4, #0]
 80097d2:	b938      	cbnz	r0, 80097e4 <__pow5mult+0x9c>
 80097d4:	4622      	mov	r2, r4
 80097d6:	4621      	mov	r1, r4
 80097d8:	4630      	mov	r0, r6
 80097da:	f7ff ff0b 	bl	80095f4 <__multiply>
 80097de:	6020      	str	r0, [r4, #0]
 80097e0:	f8c0 9000 	str.w	r9, [r0]
 80097e4:	4604      	mov	r4, r0
 80097e6:	e7e4      	b.n	80097b2 <__pow5mult+0x6a>
 80097e8:	4638      	mov	r0, r7
 80097ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ee:	bf00      	nop
 80097f0:	0800b220 	.word	0x0800b220
 80097f4:	0800afd6 	.word	0x0800afd6
 80097f8:	0800b0d4 	.word	0x0800b0d4

080097fc <__lshift>:
 80097fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009800:	460c      	mov	r4, r1
 8009802:	6849      	ldr	r1, [r1, #4]
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	4607      	mov	r7, r0
 800980e:	4691      	mov	r9, r2
 8009810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009814:	f108 0601 	add.w	r6, r8, #1
 8009818:	42b3      	cmp	r3, r6
 800981a:	db0b      	blt.n	8009834 <__lshift+0x38>
 800981c:	4638      	mov	r0, r7
 800981e:	f7ff fd91 	bl	8009344 <_Balloc>
 8009822:	4605      	mov	r5, r0
 8009824:	b948      	cbnz	r0, 800983a <__lshift+0x3e>
 8009826:	4602      	mov	r2, r0
 8009828:	4b2a      	ldr	r3, [pc, #168]	; (80098d4 <__lshift+0xd8>)
 800982a:	482b      	ldr	r0, [pc, #172]	; (80098d8 <__lshift+0xdc>)
 800982c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009830:	f000 fcd8 	bl	800a1e4 <__assert_func>
 8009834:	3101      	adds	r1, #1
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	e7ee      	b.n	8009818 <__lshift+0x1c>
 800983a:	2300      	movs	r3, #0
 800983c:	f100 0114 	add.w	r1, r0, #20
 8009840:	f100 0210 	add.w	r2, r0, #16
 8009844:	4618      	mov	r0, r3
 8009846:	4553      	cmp	r3, sl
 8009848:	db37      	blt.n	80098ba <__lshift+0xbe>
 800984a:	6920      	ldr	r0, [r4, #16]
 800984c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009850:	f104 0314 	add.w	r3, r4, #20
 8009854:	f019 091f 	ands.w	r9, r9, #31
 8009858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800985c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009860:	d02f      	beq.n	80098c2 <__lshift+0xc6>
 8009862:	f1c9 0e20 	rsb	lr, r9, #32
 8009866:	468a      	mov	sl, r1
 8009868:	f04f 0c00 	mov.w	ip, #0
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	fa02 f209 	lsl.w	r2, r2, r9
 8009872:	ea42 020c 	orr.w	r2, r2, ip
 8009876:	f84a 2b04 	str.w	r2, [sl], #4
 800987a:	f853 2b04 	ldr.w	r2, [r3], #4
 800987e:	4298      	cmp	r0, r3
 8009880:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009884:	d8f2      	bhi.n	800986c <__lshift+0x70>
 8009886:	1b03      	subs	r3, r0, r4
 8009888:	3b15      	subs	r3, #21
 800988a:	f023 0303 	bic.w	r3, r3, #3
 800988e:	3304      	adds	r3, #4
 8009890:	f104 0215 	add.w	r2, r4, #21
 8009894:	4290      	cmp	r0, r2
 8009896:	bf38      	it	cc
 8009898:	2304      	movcc	r3, #4
 800989a:	f841 c003 	str.w	ip, [r1, r3]
 800989e:	f1bc 0f00 	cmp.w	ip, #0
 80098a2:	d001      	beq.n	80098a8 <__lshift+0xac>
 80098a4:	f108 0602 	add.w	r6, r8, #2
 80098a8:	3e01      	subs	r6, #1
 80098aa:	4638      	mov	r0, r7
 80098ac:	612e      	str	r6, [r5, #16]
 80098ae:	4621      	mov	r1, r4
 80098b0:	f7ff fd88 	bl	80093c4 <_Bfree>
 80098b4:	4628      	mov	r0, r5
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80098be:	3301      	adds	r3, #1
 80098c0:	e7c1      	b.n	8009846 <__lshift+0x4a>
 80098c2:	3904      	subs	r1, #4
 80098c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098cc:	4298      	cmp	r0, r3
 80098ce:	d8f9      	bhi.n	80098c4 <__lshift+0xc8>
 80098d0:	e7ea      	b.n	80098a8 <__lshift+0xac>
 80098d2:	bf00      	nop
 80098d4:	0800b048 	.word	0x0800b048
 80098d8:	0800b0d4 	.word	0x0800b0d4

080098dc <__mcmp>:
 80098dc:	b530      	push	{r4, r5, lr}
 80098de:	6902      	ldr	r2, [r0, #16]
 80098e0:	690c      	ldr	r4, [r1, #16]
 80098e2:	1b12      	subs	r2, r2, r4
 80098e4:	d10e      	bne.n	8009904 <__mcmp+0x28>
 80098e6:	f100 0314 	add.w	r3, r0, #20
 80098ea:	3114      	adds	r1, #20
 80098ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098fc:	42a5      	cmp	r5, r4
 80098fe:	d003      	beq.n	8009908 <__mcmp+0x2c>
 8009900:	d305      	bcc.n	800990e <__mcmp+0x32>
 8009902:	2201      	movs	r2, #1
 8009904:	4610      	mov	r0, r2
 8009906:	bd30      	pop	{r4, r5, pc}
 8009908:	4283      	cmp	r3, r0
 800990a:	d3f3      	bcc.n	80098f4 <__mcmp+0x18>
 800990c:	e7fa      	b.n	8009904 <__mcmp+0x28>
 800990e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009912:	e7f7      	b.n	8009904 <__mcmp+0x28>

08009914 <__mdiff>:
 8009914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	460c      	mov	r4, r1
 800991a:	4606      	mov	r6, r0
 800991c:	4611      	mov	r1, r2
 800991e:	4620      	mov	r0, r4
 8009920:	4690      	mov	r8, r2
 8009922:	f7ff ffdb 	bl	80098dc <__mcmp>
 8009926:	1e05      	subs	r5, r0, #0
 8009928:	d110      	bne.n	800994c <__mdiff+0x38>
 800992a:	4629      	mov	r1, r5
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff fd09 	bl	8009344 <_Balloc>
 8009932:	b930      	cbnz	r0, 8009942 <__mdiff+0x2e>
 8009934:	4b3a      	ldr	r3, [pc, #232]	; (8009a20 <__mdiff+0x10c>)
 8009936:	4602      	mov	r2, r0
 8009938:	f240 2132 	movw	r1, #562	; 0x232
 800993c:	4839      	ldr	r0, [pc, #228]	; (8009a24 <__mdiff+0x110>)
 800993e:	f000 fc51 	bl	800a1e4 <__assert_func>
 8009942:	2301      	movs	r3, #1
 8009944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994c:	bfa4      	itt	ge
 800994e:	4643      	movge	r3, r8
 8009950:	46a0      	movge	r8, r4
 8009952:	4630      	mov	r0, r6
 8009954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009958:	bfa6      	itte	ge
 800995a:	461c      	movge	r4, r3
 800995c:	2500      	movge	r5, #0
 800995e:	2501      	movlt	r5, #1
 8009960:	f7ff fcf0 	bl	8009344 <_Balloc>
 8009964:	b920      	cbnz	r0, 8009970 <__mdiff+0x5c>
 8009966:	4b2e      	ldr	r3, [pc, #184]	; (8009a20 <__mdiff+0x10c>)
 8009968:	4602      	mov	r2, r0
 800996a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800996e:	e7e5      	b.n	800993c <__mdiff+0x28>
 8009970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009974:	6926      	ldr	r6, [r4, #16]
 8009976:	60c5      	str	r5, [r0, #12]
 8009978:	f104 0914 	add.w	r9, r4, #20
 800997c:	f108 0514 	add.w	r5, r8, #20
 8009980:	f100 0e14 	add.w	lr, r0, #20
 8009984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800998c:	f108 0210 	add.w	r2, r8, #16
 8009990:	46f2      	mov	sl, lr
 8009992:	2100      	movs	r1, #0
 8009994:	f859 3b04 	ldr.w	r3, [r9], #4
 8009998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800999c:	fa1f f883 	uxth.w	r8, r3
 80099a0:	fa11 f18b 	uxtah	r1, r1, fp
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	eba1 0808 	sub.w	r8, r1, r8
 80099aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099b2:	fa1f f888 	uxth.w	r8, r8
 80099b6:	1419      	asrs	r1, r3, #16
 80099b8:	454e      	cmp	r6, r9
 80099ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099be:	f84a 3b04 	str.w	r3, [sl], #4
 80099c2:	d8e7      	bhi.n	8009994 <__mdiff+0x80>
 80099c4:	1b33      	subs	r3, r6, r4
 80099c6:	3b15      	subs	r3, #21
 80099c8:	f023 0303 	bic.w	r3, r3, #3
 80099cc:	3304      	adds	r3, #4
 80099ce:	3415      	adds	r4, #21
 80099d0:	42a6      	cmp	r6, r4
 80099d2:	bf38      	it	cc
 80099d4:	2304      	movcc	r3, #4
 80099d6:	441d      	add	r5, r3
 80099d8:	4473      	add	r3, lr
 80099da:	469e      	mov	lr, r3
 80099dc:	462e      	mov	r6, r5
 80099de:	4566      	cmp	r6, ip
 80099e0:	d30e      	bcc.n	8009a00 <__mdiff+0xec>
 80099e2:	f10c 0203 	add.w	r2, ip, #3
 80099e6:	1b52      	subs	r2, r2, r5
 80099e8:	f022 0203 	bic.w	r2, r2, #3
 80099ec:	3d03      	subs	r5, #3
 80099ee:	45ac      	cmp	ip, r5
 80099f0:	bf38      	it	cc
 80099f2:	2200      	movcc	r2, #0
 80099f4:	441a      	add	r2, r3
 80099f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099fa:	b17b      	cbz	r3, 8009a1c <__mdiff+0x108>
 80099fc:	6107      	str	r7, [r0, #16]
 80099fe:	e7a3      	b.n	8009948 <__mdiff+0x34>
 8009a00:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a04:	fa11 f288 	uxtah	r2, r1, r8
 8009a08:	1414      	asrs	r4, r2, #16
 8009a0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a0e:	b292      	uxth	r2, r2
 8009a10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a14:	f84e 2b04 	str.w	r2, [lr], #4
 8009a18:	1421      	asrs	r1, r4, #16
 8009a1a:	e7e0      	b.n	80099de <__mdiff+0xca>
 8009a1c:	3f01      	subs	r7, #1
 8009a1e:	e7ea      	b.n	80099f6 <__mdiff+0xe2>
 8009a20:	0800b048 	.word	0x0800b048
 8009a24:	0800b0d4 	.word	0x0800b0d4

08009a28 <__ulp>:
 8009a28:	b082      	sub	sp, #8
 8009a2a:	ed8d 0b00 	vstr	d0, [sp]
 8009a2e:	9b01      	ldr	r3, [sp, #4]
 8009a30:	4912      	ldr	r1, [pc, #72]	; (8009a7c <__ulp+0x54>)
 8009a32:	4019      	ands	r1, r3
 8009a34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	dd05      	ble.n	8009a48 <__ulp+0x20>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	ec43 2b10 	vmov	d0, r2, r3
 8009a44:	b002      	add	sp, #8
 8009a46:	4770      	bx	lr
 8009a48:	4249      	negs	r1, r1
 8009a4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009a4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009a52:	f04f 0200 	mov.w	r2, #0
 8009a56:	f04f 0300 	mov.w	r3, #0
 8009a5a:	da04      	bge.n	8009a66 <__ulp+0x3e>
 8009a5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009a60:	fa41 f300 	asr.w	r3, r1, r0
 8009a64:	e7ec      	b.n	8009a40 <__ulp+0x18>
 8009a66:	f1a0 0114 	sub.w	r1, r0, #20
 8009a6a:	291e      	cmp	r1, #30
 8009a6c:	bfda      	itte	le
 8009a6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009a72:	fa20 f101 	lsrle.w	r1, r0, r1
 8009a76:	2101      	movgt	r1, #1
 8009a78:	460a      	mov	r2, r1
 8009a7a:	e7e1      	b.n	8009a40 <__ulp+0x18>
 8009a7c:	7ff00000 	.word	0x7ff00000

08009a80 <__b2d>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	6905      	ldr	r5, [r0, #16]
 8009a84:	f100 0714 	add.w	r7, r0, #20
 8009a88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a8c:	1f2e      	subs	r6, r5, #4
 8009a8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff fd48 	bl	8009528 <__hi0bits>
 8009a98:	f1c0 0320 	rsb	r3, r0, #32
 8009a9c:	280a      	cmp	r0, #10
 8009a9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009b1c <__b2d+0x9c>
 8009aa2:	600b      	str	r3, [r1, #0]
 8009aa4:	dc14      	bgt.n	8009ad0 <__b2d+0x50>
 8009aa6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009aaa:	fa24 f10e 	lsr.w	r1, r4, lr
 8009aae:	42b7      	cmp	r7, r6
 8009ab0:	ea41 030c 	orr.w	r3, r1, ip
 8009ab4:	bf34      	ite	cc
 8009ab6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009aba:	2100      	movcs	r1, #0
 8009abc:	3015      	adds	r0, #21
 8009abe:	fa04 f000 	lsl.w	r0, r4, r0
 8009ac2:	fa21 f10e 	lsr.w	r1, r1, lr
 8009ac6:	ea40 0201 	orr.w	r2, r0, r1
 8009aca:	ec43 2b10 	vmov	d0, r2, r3
 8009ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad0:	42b7      	cmp	r7, r6
 8009ad2:	bf3a      	itte	cc
 8009ad4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ad8:	f1a5 0608 	subcc.w	r6, r5, #8
 8009adc:	2100      	movcs	r1, #0
 8009ade:	380b      	subs	r0, #11
 8009ae0:	d017      	beq.n	8009b12 <__b2d+0x92>
 8009ae2:	f1c0 0c20 	rsb	ip, r0, #32
 8009ae6:	fa04 f500 	lsl.w	r5, r4, r0
 8009aea:	42be      	cmp	r6, r7
 8009aec:	fa21 f40c 	lsr.w	r4, r1, ip
 8009af0:	ea45 0504 	orr.w	r5, r5, r4
 8009af4:	bf8c      	ite	hi
 8009af6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009afa:	2400      	movls	r4, #0
 8009afc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009b00:	fa01 f000 	lsl.w	r0, r1, r0
 8009b04:	fa24 f40c 	lsr.w	r4, r4, ip
 8009b08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b0c:	ea40 0204 	orr.w	r2, r0, r4
 8009b10:	e7db      	b.n	8009aca <__b2d+0x4a>
 8009b12:	ea44 030c 	orr.w	r3, r4, ip
 8009b16:	460a      	mov	r2, r1
 8009b18:	e7d7      	b.n	8009aca <__b2d+0x4a>
 8009b1a:	bf00      	nop
 8009b1c:	3ff00000 	.word	0x3ff00000

08009b20 <__d2b>:
 8009b20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b24:	4689      	mov	r9, r1
 8009b26:	2101      	movs	r1, #1
 8009b28:	ec57 6b10 	vmov	r6, r7, d0
 8009b2c:	4690      	mov	r8, r2
 8009b2e:	f7ff fc09 	bl	8009344 <_Balloc>
 8009b32:	4604      	mov	r4, r0
 8009b34:	b930      	cbnz	r0, 8009b44 <__d2b+0x24>
 8009b36:	4602      	mov	r2, r0
 8009b38:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <__d2b+0xb0>)
 8009b3a:	4826      	ldr	r0, [pc, #152]	; (8009bd4 <__d2b+0xb4>)
 8009b3c:	f240 310a 	movw	r1, #778	; 0x30a
 8009b40:	f000 fb50 	bl	800a1e4 <__assert_func>
 8009b44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b4c:	bb35      	cbnz	r5, 8009b9c <__d2b+0x7c>
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	d028      	beq.n	8009ba6 <__d2b+0x86>
 8009b54:	4668      	mov	r0, sp
 8009b56:	9600      	str	r6, [sp, #0]
 8009b58:	f7ff fd06 	bl	8009568 <__lo0bits>
 8009b5c:	9900      	ldr	r1, [sp, #0]
 8009b5e:	b300      	cbz	r0, 8009ba2 <__d2b+0x82>
 8009b60:	9a01      	ldr	r2, [sp, #4]
 8009b62:	f1c0 0320 	rsb	r3, r0, #32
 8009b66:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	40c2      	lsrs	r2, r0
 8009b6e:	6163      	str	r3, [r4, #20]
 8009b70:	9201      	str	r2, [sp, #4]
 8009b72:	9b01      	ldr	r3, [sp, #4]
 8009b74:	61a3      	str	r3, [r4, #24]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bf14      	ite	ne
 8009b7a:	2202      	movne	r2, #2
 8009b7c:	2201      	moveq	r2, #1
 8009b7e:	6122      	str	r2, [r4, #16]
 8009b80:	b1d5      	cbz	r5, 8009bb8 <__d2b+0x98>
 8009b82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b86:	4405      	add	r5, r0
 8009b88:	f8c9 5000 	str.w	r5, [r9]
 8009b8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b90:	f8c8 0000 	str.w	r0, [r8]
 8009b94:	4620      	mov	r0, r4
 8009b96:	b003      	add	sp, #12
 8009b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ba0:	e7d5      	b.n	8009b4e <__d2b+0x2e>
 8009ba2:	6161      	str	r1, [r4, #20]
 8009ba4:	e7e5      	b.n	8009b72 <__d2b+0x52>
 8009ba6:	a801      	add	r0, sp, #4
 8009ba8:	f7ff fcde 	bl	8009568 <__lo0bits>
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	6163      	str	r3, [r4, #20]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	6122      	str	r2, [r4, #16]
 8009bb4:	3020      	adds	r0, #32
 8009bb6:	e7e3      	b.n	8009b80 <__d2b+0x60>
 8009bb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bc0:	f8c9 0000 	str.w	r0, [r9]
 8009bc4:	6918      	ldr	r0, [r3, #16]
 8009bc6:	f7ff fcaf 	bl	8009528 <__hi0bits>
 8009bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bce:	e7df      	b.n	8009b90 <__d2b+0x70>
 8009bd0:	0800b048 	.word	0x0800b048
 8009bd4:	0800b0d4 	.word	0x0800b0d4

08009bd8 <__ratio>:
 8009bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4688      	mov	r8, r1
 8009bde:	4669      	mov	r1, sp
 8009be0:	4681      	mov	r9, r0
 8009be2:	f7ff ff4d 	bl	8009a80 <__b2d>
 8009be6:	a901      	add	r1, sp, #4
 8009be8:	4640      	mov	r0, r8
 8009bea:	ec55 4b10 	vmov	r4, r5, d0
 8009bee:	f7ff ff47 	bl	8009a80 <__b2d>
 8009bf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009bfa:	eba3 0c02 	sub.w	ip, r3, r2
 8009bfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c02:	1a9b      	subs	r3, r3, r2
 8009c04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c08:	ec51 0b10 	vmov	r0, r1, d0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bfd6      	itet	le
 8009c10:	460a      	movle	r2, r1
 8009c12:	462a      	movgt	r2, r5
 8009c14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c18:	468b      	mov	fp, r1
 8009c1a:	462f      	mov	r7, r5
 8009c1c:	bfd4      	ite	le
 8009c1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c26:	4620      	mov	r0, r4
 8009c28:	ee10 2a10 	vmov	r2, s0
 8009c2c:	465b      	mov	r3, fp
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 fe14 	bl	800085c <__aeabi_ddiv>
 8009c34:	ec41 0b10 	vmov	d0, r0, r1
 8009c38:	b003      	add	sp, #12
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c3e <__copybits>:
 8009c3e:	3901      	subs	r1, #1
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	1149      	asrs	r1, r1, #5
 8009c44:	6914      	ldr	r4, [r2, #16]
 8009c46:	3101      	adds	r1, #1
 8009c48:	f102 0314 	add.w	r3, r2, #20
 8009c4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c54:	1f05      	subs	r5, r0, #4
 8009c56:	42a3      	cmp	r3, r4
 8009c58:	d30c      	bcc.n	8009c74 <__copybits+0x36>
 8009c5a:	1aa3      	subs	r3, r4, r2
 8009c5c:	3b11      	subs	r3, #17
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	3211      	adds	r2, #17
 8009c64:	42a2      	cmp	r2, r4
 8009c66:	bf88      	it	hi
 8009c68:	2300      	movhi	r3, #0
 8009c6a:	4418      	add	r0, r3
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4288      	cmp	r0, r1
 8009c70:	d305      	bcc.n	8009c7e <__copybits+0x40>
 8009c72:	bd70      	pop	{r4, r5, r6, pc}
 8009c74:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c78:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c7c:	e7eb      	b.n	8009c56 <__copybits+0x18>
 8009c7e:	f840 3b04 	str.w	r3, [r0], #4
 8009c82:	e7f4      	b.n	8009c6e <__copybits+0x30>

08009c84 <__any_on>:
 8009c84:	f100 0214 	add.w	r2, r0, #20
 8009c88:	6900      	ldr	r0, [r0, #16]
 8009c8a:	114b      	asrs	r3, r1, #5
 8009c8c:	4298      	cmp	r0, r3
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	db11      	blt.n	8009cb6 <__any_on+0x32>
 8009c92:	dd0a      	ble.n	8009caa <__any_on+0x26>
 8009c94:	f011 011f 	ands.w	r1, r1, #31
 8009c98:	d007      	beq.n	8009caa <__any_on+0x26>
 8009c9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c9e:	fa24 f001 	lsr.w	r0, r4, r1
 8009ca2:	fa00 f101 	lsl.w	r1, r0, r1
 8009ca6:	428c      	cmp	r4, r1
 8009ca8:	d10b      	bne.n	8009cc2 <__any_on+0x3e>
 8009caa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d803      	bhi.n	8009cba <__any_on+0x36>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	e7f7      	b.n	8009caa <__any_on+0x26>
 8009cba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d0f5      	beq.n	8009cae <__any_on+0x2a>
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e7f6      	b.n	8009cb4 <__any_on+0x30>

08009cc6 <_calloc_r>:
 8009cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cc8:	fba1 2402 	umull	r2, r4, r1, r2
 8009ccc:	b94c      	cbnz	r4, 8009ce2 <_calloc_r+0x1c>
 8009cce:	4611      	mov	r1, r2
 8009cd0:	9201      	str	r2, [sp, #4]
 8009cd2:	f000 f87b 	bl	8009dcc <_malloc_r>
 8009cd6:	9a01      	ldr	r2, [sp, #4]
 8009cd8:	4605      	mov	r5, r0
 8009cda:	b930      	cbnz	r0, 8009cea <_calloc_r+0x24>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	b003      	add	sp, #12
 8009ce0:	bd30      	pop	{r4, r5, pc}
 8009ce2:	220c      	movs	r2, #12
 8009ce4:	6002      	str	r2, [r0, #0]
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	e7f8      	b.n	8009cdc <_calloc_r+0x16>
 8009cea:	4621      	mov	r1, r4
 8009cec:	f7fc fbc0 	bl	8006470 <memset>
 8009cf0:	e7f4      	b.n	8009cdc <_calloc_r+0x16>
	...

08009cf4 <_free_r>:
 8009cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	d044      	beq.n	8009d84 <_free_r+0x90>
 8009cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfe:	9001      	str	r0, [sp, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f1a1 0404 	sub.w	r4, r1, #4
 8009d06:	bfb8      	it	lt
 8009d08:	18e4      	addlt	r4, r4, r3
 8009d0a:	f000 fab5 	bl	800a278 <__malloc_lock>
 8009d0e:	4a1e      	ldr	r2, [pc, #120]	; (8009d88 <_free_r+0x94>)
 8009d10:	9801      	ldr	r0, [sp, #4]
 8009d12:	6813      	ldr	r3, [r2, #0]
 8009d14:	b933      	cbnz	r3, 8009d24 <_free_r+0x30>
 8009d16:	6063      	str	r3, [r4, #4]
 8009d18:	6014      	str	r4, [r2, #0]
 8009d1a:	b003      	add	sp, #12
 8009d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d20:	f000 bab0 	b.w	800a284 <__malloc_unlock>
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	d908      	bls.n	8009d3a <_free_r+0x46>
 8009d28:	6825      	ldr	r5, [r4, #0]
 8009d2a:	1961      	adds	r1, r4, r5
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	bf01      	itttt	eq
 8009d30:	6819      	ldreq	r1, [r3, #0]
 8009d32:	685b      	ldreq	r3, [r3, #4]
 8009d34:	1949      	addeq	r1, r1, r5
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	e7ed      	b.n	8009d16 <_free_r+0x22>
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b10b      	cbz	r3, 8009d44 <_free_r+0x50>
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d9fa      	bls.n	8009d3a <_free_r+0x46>
 8009d44:	6811      	ldr	r1, [r2, #0]
 8009d46:	1855      	adds	r5, r2, r1
 8009d48:	42a5      	cmp	r5, r4
 8009d4a:	d10b      	bne.n	8009d64 <_free_r+0x70>
 8009d4c:	6824      	ldr	r4, [r4, #0]
 8009d4e:	4421      	add	r1, r4
 8009d50:	1854      	adds	r4, r2, r1
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	6011      	str	r1, [r2, #0]
 8009d56:	d1e0      	bne.n	8009d1a <_free_r+0x26>
 8009d58:	681c      	ldr	r4, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	6053      	str	r3, [r2, #4]
 8009d5e:	4421      	add	r1, r4
 8009d60:	6011      	str	r1, [r2, #0]
 8009d62:	e7da      	b.n	8009d1a <_free_r+0x26>
 8009d64:	d902      	bls.n	8009d6c <_free_r+0x78>
 8009d66:	230c      	movs	r3, #12
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	e7d6      	b.n	8009d1a <_free_r+0x26>
 8009d6c:	6825      	ldr	r5, [r4, #0]
 8009d6e:	1961      	adds	r1, r4, r5
 8009d70:	428b      	cmp	r3, r1
 8009d72:	bf04      	itt	eq
 8009d74:	6819      	ldreq	r1, [r3, #0]
 8009d76:	685b      	ldreq	r3, [r3, #4]
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	bf04      	itt	eq
 8009d7c:	1949      	addeq	r1, r1, r5
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	6054      	str	r4, [r2, #4]
 8009d82:	e7ca      	b.n	8009d1a <_free_r+0x26>
 8009d84:	b003      	add	sp, #12
 8009d86:	bd30      	pop	{r4, r5, pc}
 8009d88:	20000350 	.word	0x20000350

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0e      	ldr	r6, [pc, #56]	; (8009dc8 <sbrk_aligned+0x3c>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f000 f9f2 	bl	800a180 <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f9ed 	bl	800a180 <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <sbrk_aligned+0x34>
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d007      	beq.n	8009dc4 <sbrk_aligned+0x38>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f9e2 	bl	800a180 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d101      	bne.n	8009dc4 <sbrk_aligned+0x38>
 8009dc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	20000354 	.word	0x20000354

08009dcc <_malloc_r>:
 8009dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd0:	1ccd      	adds	r5, r1, #3
 8009dd2:	f025 0503 	bic.w	r5, r5, #3
 8009dd6:	3508      	adds	r5, #8
 8009dd8:	2d0c      	cmp	r5, #12
 8009dda:	bf38      	it	cc
 8009ddc:	250c      	movcc	r5, #12
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	4607      	mov	r7, r0
 8009de2:	db01      	blt.n	8009de8 <_malloc_r+0x1c>
 8009de4:	42a9      	cmp	r1, r5
 8009de6:	d905      	bls.n	8009df4 <_malloc_r+0x28>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	2600      	movs	r6, #0
 8009dee:	4630      	mov	r0, r6
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	4e2e      	ldr	r6, [pc, #184]	; (8009eb0 <_malloc_r+0xe4>)
 8009df6:	f000 fa3f 	bl	800a278 <__malloc_lock>
 8009dfa:	6833      	ldr	r3, [r6, #0]
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	bb34      	cbnz	r4, 8009e4e <_malloc_r+0x82>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ffc2 	bl	8009d8c <sbrk_aligned>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	d14d      	bne.n	8009eaa <_malloc_r+0xde>
 8009e0e:	6834      	ldr	r4, [r6, #0]
 8009e10:	4626      	mov	r6, r4
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	d140      	bne.n	8009e98 <_malloc_r+0xcc>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	eb04 0803 	add.w	r8, r4, r3
 8009e20:	f000 f9ae 	bl	800a180 <_sbrk_r>
 8009e24:	4580      	cmp	r8, r0
 8009e26:	d13a      	bne.n	8009e9e <_malloc_r+0xd2>
 8009e28:	6821      	ldr	r1, [r4, #0]
 8009e2a:	3503      	adds	r5, #3
 8009e2c:	1a6d      	subs	r5, r5, r1
 8009e2e:	f025 0503 	bic.w	r5, r5, #3
 8009e32:	3508      	adds	r5, #8
 8009e34:	2d0c      	cmp	r5, #12
 8009e36:	bf38      	it	cc
 8009e38:	250c      	movcc	r5, #12
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7ff ffa5 	bl	8009d8c <sbrk_aligned>
 8009e42:	3001      	adds	r0, #1
 8009e44:	d02b      	beq.n	8009e9e <_malloc_r+0xd2>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	442b      	add	r3, r5
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	e00e      	b.n	8009e6c <_malloc_r+0xa0>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	1b52      	subs	r2, r2, r5
 8009e52:	d41e      	bmi.n	8009e92 <_malloc_r+0xc6>
 8009e54:	2a0b      	cmp	r2, #11
 8009e56:	d916      	bls.n	8009e86 <_malloc_r+0xba>
 8009e58:	1961      	adds	r1, r4, r5
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	6025      	str	r5, [r4, #0]
 8009e5e:	bf18      	it	ne
 8009e60:	6059      	strne	r1, [r3, #4]
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	bf08      	it	eq
 8009e66:	6031      	streq	r1, [r6, #0]
 8009e68:	5162      	str	r2, [r4, r5]
 8009e6a:	604b      	str	r3, [r1, #4]
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f104 060b 	add.w	r6, r4, #11
 8009e72:	f000 fa07 	bl	800a284 <__malloc_unlock>
 8009e76:	f026 0607 	bic.w	r6, r6, #7
 8009e7a:	1d23      	adds	r3, r4, #4
 8009e7c:	1af2      	subs	r2, r6, r3
 8009e7e:	d0b6      	beq.n	8009dee <_malloc_r+0x22>
 8009e80:	1b9b      	subs	r3, r3, r6
 8009e82:	50a3      	str	r3, [r4, r2]
 8009e84:	e7b3      	b.n	8009dee <_malloc_r+0x22>
 8009e86:	6862      	ldr	r2, [r4, #4]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	bf0c      	ite	eq
 8009e8c:	6032      	streq	r2, [r6, #0]
 8009e8e:	605a      	strne	r2, [r3, #4]
 8009e90:	e7ec      	b.n	8009e6c <_malloc_r+0xa0>
 8009e92:	4623      	mov	r3, r4
 8009e94:	6864      	ldr	r4, [r4, #4]
 8009e96:	e7b2      	b.n	8009dfe <_malloc_r+0x32>
 8009e98:	4634      	mov	r4, r6
 8009e9a:	6876      	ldr	r6, [r6, #4]
 8009e9c:	e7b9      	b.n	8009e12 <_malloc_r+0x46>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f000 f9ee 	bl	800a284 <__malloc_unlock>
 8009ea8:	e7a1      	b.n	8009dee <_malloc_r+0x22>
 8009eaa:	6025      	str	r5, [r4, #0]
 8009eac:	e7de      	b.n	8009e6c <_malloc_r+0xa0>
 8009eae:	bf00      	nop
 8009eb0:	20000350 	.word	0x20000350

08009eb4 <__ssputs_r>:
 8009eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	688e      	ldr	r6, [r1, #8]
 8009eba:	429e      	cmp	r6, r3
 8009ebc:	4682      	mov	sl, r0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	4690      	mov	r8, r2
 8009ec2:	461f      	mov	r7, r3
 8009ec4:	d838      	bhi.n	8009f38 <__ssputs_r+0x84>
 8009ec6:	898a      	ldrh	r2, [r1, #12]
 8009ec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ecc:	d032      	beq.n	8009f34 <__ssputs_r+0x80>
 8009ece:	6825      	ldr	r5, [r4, #0]
 8009ed0:	6909      	ldr	r1, [r1, #16]
 8009ed2:	eba5 0901 	sub.w	r9, r5, r1
 8009ed6:	6965      	ldr	r5, [r4, #20]
 8009ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	444b      	add	r3, r9
 8009ee4:	106d      	asrs	r5, r5, #1
 8009ee6:	429d      	cmp	r5, r3
 8009ee8:	bf38      	it	cc
 8009eea:	461d      	movcc	r5, r3
 8009eec:	0553      	lsls	r3, r2, #21
 8009eee:	d531      	bpl.n	8009f54 <__ssputs_r+0xa0>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7ff ff6b 	bl	8009dcc <_malloc_r>
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	b950      	cbnz	r0, 8009f10 <__ssputs_r+0x5c>
 8009efa:	230c      	movs	r3, #12
 8009efc:	f8ca 3000 	str.w	r3, [sl]
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f10:	6921      	ldr	r1, [r4, #16]
 8009f12:	464a      	mov	r2, r9
 8009f14:	f7ff fa08 	bl	8009328 <memcpy>
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	6126      	str	r6, [r4, #16]
 8009f26:	6165      	str	r5, [r4, #20]
 8009f28:	444e      	add	r6, r9
 8009f2a:	eba5 0509 	sub.w	r5, r5, r9
 8009f2e:	6026      	str	r6, [r4, #0]
 8009f30:	60a5      	str	r5, [r4, #8]
 8009f32:	463e      	mov	r6, r7
 8009f34:	42be      	cmp	r6, r7
 8009f36:	d900      	bls.n	8009f3a <__ssputs_r+0x86>
 8009f38:	463e      	mov	r6, r7
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	4641      	mov	r1, r8
 8009f40:	f000 f980 	bl	800a244 <memmove>
 8009f44:	68a3      	ldr	r3, [r4, #8]
 8009f46:	1b9b      	subs	r3, r3, r6
 8009f48:	60a3      	str	r3, [r4, #8]
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	4433      	add	r3, r6
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	2000      	movs	r0, #0
 8009f52:	e7db      	b.n	8009f0c <__ssputs_r+0x58>
 8009f54:	462a      	mov	r2, r5
 8009f56:	f000 f99b 	bl	800a290 <_realloc_r>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1e1      	bne.n	8009f24 <__ssputs_r+0x70>
 8009f60:	6921      	ldr	r1, [r4, #16]
 8009f62:	4650      	mov	r0, sl
 8009f64:	f7ff fec6 	bl	8009cf4 <_free_r>
 8009f68:	e7c7      	b.n	8009efa <__ssputs_r+0x46>
	...

08009f6c <_svfiprintf_r>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	4698      	mov	r8, r3
 8009f72:	898b      	ldrh	r3, [r1, #12]
 8009f74:	061b      	lsls	r3, r3, #24
 8009f76:	b09d      	sub	sp, #116	; 0x74
 8009f78:	4607      	mov	r7, r0
 8009f7a:	460d      	mov	r5, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	d50e      	bpl.n	8009f9e <_svfiprintf_r+0x32>
 8009f80:	690b      	ldr	r3, [r1, #16]
 8009f82:	b963      	cbnz	r3, 8009f9e <_svfiprintf_r+0x32>
 8009f84:	2140      	movs	r1, #64	; 0x40
 8009f86:	f7ff ff21 	bl	8009dcc <_malloc_r>
 8009f8a:	6028      	str	r0, [r5, #0]
 8009f8c:	6128      	str	r0, [r5, #16]
 8009f8e:	b920      	cbnz	r0, 8009f9a <_svfiprintf_r+0x2e>
 8009f90:	230c      	movs	r3, #12
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f98:	e0d1      	b.n	800a13e <_svfiprintf_r+0x1d2>
 8009f9a:	2340      	movs	r3, #64	; 0x40
 8009f9c:	616b      	str	r3, [r5, #20]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa2:	2320      	movs	r3, #32
 8009fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fac:	2330      	movs	r3, #48	; 0x30
 8009fae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a158 <_svfiprintf_r+0x1ec>
 8009fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb6:	f04f 0901 	mov.w	r9, #1
 8009fba:	4623      	mov	r3, r4
 8009fbc:	469a      	mov	sl, r3
 8009fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc2:	b10a      	cbz	r2, 8009fc8 <_svfiprintf_r+0x5c>
 8009fc4:	2a25      	cmp	r2, #37	; 0x25
 8009fc6:	d1f9      	bne.n	8009fbc <_svfiprintf_r+0x50>
 8009fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fcc:	d00b      	beq.n	8009fe6 <_svfiprintf_r+0x7a>
 8009fce:	465b      	mov	r3, fp
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	f7ff ff6d 	bl	8009eb4 <__ssputs_r>
 8009fda:	3001      	adds	r0, #1
 8009fdc:	f000 80aa 	beq.w	800a134 <_svfiprintf_r+0x1c8>
 8009fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe2:	445a      	add	r2, fp
 8009fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 80a2 	beq.w	800a134 <_svfiprintf_r+0x1c8>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ffa:	f10a 0a01 	add.w	sl, sl, #1
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	9307      	str	r3, [sp, #28]
 800a002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a006:	931a      	str	r3, [sp, #104]	; 0x68
 800a008:	4654      	mov	r4, sl
 800a00a:	2205      	movs	r2, #5
 800a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a010:	4851      	ldr	r0, [pc, #324]	; (800a158 <_svfiprintf_r+0x1ec>)
 800a012:	f7f6 f8ed 	bl	80001f0 <memchr>
 800a016:	9a04      	ldr	r2, [sp, #16]
 800a018:	b9d8      	cbnz	r0, 800a052 <_svfiprintf_r+0xe6>
 800a01a:	06d0      	lsls	r0, r2, #27
 800a01c:	bf44      	itt	mi
 800a01e:	2320      	movmi	r3, #32
 800a020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a024:	0711      	lsls	r1, r2, #28
 800a026:	bf44      	itt	mi
 800a028:	232b      	movmi	r3, #43	; 0x2b
 800a02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02e:	f89a 3000 	ldrb.w	r3, [sl]
 800a032:	2b2a      	cmp	r3, #42	; 0x2a
 800a034:	d015      	beq.n	800a062 <_svfiprintf_r+0xf6>
 800a036:	9a07      	ldr	r2, [sp, #28]
 800a038:	4654      	mov	r4, sl
 800a03a:	2000      	movs	r0, #0
 800a03c:	f04f 0c0a 	mov.w	ip, #10
 800a040:	4621      	mov	r1, r4
 800a042:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a046:	3b30      	subs	r3, #48	; 0x30
 800a048:	2b09      	cmp	r3, #9
 800a04a:	d94e      	bls.n	800a0ea <_svfiprintf_r+0x17e>
 800a04c:	b1b0      	cbz	r0, 800a07c <_svfiprintf_r+0x110>
 800a04e:	9207      	str	r2, [sp, #28]
 800a050:	e014      	b.n	800a07c <_svfiprintf_r+0x110>
 800a052:	eba0 0308 	sub.w	r3, r0, r8
 800a056:	fa09 f303 	lsl.w	r3, r9, r3
 800a05a:	4313      	orrs	r3, r2
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	46a2      	mov	sl, r4
 800a060:	e7d2      	b.n	800a008 <_svfiprintf_r+0x9c>
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	1d19      	adds	r1, r3, #4
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	9103      	str	r1, [sp, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	bfbb      	ittet	lt
 800a06e:	425b      	neglt	r3, r3
 800a070:	f042 0202 	orrlt.w	r2, r2, #2
 800a074:	9307      	strge	r3, [sp, #28]
 800a076:	9307      	strlt	r3, [sp, #28]
 800a078:	bfb8      	it	lt
 800a07a:	9204      	strlt	r2, [sp, #16]
 800a07c:	7823      	ldrb	r3, [r4, #0]
 800a07e:	2b2e      	cmp	r3, #46	; 0x2e
 800a080:	d10c      	bne.n	800a09c <_svfiprintf_r+0x130>
 800a082:	7863      	ldrb	r3, [r4, #1]
 800a084:	2b2a      	cmp	r3, #42	; 0x2a
 800a086:	d135      	bne.n	800a0f4 <_svfiprintf_r+0x188>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	1d1a      	adds	r2, r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	9203      	str	r2, [sp, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfb8      	it	lt
 800a094:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a098:	3402      	adds	r4, #2
 800a09a:	9305      	str	r3, [sp, #20]
 800a09c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a168 <_svfiprintf_r+0x1fc>
 800a0a0:	7821      	ldrb	r1, [r4, #0]
 800a0a2:	2203      	movs	r2, #3
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	f7f6 f8a3 	bl	80001f0 <memchr>
 800a0aa:	b140      	cbz	r0, 800a0be <_svfiprintf_r+0x152>
 800a0ac:	2340      	movs	r3, #64	; 0x40
 800a0ae:	eba0 000a 	sub.w	r0, r0, sl
 800a0b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	4303      	orrs	r3, r0
 800a0ba:	3401      	adds	r4, #1
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c2:	4826      	ldr	r0, [pc, #152]	; (800a15c <_svfiprintf_r+0x1f0>)
 800a0c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c8:	2206      	movs	r2, #6
 800a0ca:	f7f6 f891 	bl	80001f0 <memchr>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d038      	beq.n	800a144 <_svfiprintf_r+0x1d8>
 800a0d2:	4b23      	ldr	r3, [pc, #140]	; (800a160 <_svfiprintf_r+0x1f4>)
 800a0d4:	bb1b      	cbnz	r3, 800a11e <_svfiprintf_r+0x1b2>
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	3307      	adds	r3, #7
 800a0da:	f023 0307 	bic.w	r3, r3, #7
 800a0de:	3308      	adds	r3, #8
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e4:	4433      	add	r3, r6
 800a0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e8:	e767      	b.n	8009fba <_svfiprintf_r+0x4e>
 800a0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	e7a5      	b.n	800a040 <_svfiprintf_r+0xd4>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	3401      	adds	r4, #1
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f04f 0c0a 	mov.w	ip, #10
 800a100:	4620      	mov	r0, r4
 800a102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a106:	3a30      	subs	r2, #48	; 0x30
 800a108:	2a09      	cmp	r2, #9
 800a10a:	d903      	bls.n	800a114 <_svfiprintf_r+0x1a8>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0c5      	beq.n	800a09c <_svfiprintf_r+0x130>
 800a110:	9105      	str	r1, [sp, #20]
 800a112:	e7c3      	b.n	800a09c <_svfiprintf_r+0x130>
 800a114:	fb0c 2101 	mla	r1, ip, r1, r2
 800a118:	4604      	mov	r4, r0
 800a11a:	2301      	movs	r3, #1
 800a11c:	e7f0      	b.n	800a100 <_svfiprintf_r+0x194>
 800a11e:	ab03      	add	r3, sp, #12
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	462a      	mov	r2, r5
 800a124:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <_svfiprintf_r+0x1f8>)
 800a126:	a904      	add	r1, sp, #16
 800a128:	4638      	mov	r0, r7
 800a12a:	f7fc fa49 	bl	80065c0 <_printf_float>
 800a12e:	1c42      	adds	r2, r0, #1
 800a130:	4606      	mov	r6, r0
 800a132:	d1d6      	bne.n	800a0e2 <_svfiprintf_r+0x176>
 800a134:	89ab      	ldrh	r3, [r5, #12]
 800a136:	065b      	lsls	r3, r3, #25
 800a138:	f53f af2c 	bmi.w	8009f94 <_svfiprintf_r+0x28>
 800a13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a13e:	b01d      	add	sp, #116	; 0x74
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	ab03      	add	r3, sp, #12
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	462a      	mov	r2, r5
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <_svfiprintf_r+0x1f8>)
 800a14c:	a904      	add	r1, sp, #16
 800a14e:	4638      	mov	r0, r7
 800a150:	f7fc fcda 	bl	8006b08 <_printf_i>
 800a154:	e7eb      	b.n	800a12e <_svfiprintf_r+0x1c2>
 800a156:	bf00      	nop
 800a158:	0800b22c 	.word	0x0800b22c
 800a15c:	0800b236 	.word	0x0800b236
 800a160:	080065c1 	.word	0x080065c1
 800a164:	08009eb5 	.word	0x08009eb5
 800a168:	0800b232 	.word	0x0800b232
 800a16c:	00000000 	.word	0x00000000

0800a170 <nan>:
 800a170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a178 <nan+0x8>
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	00000000 	.word	0x00000000
 800a17c:	7ff80000 	.word	0x7ff80000

0800a180 <_sbrk_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d06      	ldr	r5, [pc, #24]	; (800a19c <_sbrk_r+0x1c>)
 800a184:	2300      	movs	r3, #0
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	f7f9 fc4a 	bl	8003a24 <_sbrk>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_sbrk_r+0x1a>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_sbrk_r+0x1a>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	20000358 	.word	0x20000358

0800a1a0 <strncmp>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	b17a      	cbz	r2, 800a1c4 <strncmp+0x24>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	3901      	subs	r1, #1
 800a1a8:	1884      	adds	r4, r0, r2
 800a1aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1b2:	4290      	cmp	r0, r2
 800a1b4:	d101      	bne.n	800a1ba <strncmp+0x1a>
 800a1b6:	42a3      	cmp	r3, r4
 800a1b8:	d101      	bne.n	800a1be <strncmp+0x1e>
 800a1ba:	1a80      	subs	r0, r0, r2
 800a1bc:	bd10      	pop	{r4, pc}
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1f3      	bne.n	800a1aa <strncmp+0xa>
 800a1c2:	e7fa      	b.n	800a1ba <strncmp+0x1a>
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	e7f9      	b.n	800a1bc <strncmp+0x1c>

0800a1c8 <__ascii_wctomb>:
 800a1c8:	b149      	cbz	r1, 800a1de <__ascii_wctomb+0x16>
 800a1ca:	2aff      	cmp	r2, #255	; 0xff
 800a1cc:	bf85      	ittet	hi
 800a1ce:	238a      	movhi	r3, #138	; 0x8a
 800a1d0:	6003      	strhi	r3, [r0, #0]
 800a1d2:	700a      	strbls	r2, [r1, #0]
 800a1d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a1d8:	bf98      	it	ls
 800a1da:	2001      	movls	r0, #1
 800a1dc:	4770      	bx	lr
 800a1de:	4608      	mov	r0, r1
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <__assert_func>:
 800a1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1e6:	4614      	mov	r4, r2
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <__assert_func+0x2c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	68d8      	ldr	r0, [r3, #12]
 800a1f2:	b14c      	cbz	r4, 800a208 <__assert_func+0x24>
 800a1f4:	4b07      	ldr	r3, [pc, #28]	; (800a214 <__assert_func+0x30>)
 800a1f6:	9100      	str	r1, [sp, #0]
 800a1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1fc:	4906      	ldr	r1, [pc, #24]	; (800a218 <__assert_func+0x34>)
 800a1fe:	462b      	mov	r3, r5
 800a200:	f000 f80e 	bl	800a220 <fiprintf>
 800a204:	f000 fa8c 	bl	800a720 <abort>
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <__assert_func+0x38>)
 800a20a:	461c      	mov	r4, r3
 800a20c:	e7f3      	b.n	800a1f6 <__assert_func+0x12>
 800a20e:	bf00      	nop
 800a210:	20000010 	.word	0x20000010
 800a214:	0800b23d 	.word	0x0800b23d
 800a218:	0800b24a 	.word	0x0800b24a
 800a21c:	0800b278 	.word	0x0800b278

0800a220 <fiprintf>:
 800a220:	b40e      	push	{r1, r2, r3}
 800a222:	b503      	push	{r0, r1, lr}
 800a224:	4601      	mov	r1, r0
 800a226:	ab03      	add	r3, sp, #12
 800a228:	4805      	ldr	r0, [pc, #20]	; (800a240 <fiprintf+0x20>)
 800a22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22e:	6800      	ldr	r0, [r0, #0]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	f000 f885 	bl	800a340 <_vfiprintf_r>
 800a236:	b002      	add	sp, #8
 800a238:	f85d eb04 	ldr.w	lr, [sp], #4
 800a23c:	b003      	add	sp, #12
 800a23e:	4770      	bx	lr
 800a240:	20000010 	.word	0x20000010

0800a244 <memmove>:
 800a244:	4288      	cmp	r0, r1
 800a246:	b510      	push	{r4, lr}
 800a248:	eb01 0402 	add.w	r4, r1, r2
 800a24c:	d902      	bls.n	800a254 <memmove+0x10>
 800a24e:	4284      	cmp	r4, r0
 800a250:	4623      	mov	r3, r4
 800a252:	d807      	bhi.n	800a264 <memmove+0x20>
 800a254:	1e43      	subs	r3, r0, #1
 800a256:	42a1      	cmp	r1, r4
 800a258:	d008      	beq.n	800a26c <memmove+0x28>
 800a25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a25e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a262:	e7f8      	b.n	800a256 <memmove+0x12>
 800a264:	4402      	add	r2, r0
 800a266:	4601      	mov	r1, r0
 800a268:	428a      	cmp	r2, r1
 800a26a:	d100      	bne.n	800a26e <memmove+0x2a>
 800a26c:	bd10      	pop	{r4, pc}
 800a26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a276:	e7f7      	b.n	800a268 <memmove+0x24>

0800a278 <__malloc_lock>:
 800a278:	4801      	ldr	r0, [pc, #4]	; (800a280 <__malloc_lock+0x8>)
 800a27a:	f000 bc11 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a27e:	bf00      	nop
 800a280:	2000035c 	.word	0x2000035c

0800a284 <__malloc_unlock>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__malloc_unlock+0x8>)
 800a286:	f000 bc0c 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a28a:	bf00      	nop
 800a28c:	2000035c 	.word	0x2000035c

0800a290 <_realloc_r>:
 800a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a294:	4680      	mov	r8, r0
 800a296:	4614      	mov	r4, r2
 800a298:	460e      	mov	r6, r1
 800a29a:	b921      	cbnz	r1, 800a2a6 <_realloc_r+0x16>
 800a29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	f7ff bd93 	b.w	8009dcc <_malloc_r>
 800a2a6:	b92a      	cbnz	r2, 800a2b4 <_realloc_r+0x24>
 800a2a8:	f7ff fd24 	bl	8009cf4 <_free_r>
 800a2ac:	4625      	mov	r5, r4
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b4:	f000 fc5c 	bl	800ab70 <_malloc_usable_size_r>
 800a2b8:	4284      	cmp	r4, r0
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	d802      	bhi.n	800a2c4 <_realloc_r+0x34>
 800a2be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2c2:	d812      	bhi.n	800a2ea <_realloc_r+0x5a>
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	f7ff fd80 	bl	8009dcc <_malloc_r>
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d0ed      	beq.n	800a2ae <_realloc_r+0x1e>
 800a2d2:	42bc      	cmp	r4, r7
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	bf28      	it	cs
 800a2da:	463a      	movcs	r2, r7
 800a2dc:	f7ff f824 	bl	8009328 <memcpy>
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f7ff fd06 	bl	8009cf4 <_free_r>
 800a2e8:	e7e1      	b.n	800a2ae <_realloc_r+0x1e>
 800a2ea:	4635      	mov	r5, r6
 800a2ec:	e7df      	b.n	800a2ae <_realloc_r+0x1e>

0800a2ee <__sfputc_r>:
 800a2ee:	6893      	ldr	r3, [r2, #8]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	b410      	push	{r4}
 800a2f6:	6093      	str	r3, [r2, #8]
 800a2f8:	da08      	bge.n	800a30c <__sfputc_r+0x1e>
 800a2fa:	6994      	ldr	r4, [r2, #24]
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	db01      	blt.n	800a304 <__sfputc_r+0x16>
 800a300:	290a      	cmp	r1, #10
 800a302:	d103      	bne.n	800a30c <__sfputc_r+0x1e>
 800a304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a308:	f000 b94a 	b.w	800a5a0 <__swbuf_r>
 800a30c:	6813      	ldr	r3, [r2, #0]
 800a30e:	1c58      	adds	r0, r3, #1
 800a310:	6010      	str	r0, [r2, #0]
 800a312:	7019      	strb	r1, [r3, #0]
 800a314:	4608      	mov	r0, r1
 800a316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <__sfputs_r>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	4606      	mov	r6, r0
 800a320:	460f      	mov	r7, r1
 800a322:	4614      	mov	r4, r2
 800a324:	18d5      	adds	r5, r2, r3
 800a326:	42ac      	cmp	r4, r5
 800a328:	d101      	bne.n	800a32e <__sfputs_r+0x12>
 800a32a:	2000      	movs	r0, #0
 800a32c:	e007      	b.n	800a33e <__sfputs_r+0x22>
 800a32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a332:	463a      	mov	r2, r7
 800a334:	4630      	mov	r0, r6
 800a336:	f7ff ffda 	bl	800a2ee <__sfputc_r>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d1f3      	bne.n	800a326 <__sfputs_r+0xa>
 800a33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a340 <_vfiprintf_r>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	460d      	mov	r5, r1
 800a346:	b09d      	sub	sp, #116	; 0x74
 800a348:	4614      	mov	r4, r2
 800a34a:	4698      	mov	r8, r3
 800a34c:	4606      	mov	r6, r0
 800a34e:	b118      	cbz	r0, 800a358 <_vfiprintf_r+0x18>
 800a350:	6983      	ldr	r3, [r0, #24]
 800a352:	b90b      	cbnz	r3, 800a358 <_vfiprintf_r+0x18>
 800a354:	f000 fb06 	bl	800a964 <__sinit>
 800a358:	4b89      	ldr	r3, [pc, #548]	; (800a580 <_vfiprintf_r+0x240>)
 800a35a:	429d      	cmp	r5, r3
 800a35c:	d11b      	bne.n	800a396 <_vfiprintf_r+0x56>
 800a35e:	6875      	ldr	r5, [r6, #4]
 800a360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a362:	07d9      	lsls	r1, r3, #31
 800a364:	d405      	bmi.n	800a372 <_vfiprintf_r+0x32>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	059a      	lsls	r2, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_vfiprintf_r+0x32>
 800a36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a36e:	f000 fb97 	bl	800aaa0 <__retarget_lock_acquire_recursive>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	071b      	lsls	r3, r3, #28
 800a376:	d501      	bpl.n	800a37c <_vfiprintf_r+0x3c>
 800a378:	692b      	ldr	r3, [r5, #16]
 800a37a:	b9eb      	cbnz	r3, 800a3b8 <_vfiprintf_r+0x78>
 800a37c:	4629      	mov	r1, r5
 800a37e:	4630      	mov	r0, r6
 800a380:	f000 f960 	bl	800a644 <__swsetup_r>
 800a384:	b1c0      	cbz	r0, 800a3b8 <_vfiprintf_r+0x78>
 800a386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a388:	07dc      	lsls	r4, r3, #31
 800a38a:	d50e      	bpl.n	800a3aa <_vfiprintf_r+0x6a>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a390:	b01d      	add	sp, #116	; 0x74
 800a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a396:	4b7b      	ldr	r3, [pc, #492]	; (800a584 <_vfiprintf_r+0x244>)
 800a398:	429d      	cmp	r5, r3
 800a39a:	d101      	bne.n	800a3a0 <_vfiprintf_r+0x60>
 800a39c:	68b5      	ldr	r5, [r6, #8]
 800a39e:	e7df      	b.n	800a360 <_vfiprintf_r+0x20>
 800a3a0:	4b79      	ldr	r3, [pc, #484]	; (800a588 <_vfiprintf_r+0x248>)
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	bf08      	it	eq
 800a3a6:	68f5      	ldreq	r5, [r6, #12]
 800a3a8:	e7da      	b.n	800a360 <_vfiprintf_r+0x20>
 800a3aa:	89ab      	ldrh	r3, [r5, #12]
 800a3ac:	0598      	lsls	r0, r3, #22
 800a3ae:	d4ed      	bmi.n	800a38c <_vfiprintf_r+0x4c>
 800a3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3b2:	f000 fb76 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a3b6:	e7e9      	b.n	800a38c <_vfiprintf_r+0x4c>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a3bc:	2320      	movs	r3, #32
 800a3be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c6:	2330      	movs	r3, #48	; 0x30
 800a3c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a58c <_vfiprintf_r+0x24c>
 800a3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3d0:	f04f 0901 	mov.w	r9, #1
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	469a      	mov	sl, r3
 800a3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3dc:	b10a      	cbz	r2, 800a3e2 <_vfiprintf_r+0xa2>
 800a3de:	2a25      	cmp	r2, #37	; 0x25
 800a3e0:	d1f9      	bne.n	800a3d6 <_vfiprintf_r+0x96>
 800a3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e6:	d00b      	beq.n	800a400 <_vfiprintf_r+0xc0>
 800a3e8:	465b      	mov	r3, fp
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ff94 	bl	800a31c <__sfputs_r>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f000 80aa 	beq.w	800a54e <_vfiprintf_r+0x20e>
 800a3fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3fc:	445a      	add	r2, fp
 800a3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a400:	f89a 3000 	ldrb.w	r3, [sl]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 80a2 	beq.w	800a54e <_vfiprintf_r+0x20e>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a414:	f10a 0a01 	add.w	sl, sl, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	9307      	str	r3, [sp, #28]
 800a41c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a420:	931a      	str	r3, [sp, #104]	; 0x68
 800a422:	4654      	mov	r4, sl
 800a424:	2205      	movs	r2, #5
 800a426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42a:	4858      	ldr	r0, [pc, #352]	; (800a58c <_vfiprintf_r+0x24c>)
 800a42c:	f7f5 fee0 	bl	80001f0 <memchr>
 800a430:	9a04      	ldr	r2, [sp, #16]
 800a432:	b9d8      	cbnz	r0, 800a46c <_vfiprintf_r+0x12c>
 800a434:	06d1      	lsls	r1, r2, #27
 800a436:	bf44      	itt	mi
 800a438:	2320      	movmi	r3, #32
 800a43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a43e:	0713      	lsls	r3, r2, #28
 800a440:	bf44      	itt	mi
 800a442:	232b      	movmi	r3, #43	; 0x2b
 800a444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a448:	f89a 3000 	ldrb.w	r3, [sl]
 800a44c:	2b2a      	cmp	r3, #42	; 0x2a
 800a44e:	d015      	beq.n	800a47c <_vfiprintf_r+0x13c>
 800a450:	9a07      	ldr	r2, [sp, #28]
 800a452:	4654      	mov	r4, sl
 800a454:	2000      	movs	r0, #0
 800a456:	f04f 0c0a 	mov.w	ip, #10
 800a45a:	4621      	mov	r1, r4
 800a45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a460:	3b30      	subs	r3, #48	; 0x30
 800a462:	2b09      	cmp	r3, #9
 800a464:	d94e      	bls.n	800a504 <_vfiprintf_r+0x1c4>
 800a466:	b1b0      	cbz	r0, 800a496 <_vfiprintf_r+0x156>
 800a468:	9207      	str	r2, [sp, #28]
 800a46a:	e014      	b.n	800a496 <_vfiprintf_r+0x156>
 800a46c:	eba0 0308 	sub.w	r3, r0, r8
 800a470:	fa09 f303 	lsl.w	r3, r9, r3
 800a474:	4313      	orrs	r3, r2
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	46a2      	mov	sl, r4
 800a47a:	e7d2      	b.n	800a422 <_vfiprintf_r+0xe2>
 800a47c:	9b03      	ldr	r3, [sp, #12]
 800a47e:	1d19      	adds	r1, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	9103      	str	r1, [sp, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	bfbb      	ittet	lt
 800a488:	425b      	neglt	r3, r3
 800a48a:	f042 0202 	orrlt.w	r2, r2, #2
 800a48e:	9307      	strge	r3, [sp, #28]
 800a490:	9307      	strlt	r3, [sp, #28]
 800a492:	bfb8      	it	lt
 800a494:	9204      	strlt	r2, [sp, #16]
 800a496:	7823      	ldrb	r3, [r4, #0]
 800a498:	2b2e      	cmp	r3, #46	; 0x2e
 800a49a:	d10c      	bne.n	800a4b6 <_vfiprintf_r+0x176>
 800a49c:	7863      	ldrb	r3, [r4, #1]
 800a49e:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a0:	d135      	bne.n	800a50e <_vfiprintf_r+0x1ce>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	1d1a      	adds	r2, r3, #4
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	9203      	str	r2, [sp, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfb8      	it	lt
 800a4ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4b2:	3402      	adds	r4, #2
 800a4b4:	9305      	str	r3, [sp, #20]
 800a4b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a59c <_vfiprintf_r+0x25c>
 800a4ba:	7821      	ldrb	r1, [r4, #0]
 800a4bc:	2203      	movs	r2, #3
 800a4be:	4650      	mov	r0, sl
 800a4c0:	f7f5 fe96 	bl	80001f0 <memchr>
 800a4c4:	b140      	cbz	r0, 800a4d8 <_vfiprintf_r+0x198>
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	eba0 000a 	sub.w	r0, r0, sl
 800a4cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a4d0:	9b04      	ldr	r3, [sp, #16]
 800a4d2:	4303      	orrs	r3, r0
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	482c      	ldr	r0, [pc, #176]	; (800a590 <_vfiprintf_r+0x250>)
 800a4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4e2:	2206      	movs	r2, #6
 800a4e4:	f7f5 fe84 	bl	80001f0 <memchr>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d03f      	beq.n	800a56c <_vfiprintf_r+0x22c>
 800a4ec:	4b29      	ldr	r3, [pc, #164]	; (800a594 <_vfiprintf_r+0x254>)
 800a4ee:	bb1b      	cbnz	r3, 800a538 <_vfiprintf_r+0x1f8>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	3307      	adds	r3, #7
 800a4f4:	f023 0307 	bic.w	r3, r3, #7
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	9303      	str	r3, [sp, #12]
 800a4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fe:	443b      	add	r3, r7
 800a500:	9309      	str	r3, [sp, #36]	; 0x24
 800a502:	e767      	b.n	800a3d4 <_vfiprintf_r+0x94>
 800a504:	fb0c 3202 	mla	r2, ip, r2, r3
 800a508:	460c      	mov	r4, r1
 800a50a:	2001      	movs	r0, #1
 800a50c:	e7a5      	b.n	800a45a <_vfiprintf_r+0x11a>
 800a50e:	2300      	movs	r3, #0
 800a510:	3401      	adds	r4, #1
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	4619      	mov	r1, r3
 800a516:	f04f 0c0a 	mov.w	ip, #10
 800a51a:	4620      	mov	r0, r4
 800a51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a520:	3a30      	subs	r2, #48	; 0x30
 800a522:	2a09      	cmp	r2, #9
 800a524:	d903      	bls.n	800a52e <_vfiprintf_r+0x1ee>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0c5      	beq.n	800a4b6 <_vfiprintf_r+0x176>
 800a52a:	9105      	str	r1, [sp, #20]
 800a52c:	e7c3      	b.n	800a4b6 <_vfiprintf_r+0x176>
 800a52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a532:	4604      	mov	r4, r0
 800a534:	2301      	movs	r3, #1
 800a536:	e7f0      	b.n	800a51a <_vfiprintf_r+0x1da>
 800a538:	ab03      	add	r3, sp, #12
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	462a      	mov	r2, r5
 800a53e:	4b16      	ldr	r3, [pc, #88]	; (800a598 <_vfiprintf_r+0x258>)
 800a540:	a904      	add	r1, sp, #16
 800a542:	4630      	mov	r0, r6
 800a544:	f7fc f83c 	bl	80065c0 <_printf_float>
 800a548:	4607      	mov	r7, r0
 800a54a:	1c78      	adds	r0, r7, #1
 800a54c:	d1d6      	bne.n	800a4fc <_vfiprintf_r+0x1bc>
 800a54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a550:	07d9      	lsls	r1, r3, #31
 800a552:	d405      	bmi.n	800a560 <_vfiprintf_r+0x220>
 800a554:	89ab      	ldrh	r3, [r5, #12]
 800a556:	059a      	lsls	r2, r3, #22
 800a558:	d402      	bmi.n	800a560 <_vfiprintf_r+0x220>
 800a55a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a55c:	f000 faa1 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a560:	89ab      	ldrh	r3, [r5, #12]
 800a562:	065b      	lsls	r3, r3, #25
 800a564:	f53f af12 	bmi.w	800a38c <_vfiprintf_r+0x4c>
 800a568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a56a:	e711      	b.n	800a390 <_vfiprintf_r+0x50>
 800a56c:	ab03      	add	r3, sp, #12
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	462a      	mov	r2, r5
 800a572:	4b09      	ldr	r3, [pc, #36]	; (800a598 <_vfiprintf_r+0x258>)
 800a574:	a904      	add	r1, sp, #16
 800a576:	4630      	mov	r0, r6
 800a578:	f7fc fac6 	bl	8006b08 <_printf_i>
 800a57c:	e7e4      	b.n	800a548 <_vfiprintf_r+0x208>
 800a57e:	bf00      	nop
 800a580:	0800b29c 	.word	0x0800b29c
 800a584:	0800b2bc 	.word	0x0800b2bc
 800a588:	0800b27c 	.word	0x0800b27c
 800a58c:	0800b22c 	.word	0x0800b22c
 800a590:	0800b236 	.word	0x0800b236
 800a594:	080065c1 	.word	0x080065c1
 800a598:	0800a31d 	.word	0x0800a31d
 800a59c:	0800b232 	.word	0x0800b232

0800a5a0 <__swbuf_r>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	460e      	mov	r6, r1
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	b118      	cbz	r0, 800a5b2 <__swbuf_r+0x12>
 800a5aa:	6983      	ldr	r3, [r0, #24]
 800a5ac:	b90b      	cbnz	r3, 800a5b2 <__swbuf_r+0x12>
 800a5ae:	f000 f9d9 	bl	800a964 <__sinit>
 800a5b2:	4b21      	ldr	r3, [pc, #132]	; (800a638 <__swbuf_r+0x98>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	d12b      	bne.n	800a610 <__swbuf_r+0x70>
 800a5b8:	686c      	ldr	r4, [r5, #4]
 800a5ba:	69a3      	ldr	r3, [r4, #24]
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	071a      	lsls	r2, r3, #28
 800a5c2:	d52f      	bpl.n	800a624 <__swbuf_r+0x84>
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	b36b      	cbz	r3, 800a624 <__swbuf_r+0x84>
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	6820      	ldr	r0, [r4, #0]
 800a5cc:	1ac0      	subs	r0, r0, r3
 800a5ce:	6963      	ldr	r3, [r4, #20]
 800a5d0:	b2f6      	uxtb	r6, r6
 800a5d2:	4283      	cmp	r3, r0
 800a5d4:	4637      	mov	r7, r6
 800a5d6:	dc04      	bgt.n	800a5e2 <__swbuf_r+0x42>
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f000 f92e 	bl	800a83c <_fflush_r>
 800a5e0:	bb30      	cbnz	r0, 800a630 <__swbuf_r+0x90>
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	60a3      	str	r3, [r4, #8]
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	6022      	str	r2, [r4, #0]
 800a5ee:	701e      	strb	r6, [r3, #0]
 800a5f0:	6963      	ldr	r3, [r4, #20]
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	4283      	cmp	r3, r0
 800a5f6:	d004      	beq.n	800a602 <__swbuf_r+0x62>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	07db      	lsls	r3, r3, #31
 800a5fc:	d506      	bpl.n	800a60c <__swbuf_r+0x6c>
 800a5fe:	2e0a      	cmp	r6, #10
 800a600:	d104      	bne.n	800a60c <__swbuf_r+0x6c>
 800a602:	4621      	mov	r1, r4
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f919 	bl	800a83c <_fflush_r>
 800a60a:	b988      	cbnz	r0, 800a630 <__swbuf_r+0x90>
 800a60c:	4638      	mov	r0, r7
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <__swbuf_r+0x9c>)
 800a612:	429c      	cmp	r4, r3
 800a614:	d101      	bne.n	800a61a <__swbuf_r+0x7a>
 800a616:	68ac      	ldr	r4, [r5, #8]
 800a618:	e7cf      	b.n	800a5ba <__swbuf_r+0x1a>
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <__swbuf_r+0xa0>)
 800a61c:	429c      	cmp	r4, r3
 800a61e:	bf08      	it	eq
 800a620:	68ec      	ldreq	r4, [r5, #12]
 800a622:	e7ca      	b.n	800a5ba <__swbuf_r+0x1a>
 800a624:	4621      	mov	r1, r4
 800a626:	4628      	mov	r0, r5
 800a628:	f000 f80c 	bl	800a644 <__swsetup_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0cb      	beq.n	800a5c8 <__swbuf_r+0x28>
 800a630:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a634:	e7ea      	b.n	800a60c <__swbuf_r+0x6c>
 800a636:	bf00      	nop
 800a638:	0800b29c 	.word	0x0800b29c
 800a63c:	0800b2bc 	.word	0x0800b2bc
 800a640:	0800b27c 	.word	0x0800b27c

0800a644 <__swsetup_r>:
 800a644:	4b32      	ldr	r3, [pc, #200]	; (800a710 <__swsetup_r+0xcc>)
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	b125      	cbz	r5, 800a65a <__swsetup_r+0x16>
 800a650:	69ab      	ldr	r3, [r5, #24]
 800a652:	b913      	cbnz	r3, 800a65a <__swsetup_r+0x16>
 800a654:	4628      	mov	r0, r5
 800a656:	f000 f985 	bl	800a964 <__sinit>
 800a65a:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <__swsetup_r+0xd0>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	d10f      	bne.n	800a680 <__swsetup_r+0x3c>
 800a660:	686c      	ldr	r4, [r5, #4]
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a668:	0719      	lsls	r1, r3, #28
 800a66a:	d42c      	bmi.n	800a6c6 <__swsetup_r+0x82>
 800a66c:	06dd      	lsls	r5, r3, #27
 800a66e:	d411      	bmi.n	800a694 <__swsetup_r+0x50>
 800a670:	2309      	movs	r3, #9
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a67e:	e03e      	b.n	800a6fe <__swsetup_r+0xba>
 800a680:	4b25      	ldr	r3, [pc, #148]	; (800a718 <__swsetup_r+0xd4>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d101      	bne.n	800a68a <__swsetup_r+0x46>
 800a686:	68ac      	ldr	r4, [r5, #8]
 800a688:	e7eb      	b.n	800a662 <__swsetup_r+0x1e>
 800a68a:	4b24      	ldr	r3, [pc, #144]	; (800a71c <__swsetup_r+0xd8>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	bf08      	it	eq
 800a690:	68ec      	ldreq	r4, [r5, #12]
 800a692:	e7e6      	b.n	800a662 <__swsetup_r+0x1e>
 800a694:	0758      	lsls	r0, r3, #29
 800a696:	d512      	bpl.n	800a6be <__swsetup_r+0x7a>
 800a698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69a:	b141      	cbz	r1, 800a6ae <__swsetup_r+0x6a>
 800a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <__swsetup_r+0x66>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff fb25 	bl	8009cf4 <_free_r>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6063      	str	r3, [r4, #4]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f043 0308 	orr.w	r3, r3, #8
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	b94b      	cbnz	r3, 800a6de <__swsetup_r+0x9a>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6d4:	d003      	beq.n	800a6de <__swsetup_r+0x9a>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 fa09 	bl	800aaf0 <__smakebuf_r>
 800a6de:	89a0      	ldrh	r0, [r4, #12]
 800a6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e4:	f010 0301 	ands.w	r3, r0, #1
 800a6e8:	d00a      	beq.n	800a700 <__swsetup_r+0xbc>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60a3      	str	r3, [r4, #8]
 800a6ee:	6963      	ldr	r3, [r4, #20]
 800a6f0:	425b      	negs	r3, r3
 800a6f2:	61a3      	str	r3, [r4, #24]
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	b943      	cbnz	r3, 800a70a <__swsetup_r+0xc6>
 800a6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6fc:	d1ba      	bne.n	800a674 <__swsetup_r+0x30>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	0781      	lsls	r1, r0, #30
 800a702:	bf58      	it	pl
 800a704:	6963      	ldrpl	r3, [r4, #20]
 800a706:	60a3      	str	r3, [r4, #8]
 800a708:	e7f4      	b.n	800a6f4 <__swsetup_r+0xb0>
 800a70a:	2000      	movs	r0, #0
 800a70c:	e7f7      	b.n	800a6fe <__swsetup_r+0xba>
 800a70e:	bf00      	nop
 800a710:	20000010 	.word	0x20000010
 800a714:	0800b29c 	.word	0x0800b29c
 800a718:	0800b2bc 	.word	0x0800b2bc
 800a71c:	0800b27c 	.word	0x0800b27c

0800a720 <abort>:
 800a720:	b508      	push	{r3, lr}
 800a722:	2006      	movs	r0, #6
 800a724:	f000 fa54 	bl	800abd0 <raise>
 800a728:	2001      	movs	r0, #1
 800a72a:	f7f9 f903 	bl	8003934 <_exit>
	...

0800a730 <__sflush_r>:
 800a730:	898a      	ldrh	r2, [r1, #12]
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	4605      	mov	r5, r0
 800a738:	0710      	lsls	r0, r2, #28
 800a73a:	460c      	mov	r4, r1
 800a73c:	d458      	bmi.n	800a7f0 <__sflush_r+0xc0>
 800a73e:	684b      	ldr	r3, [r1, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc05      	bgt.n	800a750 <__sflush_r+0x20>
 800a744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	dc02      	bgt.n	800a750 <__sflush_r+0x20>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a752:	2e00      	cmp	r6, #0
 800a754:	d0f9      	beq.n	800a74a <__sflush_r+0x1a>
 800a756:	2300      	movs	r3, #0
 800a758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a75c:	682f      	ldr	r7, [r5, #0]
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	d032      	beq.n	800a7c8 <__sflush_r+0x98>
 800a762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	075a      	lsls	r2, r3, #29
 800a768:	d505      	bpl.n	800a776 <__sflush_r+0x46>
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a770:	b10b      	cbz	r3, 800a776 <__sflush_r+0x46>
 800a772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a774:	1ac0      	subs	r0, r0, r3
 800a776:	2300      	movs	r3, #0
 800a778:	4602      	mov	r2, r0
 800a77a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a77c:	6a21      	ldr	r1, [r4, #32]
 800a77e:	4628      	mov	r0, r5
 800a780:	47b0      	blx	r6
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	d106      	bne.n	800a796 <__sflush_r+0x66>
 800a788:	6829      	ldr	r1, [r5, #0]
 800a78a:	291d      	cmp	r1, #29
 800a78c:	d82c      	bhi.n	800a7e8 <__sflush_r+0xb8>
 800a78e:	4a2a      	ldr	r2, [pc, #168]	; (800a838 <__sflush_r+0x108>)
 800a790:	40ca      	lsrs	r2, r1
 800a792:	07d6      	lsls	r6, r2, #31
 800a794:	d528      	bpl.n	800a7e8 <__sflush_r+0xb8>
 800a796:	2200      	movs	r2, #0
 800a798:	6062      	str	r2, [r4, #4]
 800a79a:	04d9      	lsls	r1, r3, #19
 800a79c:	6922      	ldr	r2, [r4, #16]
 800a79e:	6022      	str	r2, [r4, #0]
 800a7a0:	d504      	bpl.n	800a7ac <__sflush_r+0x7c>
 800a7a2:	1c42      	adds	r2, r0, #1
 800a7a4:	d101      	bne.n	800a7aa <__sflush_r+0x7a>
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	b903      	cbnz	r3, 800a7ac <__sflush_r+0x7c>
 800a7aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ae:	602f      	str	r7, [r5, #0]
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d0ca      	beq.n	800a74a <__sflush_r+0x1a>
 800a7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d002      	beq.n	800a7c2 <__sflush_r+0x92>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7ff fa99 	bl	8009cf4 <_free_r>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7c6:	e7c1      	b.n	800a74c <__sflush_r+0x1c>
 800a7c8:	6a21      	ldr	r1, [r4, #32]
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b0      	blx	r6
 800a7d0:	1c41      	adds	r1, r0, #1
 800a7d2:	d1c7      	bne.n	800a764 <__sflush_r+0x34>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c4      	beq.n	800a764 <__sflush_r+0x34>
 800a7da:	2b1d      	cmp	r3, #29
 800a7dc:	d001      	beq.n	800a7e2 <__sflush_r+0xb2>
 800a7de:	2b16      	cmp	r3, #22
 800a7e0:	d101      	bne.n	800a7e6 <__sflush_r+0xb6>
 800a7e2:	602f      	str	r7, [r5, #0]
 800a7e4:	e7b1      	b.n	800a74a <__sflush_r+0x1a>
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	e7ad      	b.n	800a74c <__sflush_r+0x1c>
 800a7f0:	690f      	ldr	r7, [r1, #16]
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d0a9      	beq.n	800a74a <__sflush_r+0x1a>
 800a7f6:	0793      	lsls	r3, r2, #30
 800a7f8:	680e      	ldr	r6, [r1, #0]
 800a7fa:	bf08      	it	eq
 800a7fc:	694b      	ldreq	r3, [r1, #20]
 800a7fe:	600f      	str	r7, [r1, #0]
 800a800:	bf18      	it	ne
 800a802:	2300      	movne	r3, #0
 800a804:	eba6 0807 	sub.w	r8, r6, r7
 800a808:	608b      	str	r3, [r1, #8]
 800a80a:	f1b8 0f00 	cmp.w	r8, #0
 800a80e:	dd9c      	ble.n	800a74a <__sflush_r+0x1a>
 800a810:	6a21      	ldr	r1, [r4, #32]
 800a812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a814:	4643      	mov	r3, r8
 800a816:	463a      	mov	r2, r7
 800a818:	4628      	mov	r0, r5
 800a81a:	47b0      	blx	r6
 800a81c:	2800      	cmp	r0, #0
 800a81e:	dc06      	bgt.n	800a82e <__sflush_r+0xfe>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a82c:	e78e      	b.n	800a74c <__sflush_r+0x1c>
 800a82e:	4407      	add	r7, r0
 800a830:	eba8 0800 	sub.w	r8, r8, r0
 800a834:	e7e9      	b.n	800a80a <__sflush_r+0xda>
 800a836:	bf00      	nop
 800a838:	20400001 	.word	0x20400001

0800a83c <_fflush_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	690b      	ldr	r3, [r1, #16]
 800a840:	4605      	mov	r5, r0
 800a842:	460c      	mov	r4, r1
 800a844:	b913      	cbnz	r3, 800a84c <_fflush_r+0x10>
 800a846:	2500      	movs	r5, #0
 800a848:	4628      	mov	r0, r5
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	b118      	cbz	r0, 800a856 <_fflush_r+0x1a>
 800a84e:	6983      	ldr	r3, [r0, #24]
 800a850:	b90b      	cbnz	r3, 800a856 <_fflush_r+0x1a>
 800a852:	f000 f887 	bl	800a964 <__sinit>
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <_fflush_r+0x6c>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	d11b      	bne.n	800a894 <_fflush_r+0x58>
 800a85c:	686c      	ldr	r4, [r5, #4]
 800a85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0ef      	beq.n	800a846 <_fflush_r+0xa>
 800a866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a868:	07d0      	lsls	r0, r2, #31
 800a86a:	d404      	bmi.n	800a876 <_fflush_r+0x3a>
 800a86c:	0599      	lsls	r1, r3, #22
 800a86e:	d402      	bmi.n	800a876 <_fflush_r+0x3a>
 800a870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a872:	f000 f915 	bl	800aaa0 <__retarget_lock_acquire_recursive>
 800a876:	4628      	mov	r0, r5
 800a878:	4621      	mov	r1, r4
 800a87a:	f7ff ff59 	bl	800a730 <__sflush_r>
 800a87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a880:	07da      	lsls	r2, r3, #31
 800a882:	4605      	mov	r5, r0
 800a884:	d4e0      	bmi.n	800a848 <_fflush_r+0xc>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	059b      	lsls	r3, r3, #22
 800a88a:	d4dd      	bmi.n	800a848 <_fflush_r+0xc>
 800a88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a88e:	f000 f908 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a892:	e7d9      	b.n	800a848 <_fflush_r+0xc>
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <_fflush_r+0x70>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d101      	bne.n	800a89e <_fflush_r+0x62>
 800a89a:	68ac      	ldr	r4, [r5, #8]
 800a89c:	e7df      	b.n	800a85e <_fflush_r+0x22>
 800a89e:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <_fflush_r+0x74>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	68ec      	ldreq	r4, [r5, #12]
 800a8a6:	e7da      	b.n	800a85e <_fflush_r+0x22>
 800a8a8:	0800b29c 	.word	0x0800b29c
 800a8ac:	0800b2bc 	.word	0x0800b2bc
 800a8b0:	0800b27c 	.word	0x0800b27c

0800a8b4 <std>:
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c2:	6083      	str	r3, [r0, #8]
 800a8c4:	8181      	strh	r1, [r0, #12]
 800a8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8c8:	81c2      	strh	r2, [r0, #14]
 800a8ca:	6183      	str	r3, [r0, #24]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	2208      	movs	r2, #8
 800a8d0:	305c      	adds	r0, #92	; 0x5c
 800a8d2:	f7fb fdcd 	bl	8006470 <memset>
 800a8d6:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <std+0x38>)
 800a8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <std+0x3c>)
 800a8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std+0x40>)
 800a8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std+0x44>)
 800a8e4:	6224      	str	r4, [r4, #32]
 800a8e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800ac09 	.word	0x0800ac09
 800a8f0:	0800ac2b 	.word	0x0800ac2b
 800a8f4:	0800ac63 	.word	0x0800ac63
 800a8f8:	0800ac87 	.word	0x0800ac87

0800a8fc <_cleanup_r>:
 800a8fc:	4901      	ldr	r1, [pc, #4]	; (800a904 <_cleanup_r+0x8>)
 800a8fe:	f000 b8af 	b.w	800aa60 <_fwalk_reent>
 800a902:	bf00      	nop
 800a904:	0800a83d 	.word	0x0800a83d

0800a908 <__sfmoreglue>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	2268      	movs	r2, #104	; 0x68
 800a90c:	1e4d      	subs	r5, r1, #1
 800a90e:	4355      	muls	r5, r2
 800a910:	460e      	mov	r6, r1
 800a912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a916:	f7ff fa59 	bl	8009dcc <_malloc_r>
 800a91a:	4604      	mov	r4, r0
 800a91c:	b140      	cbz	r0, 800a930 <__sfmoreglue+0x28>
 800a91e:	2100      	movs	r1, #0
 800a920:	e9c0 1600 	strd	r1, r6, [r0]
 800a924:	300c      	adds	r0, #12
 800a926:	60a0      	str	r0, [r4, #8]
 800a928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a92c:	f7fb fda0 	bl	8006470 <memset>
 800a930:	4620      	mov	r0, r4
 800a932:	bd70      	pop	{r4, r5, r6, pc}

0800a934 <__sfp_lock_acquire>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__sfp_lock_acquire+0x8>)
 800a936:	f000 b8b3 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a93a:	bf00      	nop
 800a93c:	2000035d 	.word	0x2000035d

0800a940 <__sfp_lock_release>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__sfp_lock_release+0x8>)
 800a942:	f000 b8ae 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a946:	bf00      	nop
 800a948:	2000035d 	.word	0x2000035d

0800a94c <__sinit_lock_acquire>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__sinit_lock_acquire+0x8>)
 800a94e:	f000 b8a7 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a952:	bf00      	nop
 800a954:	2000035e 	.word	0x2000035e

0800a958 <__sinit_lock_release>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__sinit_lock_release+0x8>)
 800a95a:	f000 b8a2 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a95e:	bf00      	nop
 800a960:	2000035e 	.word	0x2000035e

0800a964 <__sinit>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	f7ff fff0 	bl	800a94c <__sinit_lock_acquire>
 800a96c:	69a3      	ldr	r3, [r4, #24]
 800a96e:	b11b      	cbz	r3, 800a978 <__sinit+0x14>
 800a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a974:	f7ff bff0 	b.w	800a958 <__sinit_lock_release>
 800a978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a97c:	6523      	str	r3, [r4, #80]	; 0x50
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <__sinit+0x68>)
 800a980:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <__sinit+0x6c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	62a2      	str	r2, [r4, #40]	; 0x28
 800a986:	42a3      	cmp	r3, r4
 800a988:	bf04      	itt	eq
 800a98a:	2301      	moveq	r3, #1
 800a98c:	61a3      	streq	r3, [r4, #24]
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 f820 	bl	800a9d4 <__sfp>
 800a994:	6060      	str	r0, [r4, #4]
 800a996:	4620      	mov	r0, r4
 800a998:	f000 f81c 	bl	800a9d4 <__sfp>
 800a99c:	60a0      	str	r0, [r4, #8]
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f818 	bl	800a9d4 <__sfp>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	60e0      	str	r0, [r4, #12]
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	6860      	ldr	r0, [r4, #4]
 800a9ac:	f7ff ff82 	bl	800a8b4 <std>
 800a9b0:	68a0      	ldr	r0, [r4, #8]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	2109      	movs	r1, #9
 800a9b6:	f7ff ff7d 	bl	800a8b4 <std>
 800a9ba:	68e0      	ldr	r0, [r4, #12]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	2112      	movs	r1, #18
 800a9c0:	f7ff ff78 	bl	800a8b4 <std>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	61a3      	str	r3, [r4, #24]
 800a9c8:	e7d2      	b.n	800a970 <__sinit+0xc>
 800a9ca:	bf00      	nop
 800a9cc:	0800ae38 	.word	0x0800ae38
 800a9d0:	0800a8fd 	.word	0x0800a8fd

0800a9d4 <__sfp>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	f7ff ffac 	bl	800a934 <__sfp_lock_acquire>
 800a9dc:	4b1e      	ldr	r3, [pc, #120]	; (800aa58 <__sfp+0x84>)
 800a9de:	681e      	ldr	r6, [r3, #0]
 800a9e0:	69b3      	ldr	r3, [r6, #24]
 800a9e2:	b913      	cbnz	r3, 800a9ea <__sfp+0x16>
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ffbd 	bl	800a964 <__sinit>
 800a9ea:	3648      	adds	r6, #72	; 0x48
 800a9ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	d503      	bpl.n	800a9fc <__sfp+0x28>
 800a9f4:	6833      	ldr	r3, [r6, #0]
 800a9f6:	b30b      	cbz	r3, 800aa3c <__sfp+0x68>
 800a9f8:	6836      	ldr	r6, [r6, #0]
 800a9fa:	e7f7      	b.n	800a9ec <__sfp+0x18>
 800a9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa00:	b9d5      	cbnz	r5, 800aa38 <__sfp+0x64>
 800aa02:	4b16      	ldr	r3, [pc, #88]	; (800aa5c <__sfp+0x88>)
 800aa04:	60e3      	str	r3, [r4, #12]
 800aa06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa0a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa0c:	f000 f847 	bl	800aa9e <__retarget_lock_init_recursive>
 800aa10:	f7ff ff96 	bl	800a940 <__sfp_lock_release>
 800aa14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa1c:	6025      	str	r5, [r4, #0]
 800aa1e:	61a5      	str	r5, [r4, #24]
 800aa20:	2208      	movs	r2, #8
 800aa22:	4629      	mov	r1, r5
 800aa24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa28:	f7fb fd22 	bl	8006470 <memset>
 800aa2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa34:	4620      	mov	r0, r4
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	3468      	adds	r4, #104	; 0x68
 800aa3a:	e7d9      	b.n	800a9f0 <__sfp+0x1c>
 800aa3c:	2104      	movs	r1, #4
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff ff62 	bl	800a908 <__sfmoreglue>
 800aa44:	4604      	mov	r4, r0
 800aa46:	6030      	str	r0, [r6, #0]
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d1d5      	bne.n	800a9f8 <__sfp+0x24>
 800aa4c:	f7ff ff78 	bl	800a940 <__sfp_lock_release>
 800aa50:	230c      	movs	r3, #12
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	e7ee      	b.n	800aa34 <__sfp+0x60>
 800aa56:	bf00      	nop
 800aa58:	0800ae38 	.word	0x0800ae38
 800aa5c:	ffff0001 	.word	0xffff0001

0800aa60 <_fwalk_reent>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4606      	mov	r6, r0
 800aa66:	4688      	mov	r8, r1
 800aa68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa6c:	2700      	movs	r7, #0
 800aa6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa72:	f1b9 0901 	subs.w	r9, r9, #1
 800aa76:	d505      	bpl.n	800aa84 <_fwalk_reent+0x24>
 800aa78:	6824      	ldr	r4, [r4, #0]
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d1f7      	bne.n	800aa6e <_fwalk_reent+0xe>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa84:	89ab      	ldrh	r3, [r5, #12]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d907      	bls.n	800aa9a <_fwalk_reent+0x3a>
 800aa8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	d003      	beq.n	800aa9a <_fwalk_reent+0x3a>
 800aa92:	4629      	mov	r1, r5
 800aa94:	4630      	mov	r0, r6
 800aa96:	47c0      	blx	r8
 800aa98:	4307      	orrs	r7, r0
 800aa9a:	3568      	adds	r5, #104	; 0x68
 800aa9c:	e7e9      	b.n	800aa72 <_fwalk_reent+0x12>

0800aa9e <__retarget_lock_init_recursive>:
 800aa9e:	4770      	bx	lr

0800aaa0 <__retarget_lock_acquire_recursive>:
 800aaa0:	4770      	bx	lr

0800aaa2 <__retarget_lock_release_recursive>:
 800aaa2:	4770      	bx	lr

0800aaa4 <__swhatbuf_r>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaac:	2900      	cmp	r1, #0
 800aaae:	b096      	sub	sp, #88	; 0x58
 800aab0:	4614      	mov	r4, r2
 800aab2:	461d      	mov	r5, r3
 800aab4:	da08      	bge.n	800aac8 <__swhatbuf_r+0x24>
 800aab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	602a      	str	r2, [r5, #0]
 800aabe:	061a      	lsls	r2, r3, #24
 800aac0:	d410      	bmi.n	800aae4 <__swhatbuf_r+0x40>
 800aac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aac6:	e00e      	b.n	800aae6 <__swhatbuf_r+0x42>
 800aac8:	466a      	mov	r2, sp
 800aaca:	f000 f903 	bl	800acd4 <_fstat_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	dbf1      	blt.n	800aab6 <__swhatbuf_r+0x12>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aadc:	425a      	negs	r2, r3
 800aade:	415a      	adcs	r2, r3
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	e7ee      	b.n	800aac2 <__swhatbuf_r+0x1e>
 800aae4:	2340      	movs	r3, #64	; 0x40
 800aae6:	2000      	movs	r0, #0
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	b016      	add	sp, #88	; 0x58
 800aaec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaf0 <__smakebuf_r>:
 800aaf0:	898b      	ldrh	r3, [r1, #12]
 800aaf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaf4:	079d      	lsls	r5, r3, #30
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	d507      	bpl.n	800ab0c <__smakebuf_r+0x1c>
 800aafc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	2301      	movs	r3, #1
 800ab06:	6163      	str	r3, [r4, #20]
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	ab01      	add	r3, sp, #4
 800ab0e:	466a      	mov	r2, sp
 800ab10:	f7ff ffc8 	bl	800aaa4 <__swhatbuf_r>
 800ab14:	9900      	ldr	r1, [sp, #0]
 800ab16:	4605      	mov	r5, r0
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7ff f957 	bl	8009dcc <_malloc_r>
 800ab1e:	b948      	cbnz	r0, 800ab34 <__smakebuf_r+0x44>
 800ab20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab24:	059a      	lsls	r2, r3, #22
 800ab26:	d4ef      	bmi.n	800ab08 <__smakebuf_r+0x18>
 800ab28:	f023 0303 	bic.w	r3, r3, #3
 800ab2c:	f043 0302 	orr.w	r3, r3, #2
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	e7e3      	b.n	800aafc <__smakebuf_r+0xc>
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <__smakebuf_r+0x7c>)
 800ab36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	9b00      	ldr	r3, [sp, #0]
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	6120      	str	r0, [r4, #16]
 800ab4a:	b15b      	cbz	r3, 800ab64 <__smakebuf_r+0x74>
 800ab4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab50:	4630      	mov	r0, r6
 800ab52:	f000 f8d1 	bl	800acf8 <_isatty_r>
 800ab56:	b128      	cbz	r0, 800ab64 <__smakebuf_r+0x74>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f023 0303 	bic.w	r3, r3, #3
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	89a0      	ldrh	r0, [r4, #12]
 800ab66:	4305      	orrs	r5, r0
 800ab68:	81a5      	strh	r5, [r4, #12]
 800ab6a:	e7cd      	b.n	800ab08 <__smakebuf_r+0x18>
 800ab6c:	0800a8fd 	.word	0x0800a8fd

0800ab70 <_malloc_usable_size_r>:
 800ab70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab74:	1f18      	subs	r0, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfbc      	itt	lt
 800ab7a:	580b      	ldrlt	r3, [r1, r0]
 800ab7c:	18c0      	addlt	r0, r0, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_raise_r>:
 800ab80:	291f      	cmp	r1, #31
 800ab82:	b538      	push	{r3, r4, r5, lr}
 800ab84:	4604      	mov	r4, r0
 800ab86:	460d      	mov	r5, r1
 800ab88:	d904      	bls.n	800ab94 <_raise_r+0x14>
 800ab8a:	2316      	movs	r3, #22
 800ab8c:	6003      	str	r3, [r0, #0]
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab96:	b112      	cbz	r2, 800ab9e <_raise_r+0x1e>
 800ab98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab9c:	b94b      	cbnz	r3, 800abb2 <_raise_r+0x32>
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 f830 	bl	800ac04 <_getpid_r>
 800aba4:	462a      	mov	r2, r5
 800aba6:	4601      	mov	r1, r0
 800aba8:	4620      	mov	r0, r4
 800abaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abae:	f000 b817 	b.w	800abe0 <_kill_r>
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d00a      	beq.n	800abcc <_raise_r+0x4c>
 800abb6:	1c59      	adds	r1, r3, #1
 800abb8:	d103      	bne.n	800abc2 <_raise_r+0x42>
 800abba:	2316      	movs	r3, #22
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	2001      	movs	r0, #1
 800abc0:	e7e7      	b.n	800ab92 <_raise_r+0x12>
 800abc2:	2400      	movs	r4, #0
 800abc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abc8:	4628      	mov	r0, r5
 800abca:	4798      	blx	r3
 800abcc:	2000      	movs	r0, #0
 800abce:	e7e0      	b.n	800ab92 <_raise_r+0x12>

0800abd0 <raise>:
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <raise+0xc>)
 800abd2:	4601      	mov	r1, r0
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f7ff bfd3 	b.w	800ab80 <_raise_r>
 800abda:	bf00      	nop
 800abdc:	20000010 	.word	0x20000010

0800abe0 <_kill_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d07      	ldr	r5, [pc, #28]	; (800ac00 <_kill_r+0x20>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	4611      	mov	r1, r2
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	f7f8 fe91 	bl	8003914 <_kill>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	d102      	bne.n	800abfc <_kill_r+0x1c>
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	b103      	cbz	r3, 800abfc <_kill_r+0x1c>
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	bd38      	pop	{r3, r4, r5, pc}
 800abfe:	bf00      	nop
 800ac00:	20000358 	.word	0x20000358

0800ac04 <_getpid_r>:
 800ac04:	f7f8 be7e 	b.w	8003904 <_getpid>

0800ac08 <__sread>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	f000 f894 	bl	800ad3c <_read_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	bfab      	itete	ge
 800ac18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac1c:	181b      	addge	r3, r3, r0
 800ac1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac22:	bfac      	ite	ge
 800ac24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac26:	81a3      	strhlt	r3, [r4, #12]
 800ac28:	bd10      	pop	{r4, pc}

0800ac2a <__swrite>:
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	461f      	mov	r7, r3
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	05db      	lsls	r3, r3, #23
 800ac34:	4605      	mov	r5, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	4616      	mov	r6, r2
 800ac3a:	d505      	bpl.n	800ac48 <__swrite+0x1e>
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	2302      	movs	r3, #2
 800ac42:	2200      	movs	r2, #0
 800ac44:	f000 f868 	bl	800ad18 <_lseek_r>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	4628      	mov	r0, r5
 800ac5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	f000 b817 	b.w	800ac90 <_write_r>

0800ac62 <__sseek>:
 800ac62:	b510      	push	{r4, lr}
 800ac64:	460c      	mov	r4, r1
 800ac66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6a:	f000 f855 	bl	800ad18 <_lseek_r>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	bf15      	itete	ne
 800ac74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac7e:	81a3      	strheq	r3, [r4, #12]
 800ac80:	bf18      	it	ne
 800ac82:	81a3      	strhne	r3, [r4, #12]
 800ac84:	bd10      	pop	{r4, pc}

0800ac86 <__sclose>:
 800ac86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8a:	f000 b813 	b.w	800acb4 <_close_r>
	...

0800ac90 <_write_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	; (800acb0 <_write_r+0x20>)
 800ac94:	4604      	mov	r4, r0
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	602a      	str	r2, [r5, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f7f8 fe6f 	bl	8003982 <_write>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_write_r+0x1e>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_write_r+0x1e>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	20000358 	.word	0x20000358

0800acb4 <_close_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	; (800acd0 <_close_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f8 fe7b 	bl	80039ba <_close>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_close_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_close_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20000358 	.word	0x20000358

0800acd4 <_fstat_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	; (800acf4 <_fstat_r+0x20>)
 800acd8:	2300      	movs	r3, #0
 800acda:	4604      	mov	r4, r0
 800acdc:	4608      	mov	r0, r1
 800acde:	4611      	mov	r1, r2
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	f7f8 fe76 	bl	80039d2 <_fstat>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	d102      	bne.n	800acf0 <_fstat_r+0x1c>
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	b103      	cbz	r3, 800acf0 <_fstat_r+0x1c>
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	bd38      	pop	{r3, r4, r5, pc}
 800acf2:	bf00      	nop
 800acf4:	20000358 	.word	0x20000358

0800acf8 <_isatty_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	; (800ad14 <_isatty_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f8 fe75 	bl	80039f2 <_isatty>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_isatty_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_isatty_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20000358 	.word	0x20000358

0800ad18 <_lseek_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	; (800ad38 <_lseek_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f8 fe6e 	bl	8003a08 <_lseek>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_lseek_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_lseek_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000358 	.word	0x20000358

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f8 fdfc 	bl	8003948 <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000358 	.word	0x20000358

0800ad60 <_init>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_fini>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr
